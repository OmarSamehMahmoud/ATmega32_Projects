
ADC_Multi_Inputs_LDR_Potinometer_LM35.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a28  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  00002a28  00002a9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001d1c  00000000  00000000  00002bac  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b30  00000000  00000000  000048c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  000053f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f0  00000000  00000000  00005598  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240c  00000000  00000000  00005788  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001377  00000000  00000000  00007b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d8  00000000  00000000  00008f0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000a0e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f3  00000000  00000000  0000a2a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ce  00000000  00000000  0000a597  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000af65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e2       	ldi	r30, 0x28	; 40
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 27 13 	call	0x264e	; 0x264e <main>
      7a:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a7 e6       	ldi	r26, 0x67	; 103
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 e7 14 	jmp	0x29ce	; 0x29ce <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 03 15 	jmp	0x2a06	; 0x2a06 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 e7 14 	jmp	0x29ce	; 0x29ce <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 03 15 	jmp	0x2a06	; 0x2a06 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	87 e6       	ldi	r24, 0x67	; 103
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 e3 14 	jmp	0x29c6	; 0x29c6 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	67 e6       	ldi	r22, 0x67	; 103
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 ff 14 	jmp	0x29fe	; 0x29fe <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 e7 14 	jmp	0x29ce	; 0x29ce <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 03 15 	jmp	0x2a06	; 0x2a06 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 e7 14 	jmp	0x29ce	; 0x29ce <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 03 15 	jmp	0x2a06	; 0x2a06 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 e7 14 	jmp	0x29ce	; 0x29ce <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 03 15 	jmp	0x2a06	; 0x2a06 <__epilogue_restores__+0x18>

0000089a <__floatsisf>:
     89a:	a8 e0       	ldi	r26, 0x08	; 8
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__prologue_saves__+0x12>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	da 01       	movw	r26, r20
     8b0:	c9 01       	movw	r24, r18
     8b2:	88 27       	eor	r24, r24
     8b4:	b7 fd       	sbrc	r27, 7
     8b6:	83 95       	inc	r24
     8b8:	99 27       	eor	r25, r25
     8ba:	aa 27       	eor	r26, r26
     8bc:	bb 27       	eor	r27, r27
     8be:	b8 2e       	mov	r11, r24
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <__floatsisf+0x36>
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	3a c0       	rjmp	.+116    	; 0x944 <__floatsisf+0xaa>
     8d0:	88 23       	and	r24, r24
     8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x64>
     8d4:	20 30       	cpi	r18, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	38 07       	cpc	r19, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	48 07       	cpc	r20, r24
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	58 07       	cpc	r21, r24
     8e2:	29 f4       	brne	.+10     	; 0x8ee <__floatsisf+0x54>
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	9f ec       	ldi	r25, 0xCF	; 207
     8ec:	30 c0       	rjmp	.+96     	; 0x94e <__floatsisf+0xb4>
     8ee:	ee 24       	eor	r14, r14
     8f0:	ff 24       	eor	r15, r15
     8f2:	87 01       	movw	r16, r14
     8f4:	e2 1a       	sub	r14, r18
     8f6:	f3 0a       	sbc	r15, r19
     8f8:	04 0b       	sbc	r16, r20
     8fa:	15 0b       	sbc	r17, r21
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__floatsisf+0x68>
     8fe:	79 01       	movw	r14, r18
     900:	8a 01       	movw	r16, r20
     902:	8e e1       	ldi	r24, 0x1E	; 30
     904:	c8 2e       	mov	r12, r24
     906:	d1 2c       	mov	r13, r1
     908:	dc 82       	std	Y+4, r13	; 0x04
     90a:	cb 82       	std	Y+3, r12	; 0x03
     90c:	ed 82       	std	Y+5, r14	; 0x05
     90e:	fe 82       	std	Y+6, r15	; 0x06
     910:	0f 83       	std	Y+7, r16	; 0x07
     912:	18 87       	std	Y+8, r17	; 0x08
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__clzsi2>
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	18 16       	cp	r1, r24
     920:	19 06       	cpc	r1, r25
     922:	84 f4       	brge	.+32     	; 0x944 <__floatsisf+0xaa>
     924:	08 2e       	mov	r0, r24
     926:	04 c0       	rjmp	.+8      	; 0x930 <__floatsisf+0x96>
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	00 1f       	adc	r16, r16
     92e:	11 1f       	adc	r17, r17
     930:	0a 94       	dec	r0
     932:	d2 f7       	brpl	.-12     	; 0x928 <__floatsisf+0x8e>
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 1a       	sub	r12, r24
     93e:	d9 0a       	sbc	r13, r25
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ba 82       	std	Y+2, r11	; 0x02
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     94e:	28 96       	adiw	r28, 0x08	; 8
     950:	e9 e0       	ldi	r30, 0x09	; 9
     952:	0c 94 00 15 	jmp	0x2a00	; 0x2a00 <__epilogue_restores__+0x12>

00000956 <__fixsfsi>:
     956:	ac e0       	ldi	r26, 0x0C	; 12
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e1 eb       	ldi	r30, 0xB1	; 177
     95c:	f4 e0       	ldi	r31, 0x04	; 4
     95e:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__prologue_saves__+0x20>
     962:	69 83       	std	Y+1, r22	; 0x01
     964:	7a 83       	std	Y+2, r23	; 0x02
     966:	8b 83       	std	Y+3, r24	; 0x03
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	be 01       	movw	r22, r28
     970:	6b 5f       	subi	r22, 0xFB	; 251
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	61 f1       	breq	.+88     	; 0x9d6 <__fixsfsi+0x80>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	50 f1       	brcs	.+84     	; 0x9d6 <__fixsfsi+0x80>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	21 f4       	brne	.+8      	; 0x98e <__fixsfsi+0x38>
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	88 23       	and	r24, r24
     98a:	51 f1       	breq	.+84     	; 0x9e0 <__fixsfsi+0x8a>
     98c:	2e c0       	rjmp	.+92     	; 0x9ea <__fixsfsi+0x94>
     98e:	2f 81       	ldd	r18, Y+7	; 0x07
     990:	38 85       	ldd	r19, Y+8	; 0x08
     992:	37 fd       	sbrc	r19, 7
     994:	20 c0       	rjmp	.+64     	; 0x9d6 <__fixsfsi+0x80>
     996:	6e 81       	ldd	r22, Y+6	; 0x06
     998:	2f 31       	cpi	r18, 0x1F	; 31
     99a:	31 05       	cpc	r19, r1
     99c:	1c f0       	brlt	.+6      	; 0x9a4 <__fixsfsi+0x4e>
     99e:	66 23       	and	r22, r22
     9a0:	f9 f0       	breq	.+62     	; 0x9e0 <__fixsfsi+0x8a>
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <__fixsfsi+0x94>
     9a4:	8e e1       	ldi	r24, 0x1E	; 30
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	82 1b       	sub	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	29 85       	ldd	r18, Y+9	; 0x09
     9ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     9b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__fixsfsi+0x68>
     9b6:	56 95       	lsr	r21
     9b8:	47 95       	ror	r20
     9ba:	37 95       	ror	r19
     9bc:	27 95       	ror	r18
     9be:	8a 95       	dec	r24
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__fixsfsi+0x60>
     9c2:	66 23       	and	r22, r22
     9c4:	b1 f0       	breq	.+44     	; 0x9f2 <__fixsfsi+0x9c>
     9c6:	50 95       	com	r21
     9c8:	40 95       	com	r20
     9ca:	30 95       	com	r19
     9cc:	21 95       	neg	r18
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	4f 4f       	sbci	r20, 0xFF	; 255
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <__fixsfsi+0x9c>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__fixsfsi+0x9c>
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f ef       	ldi	r20, 0xFF	; 255
     9e6:	5f e7       	ldi	r21, 0x7F	; 127
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e8       	ldi	r21, 0x80	; 128
     9f2:	b9 01       	movw	r22, r18
     9f4:	ca 01       	movw	r24, r20
     9f6:	2c 96       	adiw	r28, 0x0c	; 12
     9f8:	e2 e0       	ldi	r30, 0x02	; 2
     9fa:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__epilogue_restores__+0x20>

000009fe <__clzsi2>:
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	7b 01       	movw	r14, r22
     a08:	8c 01       	movw	r16, r24
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	e8 16       	cp	r14, r24
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	f8 06       	cpc	r15, r24
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	08 07       	cpc	r16, r24
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	18 07       	cpc	r17, r24
     a1a:	88 f4       	brcc	.+34     	; 0xa3e <__clzsi2+0x40>
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	e8 16       	cp	r14, r24
     a20:	f1 04       	cpc	r15, r1
     a22:	01 05       	cpc	r16, r1
     a24:	11 05       	cpc	r17, r1
     a26:	31 f0       	breq	.+12     	; 0xa34 <__clzsi2+0x36>
     a28:	28 f0       	brcs	.+10     	; 0xa34 <__clzsi2+0x36>
     a2a:	88 e0       	ldi	r24, 0x08	; 8
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	a0 e0       	ldi	r26, 0x00	; 0
     a30:	b0 e0       	ldi	r27, 0x00	; 0
     a32:	17 c0       	rjmp	.+46     	; 0xa62 <__clzsi2+0x64>
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	a0 e0       	ldi	r26, 0x00	; 0
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	12 c0       	rjmp	.+36     	; 0xa62 <__clzsi2+0x64>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	e8 16       	cp	r14, r24
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	f8 06       	cpc	r15, r24
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	08 07       	cpc	r16, r24
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	18 07       	cpc	r17, r24
     a4e:	28 f0       	brcs	.+10     	; 0xa5a <__clzsi2+0x5c>
     a50:	88 e1       	ldi	r24, 0x18	; 24
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__clzsi2+0x64>
     a5a:	80 e1       	ldi	r24, 0x10	; 16
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	a0 e0       	ldi	r26, 0x00	; 0
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	20 e2       	ldi	r18, 0x20	; 32
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	28 1b       	sub	r18, r24
     a6c:	39 0b       	sbc	r19, r25
     a6e:	4a 0b       	sbc	r20, r26
     a70:	5b 0b       	sbc	r21, r27
     a72:	04 c0       	rjmp	.+8      	; 0xa7c <__clzsi2+0x7e>
     a74:	16 95       	lsr	r17
     a76:	07 95       	ror	r16
     a78:	f7 94       	ror	r15
     a7a:	e7 94       	ror	r14
     a7c:	8a 95       	dec	r24
     a7e:	d2 f7       	brpl	.-12     	; 0xa74 <__clzsi2+0x76>
     a80:	f7 01       	movw	r30, r14
     a82:	e1 59       	subi	r30, 0x91	; 145
     a84:	ff 4f       	sbci	r31, 0xFF	; 255
     a86:	80 81       	ld	r24, Z
     a88:	28 1b       	sub	r18, r24
     a8a:	31 09       	sbc	r19, r1
     a8c:	41 09       	sbc	r20, r1
     a8e:	51 09       	sbc	r21, r1
     a90:	c9 01       	movw	r24, r18
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	08 95       	ret

00000a9c <__pack_f>:
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	fc 01       	movw	r30, r24
     aa8:	e4 80       	ldd	r14, Z+4	; 0x04
     aaa:	f5 80       	ldd	r15, Z+5	; 0x05
     aac:	06 81       	ldd	r16, Z+6	; 0x06
     aae:	17 81       	ldd	r17, Z+7	; 0x07
     ab0:	d1 80       	ldd	r13, Z+1	; 0x01
     ab2:	80 81       	ld	r24, Z
     ab4:	82 30       	cpi	r24, 0x02	; 2
     ab6:	48 f4       	brcc	.+18     	; 0xaca <__pack_f+0x2e>
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	a0 e1       	ldi	r26, 0x10	; 16
     abe:	b0 e0       	ldi	r27, 0x00	; 0
     ac0:	e8 2a       	or	r14, r24
     ac2:	f9 2a       	or	r15, r25
     ac4:	0a 2b       	or	r16, r26
     ac6:	1b 2b       	or	r17, r27
     ac8:	a5 c0       	rjmp	.+330    	; 0xc14 <__pack_f+0x178>
     aca:	84 30       	cpi	r24, 0x04	; 4
     acc:	09 f4       	brne	.+2      	; 0xad0 <__pack_f+0x34>
     ace:	9f c0       	rjmp	.+318    	; 0xc0e <__pack_f+0x172>
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	21 f4       	brne	.+8      	; 0xadc <__pack_f+0x40>
     ad4:	ee 24       	eor	r14, r14
     ad6:	ff 24       	eor	r15, r15
     ad8:	87 01       	movw	r16, r14
     ada:	05 c0       	rjmp	.+10     	; 0xae6 <__pack_f+0x4a>
     adc:	e1 14       	cp	r14, r1
     ade:	f1 04       	cpc	r15, r1
     ae0:	01 05       	cpc	r16, r1
     ae2:	11 05       	cpc	r17, r1
     ae4:	19 f4       	brne	.+6      	; 0xaec <__pack_f+0x50>
     ae6:	e0 e0       	ldi	r30, 0x00	; 0
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	96 c0       	rjmp	.+300    	; 0xc18 <__pack_f+0x17c>
     aec:	62 81       	ldd	r22, Z+2	; 0x02
     aee:	73 81       	ldd	r23, Z+3	; 0x03
     af0:	9f ef       	ldi	r25, 0xFF	; 255
     af2:	62 38       	cpi	r22, 0x82	; 130
     af4:	79 07       	cpc	r23, r25
     af6:	0c f0       	brlt	.+2      	; 0xafa <__pack_f+0x5e>
     af8:	5b c0       	rjmp	.+182    	; 0xbb0 <__pack_f+0x114>
     afa:	22 e8       	ldi	r18, 0x82	; 130
     afc:	3f ef       	ldi	r19, 0xFF	; 255
     afe:	26 1b       	sub	r18, r22
     b00:	37 0b       	sbc	r19, r23
     b02:	2a 31       	cpi	r18, 0x1A	; 26
     b04:	31 05       	cpc	r19, r1
     b06:	2c f0       	brlt	.+10     	; 0xb12 <__pack_f+0x76>
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	2a c0       	rjmp	.+84     	; 0xb66 <__pack_f+0xca>
     b12:	b8 01       	movw	r22, r16
     b14:	a7 01       	movw	r20, r14
     b16:	02 2e       	mov	r0, r18
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__pack_f+0x86>
     b1a:	76 95       	lsr	r23
     b1c:	67 95       	ror	r22
     b1e:	57 95       	ror	r21
     b20:	47 95       	ror	r20
     b22:	0a 94       	dec	r0
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__pack_f+0x7e>
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	04 c0       	rjmp	.+8      	; 0xb38 <__pack_f+0x9c>
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	aa 1f       	adc	r26, r26
     b36:	bb 1f       	adc	r27, r27
     b38:	2a 95       	dec	r18
     b3a:	d2 f7       	brpl	.-12     	; 0xb30 <__pack_f+0x94>
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	a1 09       	sbc	r26, r1
     b40:	b1 09       	sbc	r27, r1
     b42:	8e 21       	and	r24, r14
     b44:	9f 21       	and	r25, r15
     b46:	a0 23       	and	r26, r16
     b48:	b1 23       	and	r27, r17
     b4a:	00 97       	sbiw	r24, 0x00	; 0
     b4c:	a1 05       	cpc	r26, r1
     b4e:	b1 05       	cpc	r27, r1
     b50:	21 f0       	breq	.+8      	; 0xb5a <__pack_f+0xbe>
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	9a 01       	movw	r18, r20
     b5c:	ab 01       	movw	r20, r22
     b5e:	28 2b       	or	r18, r24
     b60:	39 2b       	or	r19, r25
     b62:	4a 2b       	or	r20, r26
     b64:	5b 2b       	or	r21, r27
     b66:	da 01       	movw	r26, r20
     b68:	c9 01       	movw	r24, r18
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	90 70       	andi	r25, 0x00	; 0
     b6e:	a0 70       	andi	r26, 0x00	; 0
     b70:	b0 70       	andi	r27, 0x00	; 0
     b72:	80 34       	cpi	r24, 0x40	; 64
     b74:	91 05       	cpc	r25, r1
     b76:	a1 05       	cpc	r26, r1
     b78:	b1 05       	cpc	r27, r1
     b7a:	39 f4       	brne	.+14     	; 0xb8a <__pack_f+0xee>
     b7c:	27 ff       	sbrs	r18, 7
     b7e:	09 c0       	rjmp	.+18     	; 0xb92 <__pack_f+0xf6>
     b80:	20 5c       	subi	r18, 0xC0	; 192
     b82:	3f 4f       	sbci	r19, 0xFF	; 255
     b84:	4f 4f       	sbci	r20, 0xFF	; 255
     b86:	5f 4f       	sbci	r21, 0xFF	; 255
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0xf6>
     b8a:	21 5c       	subi	r18, 0xC1	; 193
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	4f 4f       	sbci	r20, 0xFF	; 255
     b90:	5f 4f       	sbci	r21, 0xFF	; 255
     b92:	e0 e0       	ldi	r30, 0x00	; 0
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	20 30       	cpi	r18, 0x00	; 0
     b98:	a0 e0       	ldi	r26, 0x00	; 0
     b9a:	3a 07       	cpc	r19, r26
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	4a 07       	cpc	r20, r26
     ba0:	a0 e4       	ldi	r26, 0x40	; 64
     ba2:	5a 07       	cpc	r21, r26
     ba4:	10 f0       	brcs	.+4      	; 0xbaa <__pack_f+0x10e>
     ba6:	e1 e0       	ldi	r30, 0x01	; 1
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	79 01       	movw	r14, r18
     bac:	8a 01       	movw	r16, r20
     bae:	27 c0       	rjmp	.+78     	; 0xbfe <__pack_f+0x162>
     bb0:	60 38       	cpi	r22, 0x80	; 128
     bb2:	71 05       	cpc	r23, r1
     bb4:	64 f5       	brge	.+88     	; 0xc0e <__pack_f+0x172>
     bb6:	fb 01       	movw	r30, r22
     bb8:	e1 58       	subi	r30, 0x81	; 129
     bba:	ff 4f       	sbci	r31, 0xFF	; 255
     bbc:	d8 01       	movw	r26, r16
     bbe:	c7 01       	movw	r24, r14
     bc0:	8f 77       	andi	r24, 0x7F	; 127
     bc2:	90 70       	andi	r25, 0x00	; 0
     bc4:	a0 70       	andi	r26, 0x00	; 0
     bc6:	b0 70       	andi	r27, 0x00	; 0
     bc8:	80 34       	cpi	r24, 0x40	; 64
     bca:	91 05       	cpc	r25, r1
     bcc:	a1 05       	cpc	r26, r1
     bce:	b1 05       	cpc	r27, r1
     bd0:	39 f4       	brne	.+14     	; 0xbe0 <__pack_f+0x144>
     bd2:	e7 fe       	sbrs	r14, 7
     bd4:	0d c0       	rjmp	.+26     	; 0xbf0 <__pack_f+0x154>
     bd6:	80 e4       	ldi	r24, 0x40	; 64
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	04 c0       	rjmp	.+8      	; 0xbe8 <__pack_f+0x14c>
     be0:	8f e3       	ldi	r24, 0x3F	; 63
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	a0 e0       	ldi	r26, 0x00	; 0
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e8 0e       	add	r14, r24
     bea:	f9 1e       	adc	r15, r25
     bec:	0a 1f       	adc	r16, r26
     bee:	1b 1f       	adc	r17, r27
     bf0:	17 ff       	sbrs	r17, 7
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <__pack_f+0x162>
     bf4:	16 95       	lsr	r17
     bf6:	07 95       	ror	r16
     bf8:	f7 94       	ror	r15
     bfa:	e7 94       	ror	r14
     bfc:	31 96       	adiw	r30, 0x01	; 1
     bfe:	87 e0       	ldi	r24, 0x07	; 7
     c00:	16 95       	lsr	r17
     c02:	07 95       	ror	r16
     c04:	f7 94       	ror	r15
     c06:	e7 94       	ror	r14
     c08:	8a 95       	dec	r24
     c0a:	d1 f7       	brne	.-12     	; 0xc00 <__pack_f+0x164>
     c0c:	05 c0       	rjmp	.+10     	; 0xc18 <__pack_f+0x17c>
     c0e:	ee 24       	eor	r14, r14
     c10:	ff 24       	eor	r15, r15
     c12:	87 01       	movw	r16, r14
     c14:	ef ef       	ldi	r30, 0xFF	; 255
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	6e 2f       	mov	r22, r30
     c1a:	67 95       	ror	r22
     c1c:	66 27       	eor	r22, r22
     c1e:	67 95       	ror	r22
     c20:	90 2f       	mov	r25, r16
     c22:	9f 77       	andi	r25, 0x7F	; 127
     c24:	d7 94       	ror	r13
     c26:	dd 24       	eor	r13, r13
     c28:	d7 94       	ror	r13
     c2a:	8e 2f       	mov	r24, r30
     c2c:	86 95       	lsr	r24
     c2e:	49 2f       	mov	r20, r25
     c30:	46 2b       	or	r20, r22
     c32:	58 2f       	mov	r21, r24
     c34:	5d 29       	or	r21, r13
     c36:	b7 01       	movw	r22, r14
     c38:	ca 01       	movw	r24, r20
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	08 95       	ret

00000c46 <__unpack_f>:
     c46:	fc 01       	movw	r30, r24
     c48:	db 01       	movw	r26, r22
     c4a:	40 81       	ld	r20, Z
     c4c:	51 81       	ldd	r21, Z+1	; 0x01
     c4e:	22 81       	ldd	r18, Z+2	; 0x02
     c50:	62 2f       	mov	r22, r18
     c52:	6f 77       	andi	r22, 0x7F	; 127
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	22 1f       	adc	r18, r18
     c58:	22 27       	eor	r18, r18
     c5a:	22 1f       	adc	r18, r18
     c5c:	93 81       	ldd	r25, Z+3	; 0x03
     c5e:	89 2f       	mov	r24, r25
     c60:	88 0f       	add	r24, r24
     c62:	82 2b       	or	r24, r18
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	99 1f       	adc	r25, r25
     c6a:	99 27       	eor	r25, r25
     c6c:	99 1f       	adc	r25, r25
     c6e:	11 96       	adiw	r26, 0x01	; 1
     c70:	9c 93       	st	X, r25
     c72:	11 97       	sbiw	r26, 0x01	; 1
     c74:	21 15       	cp	r18, r1
     c76:	31 05       	cpc	r19, r1
     c78:	a9 f5       	brne	.+106    	; 0xce4 <__unpack_f+0x9e>
     c7a:	41 15       	cp	r20, r1
     c7c:	51 05       	cpc	r21, r1
     c7e:	61 05       	cpc	r22, r1
     c80:	71 05       	cpc	r23, r1
     c82:	11 f4       	brne	.+4      	; 0xc88 <__unpack_f+0x42>
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	37 c0       	rjmp	.+110    	; 0xcf6 <__unpack_f+0xb0>
     c88:	82 e8       	ldi	r24, 0x82	; 130
     c8a:	9f ef       	ldi	r25, 0xFF	; 255
     c8c:	13 96       	adiw	r26, 0x03	; 3
     c8e:	9c 93       	st	X, r25
     c90:	8e 93       	st	-X, r24
     c92:	12 97       	sbiw	r26, 0x02	; 2
     c94:	9a 01       	movw	r18, r20
     c96:	ab 01       	movw	r20, r22
     c98:	67 e0       	ldi	r22, 0x07	; 7
     c9a:	22 0f       	add	r18, r18
     c9c:	33 1f       	adc	r19, r19
     c9e:	44 1f       	adc	r20, r20
     ca0:	55 1f       	adc	r21, r21
     ca2:	6a 95       	dec	r22
     ca4:	d1 f7       	brne	.-12     	; 0xc9a <__unpack_f+0x54>
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	8c 93       	st	X, r24
     caa:	0d c0       	rjmp	.+26     	; 0xcc6 <__unpack_f+0x80>
     cac:	22 0f       	add	r18, r18
     cae:	33 1f       	adc	r19, r19
     cb0:	44 1f       	adc	r20, r20
     cb2:	55 1f       	adc	r21, r21
     cb4:	12 96       	adiw	r26, 0x02	; 2
     cb6:	8d 91       	ld	r24, X+
     cb8:	9c 91       	ld	r25, X
     cba:	13 97       	sbiw	r26, 0x03	; 3
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	13 96       	adiw	r26, 0x03	; 3
     cc0:	9c 93       	st	X, r25
     cc2:	8e 93       	st	-X, r24
     cc4:	12 97       	sbiw	r26, 0x02	; 2
     cc6:	20 30       	cpi	r18, 0x00	; 0
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	38 07       	cpc	r19, r24
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	48 07       	cpc	r20, r24
     cd0:	80 e4       	ldi	r24, 0x40	; 64
     cd2:	58 07       	cpc	r21, r24
     cd4:	58 f3       	brcs	.-42     	; 0xcac <__unpack_f+0x66>
     cd6:	14 96       	adiw	r26, 0x04	; 4
     cd8:	2d 93       	st	X+, r18
     cda:	3d 93       	st	X+, r19
     cdc:	4d 93       	st	X+, r20
     cde:	5c 93       	st	X, r21
     ce0:	17 97       	sbiw	r26, 0x07	; 7
     ce2:	08 95       	ret
     ce4:	2f 3f       	cpi	r18, 0xFF	; 255
     ce6:	31 05       	cpc	r19, r1
     ce8:	79 f4       	brne	.+30     	; 0xd08 <__unpack_f+0xc2>
     cea:	41 15       	cp	r20, r1
     cec:	51 05       	cpc	r21, r1
     cee:	61 05       	cpc	r22, r1
     cf0:	71 05       	cpc	r23, r1
     cf2:	19 f4       	brne	.+6      	; 0xcfa <__unpack_f+0xb4>
     cf4:	84 e0       	ldi	r24, 0x04	; 4
     cf6:	8c 93       	st	X, r24
     cf8:	08 95       	ret
     cfa:	64 ff       	sbrs	r22, 4
     cfc:	03 c0       	rjmp	.+6      	; 0xd04 <__unpack_f+0xbe>
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	8c 93       	st	X, r24
     d02:	12 c0       	rjmp	.+36     	; 0xd28 <__unpack_f+0xe2>
     d04:	1c 92       	st	X, r1
     d06:	10 c0       	rjmp	.+32     	; 0xd28 <__unpack_f+0xe2>
     d08:	2f 57       	subi	r18, 0x7F	; 127
     d0a:	30 40       	sbci	r19, 0x00	; 0
     d0c:	13 96       	adiw	r26, 0x03	; 3
     d0e:	3c 93       	st	X, r19
     d10:	2e 93       	st	-X, r18
     d12:	12 97       	sbiw	r26, 0x02	; 2
     d14:	83 e0       	ldi	r24, 0x03	; 3
     d16:	8c 93       	st	X, r24
     d18:	87 e0       	ldi	r24, 0x07	; 7
     d1a:	44 0f       	add	r20, r20
     d1c:	55 1f       	adc	r21, r21
     d1e:	66 1f       	adc	r22, r22
     d20:	77 1f       	adc	r23, r23
     d22:	8a 95       	dec	r24
     d24:	d1 f7       	brne	.-12     	; 0xd1a <__unpack_f+0xd4>
     d26:	70 64       	ori	r23, 0x40	; 64
     d28:	14 96       	adiw	r26, 0x04	; 4
     d2a:	4d 93       	st	X+, r20
     d2c:	5d 93       	st	X+, r21
     d2e:	6d 93       	st	X+, r22
     d30:	7c 93       	st	X, r23
     d32:	17 97       	sbiw	r26, 0x07	; 7
     d34:	08 95       	ret

00000d36 <__fpcmp_parts_f>:
     d36:	1f 93       	push	r17
     d38:	dc 01       	movw	r26, r24
     d3a:	fb 01       	movw	r30, r22
     d3c:	9c 91       	ld	r25, X
     d3e:	92 30       	cpi	r25, 0x02	; 2
     d40:	08 f4       	brcc	.+2      	; 0xd44 <__fpcmp_parts_f+0xe>
     d42:	47 c0       	rjmp	.+142    	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d44:	80 81       	ld	r24, Z
     d46:	82 30       	cpi	r24, 0x02	; 2
     d48:	08 f4       	brcc	.+2      	; 0xd4c <__fpcmp_parts_f+0x16>
     d4a:	43 c0       	rjmp	.+134    	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d4c:	94 30       	cpi	r25, 0x04	; 4
     d4e:	51 f4       	brne	.+20     	; 0xd64 <__fpcmp_parts_f+0x2e>
     d50:	11 96       	adiw	r26, 0x01	; 1
     d52:	1c 91       	ld	r17, X
     d54:	84 30       	cpi	r24, 0x04	; 4
     d56:	99 f5       	brne	.+102    	; 0xdbe <__fpcmp_parts_f+0x88>
     d58:	81 81       	ldd	r24, Z+1	; 0x01
     d5a:	68 2f       	mov	r22, r24
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	61 1b       	sub	r22, r17
     d60:	71 09       	sbc	r23, r1
     d62:	3f c0       	rjmp	.+126    	; 0xde2 <__fpcmp_parts_f+0xac>
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	21 f0       	breq	.+8      	; 0xd70 <__fpcmp_parts_f+0x3a>
     d68:	92 30       	cpi	r25, 0x02	; 2
     d6a:	31 f4       	brne	.+12     	; 0xd78 <__fpcmp_parts_f+0x42>
     d6c:	82 30       	cpi	r24, 0x02	; 2
     d6e:	b9 f1       	breq	.+110    	; 0xdde <__fpcmp_parts_f+0xa8>
     d70:	81 81       	ldd	r24, Z+1	; 0x01
     d72:	88 23       	and	r24, r24
     d74:	89 f1       	breq	.+98     	; 0xdd8 <__fpcmp_parts_f+0xa2>
     d76:	2d c0       	rjmp	.+90     	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d78:	11 96       	adiw	r26, 0x01	; 1
     d7a:	1c 91       	ld	r17, X
     d7c:	11 97       	sbiw	r26, 0x01	; 1
     d7e:	82 30       	cpi	r24, 0x02	; 2
     d80:	f1 f0       	breq	.+60     	; 0xdbe <__fpcmp_parts_f+0x88>
     d82:	81 81       	ldd	r24, Z+1	; 0x01
     d84:	18 17       	cp	r17, r24
     d86:	d9 f4       	brne	.+54     	; 0xdbe <__fpcmp_parts_f+0x88>
     d88:	12 96       	adiw	r26, 0x02	; 2
     d8a:	2d 91       	ld	r18, X+
     d8c:	3c 91       	ld	r19, X
     d8e:	13 97       	sbiw	r26, 0x03	; 3
     d90:	82 81       	ldd	r24, Z+2	; 0x02
     d92:	93 81       	ldd	r25, Z+3	; 0x03
     d94:	82 17       	cp	r24, r18
     d96:	93 07       	cpc	r25, r19
     d98:	94 f0       	brlt	.+36     	; 0xdbe <__fpcmp_parts_f+0x88>
     d9a:	28 17       	cp	r18, r24
     d9c:	39 07       	cpc	r19, r25
     d9e:	bc f0       	brlt	.+46     	; 0xdce <__fpcmp_parts_f+0x98>
     da0:	14 96       	adiw	r26, 0x04	; 4
     da2:	8d 91       	ld	r24, X+
     da4:	9d 91       	ld	r25, X+
     da6:	0d 90       	ld	r0, X+
     da8:	bc 91       	ld	r27, X
     daa:	a0 2d       	mov	r26, r0
     dac:	24 81       	ldd	r18, Z+4	; 0x04
     dae:	35 81       	ldd	r19, Z+5	; 0x05
     db0:	46 81       	ldd	r20, Z+6	; 0x06
     db2:	57 81       	ldd	r21, Z+7	; 0x07
     db4:	28 17       	cp	r18, r24
     db6:	39 07       	cpc	r19, r25
     db8:	4a 07       	cpc	r20, r26
     dba:	5b 07       	cpc	r21, r27
     dbc:	18 f4       	brcc	.+6      	; 0xdc4 <__fpcmp_parts_f+0x8e>
     dbe:	11 23       	and	r17, r17
     dc0:	41 f0       	breq	.+16     	; 0xdd2 <__fpcmp_parts_f+0x9c>
     dc2:	0a c0       	rjmp	.+20     	; 0xdd8 <__fpcmp_parts_f+0xa2>
     dc4:	82 17       	cp	r24, r18
     dc6:	93 07       	cpc	r25, r19
     dc8:	a4 07       	cpc	r26, r20
     dca:	b5 07       	cpc	r27, r21
     dcc:	40 f4       	brcc	.+16     	; 0xdde <__fpcmp_parts_f+0xa8>
     dce:	11 23       	and	r17, r17
     dd0:	19 f0       	breq	.+6      	; 0xdd8 <__fpcmp_parts_f+0xa2>
     dd2:	61 e0       	ldi	r22, 0x01	; 1
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	05 c0       	rjmp	.+10     	; 0xde2 <__fpcmp_parts_f+0xac>
     dd8:	6f ef       	ldi	r22, 0xFF	; 255
     dda:	7f ef       	ldi	r23, 0xFF	; 255
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <__fpcmp_parts_f+0xac>
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	cb 01       	movw	r24, r22
     de4:	1f 91       	pop	r17
     de6:	08 95       	ret

00000de8 <ADC_Init>:
#include "LCD_interface.h"
#include "DIO_reg.h"
#include "DIO_int.h"

extern void ADC_Init(void)
{
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
	// Enable ADC On AVR
		SET_BIT(ADCSRA_Reg,7);
     df0:	a6 e2       	ldi	r26, 0x26	; 38
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e6 e2       	ldi	r30, 0x26	; 38
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	80 68       	ori	r24, 0x80	; 128
     dfc:	8c 93       	st	X, r24

	// Select Conversion Speed
		SET_BIT(ADCSRA_Reg,0);
     dfe:	a6 e2       	ldi	r26, 0x26	; 38
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e6 e2       	ldi	r30, 0x26	; 38
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	81 60       	ori	r24, 0x01	; 1
     e0a:	8c 93       	st	X, r24
		SET_BIT(ADCSRA_Reg,1);
     e0c:	a6 e2       	ldi	r26, 0x26	; 38
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e6 e2       	ldi	r30, 0x26	; 38
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	82 60       	ori	r24, 0x02	; 2
     e18:	8c 93       	st	X, r24
		SET_BIT(ADCSRA_Reg,2);
     e1a:	a6 e2       	ldi	r26, 0x26	; 38
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e6 e2       	ldi	r30, 0x26	; 38
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	84 60       	ori	r24, 0x04	; 4
     e26:	8c 93       	st	X, r24


	// ADC Data Rgith Adjustment
		SET_BIT(ADMUX_Reg,5);
     e28:	a7 e2       	ldi	r26, 0x27	; 39
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e7 e2       	ldi	r30, 0x27	; 39
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	80 62       	ori	r24, 0x20	; 32
     e34:	8c 93       	st	X, r24
}
     e36:	cf 91       	pop	r28
     e38:	df 91       	pop	r29
     e3a:	08 95       	ret

00000e3c <ADC_Read>:

u8 ADC_Read (u8 channel)
{
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	0f 92       	push	r0
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	89 83       	std	Y+1, r24	; 0x01

	// Select Voltage Reference
	// Select ADC Channel
	ADMUX_Reg = 0x40 | (channel & 0b00000111) ;
     e48:	e7 e2       	ldi	r30, 0x27	; 39
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	87 70       	andi	r24, 0x07	; 7
     e50:	80 64       	ori	r24, 0x40	; 64
     e52:	80 83       	st	Z, r24

	// Start ADC Conversion
	SET_BIT(ADCSRA_Reg,6);
     e54:	a6 e2       	ldi	r26, 0x26	; 38
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e6 e2       	ldi	r30, 0x26	; 38
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	80 64       	ori	r24, 0x40	; 64
     e60:	8c 93       	st	X, r24

	//Wait for the conversion
	while(!(ADCSRA_Reg & (1<<4)));
     e62:	e6 e2       	ldi	r30, 0x26	; 38
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	88 2f       	mov	r24, r24
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	80 71       	andi	r24, 0x10	; 16
     e6e:	90 70       	andi	r25, 0x00	; 0
     e70:	00 97       	sbiw	r24, 0x00	; 0
     e72:	b9 f3       	breq	.-18     	; 0xe62 <ADC_Read+0x26>



	SET_BIT(ADCSRA_Reg,4);
     e74:	a6 e2       	ldi	r26, 0x26	; 38
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e6 e2       	ldi	r30, 0x26	; 38
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	80 61       	ori	r24, 0x10	; 16
     e80:	8c 93       	st	X, r24

	return ADC;
     e82:	e4 e2       	ldi	r30, 0x24	; 36
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	91 81       	ldd	r25, Z+1	; 0x01

}
     e8a:	0f 90       	pop	r0
     e8c:	cf 91       	pop	r28
     e8e:	df 91       	pop	r29
     e90:	08 95       	ret

00000e92 <LM35>:

void LM35(void)
{
     e92:	df 93       	push	r29
     e94:	cf 93       	push	r28
     e96:	00 d0       	rcall	.+0      	; 0xe98 <LM35+0x6>
     e98:	00 d0       	rcall	.+0      	; 0xe9a <LM35+0x8>
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62

	float celsius;

	celsius = (ADC_Read(0)*4.88);
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	0e 94 1e 07 	call	0xe3c	; 0xe3c <ADC_Read>
     ea4:	88 2f       	mov	r24, r24
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	aa 27       	eor	r26, r26
     eaa:	97 fd       	sbrc	r25, 7
     eac:	a0 95       	com	r26
     eae:	ba 2f       	mov	r27, r26
     eb0:	bc 01       	movw	r22, r24
     eb2:	cd 01       	movw	r24, r26
     eb4:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
     eb8:	dc 01       	movw	r26, r24
     eba:	cb 01       	movw	r24, r22
     ebc:	bc 01       	movw	r22, r24
     ebe:	cd 01       	movw	r24, r26
     ec0:	26 ef       	ldi	r18, 0xF6	; 246
     ec2:	38 e2       	ldi	r19, 0x28	; 40
     ec4:	4c e9       	ldi	r20, 0x9C	; 156
     ec6:	50 e4       	ldi	r21, 0x40	; 64
     ec8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	89 83       	std	Y+1, r24	; 0x01
     ed2:	9a 83       	std	Y+2, r25	; 0x02
     ed4:	ab 83       	std	Y+3, r26	; 0x03
     ed6:	bc 83       	std	Y+4, r27	; 0x04

	celsius = (celsius/10.00);
     ed8:	69 81       	ldd	r22, Y+1	; 0x01
     eda:	7a 81       	ldd	r23, Y+2	; 0x02
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	9c 81       	ldd	r25, Y+4	; 0x04
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	40 e2       	ldi	r20, 0x20	; 32
     ee6:	51 e4       	ldi	r21, 0x41	; 65
     ee8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	89 83       	std	Y+1, r24	; 0x01
     ef2:	9a 83       	std	Y+2, r25	; 0x02
     ef4:	ab 83       	std	Y+3, r26	; 0x03
     ef6:	bc 83       	std	Y+4, r27	; 0x04

	Gotoxy(1,0);
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	0e 94 92 12 	call	0x2524	; 0x2524 <Gotoxy>

	lcd_writenumber(celsius);
     f00:	69 81       	ldd	r22, Y+1	; 0x01
     f02:	7a 81       	ldd	r23, Y+2	; 0x02
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	9c 81       	ldd	r25, Y+4	; 0x04
     f08:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	0e 94 c0 12 	call	0x2580	; 0x2580 <lcd_writenumber>

}
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	08 95       	ret

00000f22 <Potinemeter>:

void Potinemeter(void)
{
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	00 d0       	rcall	.+0      	; 0xf28 <Potinemeter+0x6>
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
	u8 val;
	u8 ADCw;

	val = (ADC_Read(1));
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <ADC_Read>
     f32:	8a 83       	std	Y+2, r24	; 0x02

	ADCw = (val * 9)/250;
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	c9 01       	movw	r24, r18
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	82 0f       	add	r24, r18
     f4a:	93 1f       	adc	r25, r19
     f4c:	2a ef       	ldi	r18, 0xFA	; 250
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	b9 01       	movw	r22, r18
     f52:	0e 94 b4 14 	call	0x2968	; 0x2968 <__divmodhi4>
     f56:	cb 01       	movw	r24, r22
     f58:	89 83       	std	Y+1, r24	; 0x01

	Gotoxy(2,1);
     f5a:	82 e0       	ldi	r24, 0x02	; 2
     f5c:	61 e0       	ldi	r22, 0x01	; 1
     f5e:	0e 94 92 12 	call	0x2524	; 0x2524 <Gotoxy>
	LCD_vidWriteCharctr(48+ADCw);
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	80 5d       	subi	r24, 0xD0	; 208
     f66:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_vidWriteCharctr>

}
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	08 95       	ret

00000f74 <LDR>:

void LDR(void)
{
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
     f7c:	ac 97       	sbiw	r28, 0x2c	; 44
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	f8 94       	cli
     f82:	de bf       	out	0x3e, r29	; 62
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	cd bf       	out	0x3d, r28	; 61
	u8 Name_Test_English[3]="on";
     f88:	ce 01       	movw	r24, r28
     f8a:	81 96       	adiw	r24, 0x21	; 33
     f8c:	99 a7       	std	Y+41, r25	; 0x29
     f8e:	88 a7       	std	Y+40, r24	; 0x28
     f90:	e0 e6       	ldi	r30, 0x60	; 96
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	fb a7       	std	Y+43, r31	; 0x2b
     f96:	ea a7       	std	Y+42, r30	; 0x2a
     f98:	f3 e0       	ldi	r31, 0x03	; 3
     f9a:	fc a7       	std	Y+44, r31	; 0x2c
     f9c:	ea a5       	ldd	r30, Y+42	; 0x2a
     f9e:	fb a5       	ldd	r31, Y+43	; 0x2b
     fa0:	00 80       	ld	r0, Z
     fa2:	8a a5       	ldd	r24, Y+42	; 0x2a
     fa4:	9b a5       	ldd	r25, Y+43	; 0x2b
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	9b a7       	std	Y+43, r25	; 0x2b
     faa:	8a a7       	std	Y+42, r24	; 0x2a
     fac:	e8 a5       	ldd	r30, Y+40	; 0x28
     fae:	f9 a5       	ldd	r31, Y+41	; 0x29
     fb0:	00 82       	st	Z, r0
     fb2:	88 a5       	ldd	r24, Y+40	; 0x28
     fb4:	99 a5       	ldd	r25, Y+41	; 0x29
     fb6:	01 96       	adiw	r24, 0x01	; 1
     fb8:	99 a7       	std	Y+41, r25	; 0x29
     fba:	88 a7       	std	Y+40, r24	; 0x28
     fbc:	9c a5       	ldd	r25, Y+44	; 0x2c
     fbe:	91 50       	subi	r25, 0x01	; 1
     fc0:	9c a7       	std	Y+44, r25	; 0x2c
     fc2:	ec a5       	ldd	r30, Y+44	; 0x2c
     fc4:	ee 23       	and	r30, r30
     fc6:	51 f7       	brne	.-44     	; 0xf9c <LDR+0x28>
	u8 Namei_Test_English[4]="off";
     fc8:	80 91 63 00 	lds	r24, 0x0063
     fcc:	90 91 64 00 	lds	r25, 0x0064
     fd0:	a0 91 65 00 	lds	r26, 0x0065
     fd4:	b0 91 66 00 	lds	r27, 0x0066
     fd8:	8c a3       	std	Y+36, r24	; 0x24
     fda:	9d a3       	std	Y+37, r25	; 0x25
     fdc:	ae a3       	std	Y+38, r26	; 0x26
     fde:	bf a3       	std	Y+39, r27	; 0x27

	int vale;
	int ADCe;

	vale = (ADC_Read(2));
     fe0:	82 e0       	ldi	r24, 0x02	; 2
     fe2:	0e 94 1e 07 	call	0xe3c	; 0xe3c <ADC_Read>
     fe6:	88 2f       	mov	r24, r24
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	98 a3       	std	Y+32, r25	; 0x20
     fec:	8f 8f       	std	Y+31, r24	; 0x1f
	ADCe = (vale * 5)/250;
     fee:	2f 8d       	ldd	r18, Y+31	; 0x1f
     ff0:	38 a1       	ldd	r19, Y+32	; 0x20
     ff2:	c9 01       	movw	r24, r18
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	82 0f       	add	r24, r18
     ffe:	93 1f       	adc	r25, r19
    1000:	2a ef       	ldi	r18, 0xFA	; 250
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	b9 01       	movw	r22, r18
    1006:	0e 94 b4 14 	call	0x2968	; 0x2968 <__divmodhi4>
    100a:	cb 01       	movw	r24, r22
    100c:	9e 8f       	std	Y+30, r25	; 0x1e
    100e:	8d 8f       	std	Y+29, r24	; 0x1d

	if (	ADCe > 3 )
    1010:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1012:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1014:	84 30       	cpi	r24, 0x04	; 4
    1016:	91 05       	cpc	r25, r1
    1018:	0c f4       	brge	.+2      	; 0x101c <LDR+0xa8>
    101a:	83 c0       	rjmp	.+262    	; 0x1122 <LDR+0x1ae>
		{
			LCD_String_xy(2,4,Name_Test_English);
    101c:	9e 01       	movw	r18, r28
    101e:	2f 5d       	subi	r18, 0xDF	; 223
    1020:	3f 4f       	sbci	r19, 0xFF	; 255
    1022:	82 e0       	ldi	r24, 0x02	; 2
    1024:	64 e0       	ldi	r22, 0x04	; 4
    1026:	a9 01       	movw	r20, r18
    1028:	0e 94 87 11 	call	0x230e	; 0x230e <LCD_String_xy>
			DIO_SetPinValue(PORTD,PIN5,LOW);
    102c:	83 e0       	ldi	r24, 0x03	; 3
    102e:	65 e0       	ldi	r22, 0x05	; 5
    1030:	40 e0       	ldi	r20, 0x00	; 0
    1032:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_SetPinValue>
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	aa e7       	ldi	r26, 0x7A	; 122
    103c:	b4 e4       	ldi	r27, 0x44	; 68
    103e:	89 8f       	std	Y+25, r24	; 0x19
    1040:	9a 8f       	std	Y+26, r25	; 0x1a
    1042:	ab 8f       	std	Y+27, r26	; 0x1b
    1044:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1046:	69 8d       	ldd	r22, Y+25	; 0x19
    1048:	7a 8d       	ldd	r23, Y+26	; 0x1a
    104a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    104c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	4a e7       	ldi	r20, 0x7A	; 122
    1054:	53 e4       	ldi	r21, 0x43	; 67
    1056:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    105a:	dc 01       	movw	r26, r24
    105c:	cb 01       	movw	r24, r22
    105e:	8d 8b       	std	Y+21, r24	; 0x15
    1060:	9e 8b       	std	Y+22, r25	; 0x16
    1062:	af 8b       	std	Y+23, r26	; 0x17
    1064:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1066:	6d 89       	ldd	r22, Y+21	; 0x15
    1068:	7e 89       	ldd	r23, Y+22	; 0x16
    106a:	8f 89       	ldd	r24, Y+23	; 0x17
    106c:	98 8d       	ldd	r25, Y+24	; 0x18
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	40 e8       	ldi	r20, 0x80	; 128
    1074:	5f e3       	ldi	r21, 0x3F	; 63
    1076:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    107a:	88 23       	and	r24, r24
    107c:	2c f4       	brge	.+10     	; 0x1088 <LDR+0x114>
		__ticks = 1;
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	9c 8b       	std	Y+20, r25	; 0x14
    1084:	8b 8b       	std	Y+19, r24	; 0x13
    1086:	3f c0       	rjmp	.+126    	; 0x1106 <LDR+0x192>
	else if (__tmp > 65535)
    1088:	6d 89       	ldd	r22, Y+21	; 0x15
    108a:	7e 89       	ldd	r23, Y+22	; 0x16
    108c:	8f 89       	ldd	r24, Y+23	; 0x17
    108e:	98 8d       	ldd	r25, Y+24	; 0x18
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	3f ef       	ldi	r19, 0xFF	; 255
    1094:	4f e7       	ldi	r20, 0x7F	; 127
    1096:	57 e4       	ldi	r21, 0x47	; 71
    1098:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    109c:	18 16       	cp	r1, r24
    109e:	4c f5       	brge	.+82     	; 0x10f2 <LDR+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a0:	69 8d       	ldd	r22, Y+25	; 0x19
    10a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	40 e2       	ldi	r20, 0x20	; 32
    10ae:	51 e4       	ldi	r21, 0x41	; 65
    10b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	bc 01       	movw	r22, r24
    10ba:	cd 01       	movw	r24, r26
    10bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10c0:	dc 01       	movw	r26, r24
    10c2:	cb 01       	movw	r24, r22
    10c4:	9c 8b       	std	Y+20, r25	; 0x14
    10c6:	8b 8b       	std	Y+19, r24	; 0x13
    10c8:	0f c0       	rjmp	.+30     	; 0x10e8 <LDR+0x174>
    10ca:	89 e1       	ldi	r24, 0x19	; 25
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	9a 8b       	std	Y+18, r25	; 0x12
    10d0:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10d2:	89 89       	ldd	r24, Y+17	; 0x11
    10d4:	9a 89       	ldd	r25, Y+18	; 0x12
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	f1 f7       	brne	.-4      	; 0x10d6 <LDR+0x162>
    10da:	9a 8b       	std	Y+18, r25	; 0x12
    10dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10de:	8b 89       	ldd	r24, Y+19	; 0x13
    10e0:	9c 89       	ldd	r25, Y+20	; 0x14
    10e2:	01 97       	sbiw	r24, 0x01	; 1
    10e4:	9c 8b       	std	Y+20, r25	; 0x14
    10e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e8:	8b 89       	ldd	r24, Y+19	; 0x13
    10ea:	9c 89       	ldd	r25, Y+20	; 0x14
    10ec:	00 97       	sbiw	r24, 0x00	; 0
    10ee:	69 f7       	brne	.-38     	; 0x10ca <LDR+0x156>
    10f0:	14 c0       	rjmp	.+40     	; 0x111a <LDR+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f2:	6d 89       	ldd	r22, Y+21	; 0x15
    10f4:	7e 89       	ldd	r23, Y+22	; 0x16
    10f6:	8f 89       	ldd	r24, Y+23	; 0x17
    10f8:	98 8d       	ldd	r25, Y+24	; 0x18
    10fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	9c 8b       	std	Y+20, r25	; 0x14
    1104:	8b 8b       	std	Y+19, r24	; 0x13
    1106:	8b 89       	ldd	r24, Y+19	; 0x13
    1108:	9c 89       	ldd	r25, Y+20	; 0x14
    110a:	98 8b       	std	Y+16, r25	; 0x10
    110c:	8f 87       	std	Y+15, r24	; 0x0f
    110e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1110:	98 89       	ldd	r25, Y+16	; 0x10
    1112:	01 97       	sbiw	r24, 0x01	; 1
    1114:	f1 f7       	brne	.-4      	; 0x1112 <LDR+0x19e>
    1116:	98 8b       	std	Y+16, r25	; 0x10
    1118:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			LCD_vidSendCommand(0x01);
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_vidSendCommand>
    1120:	82 c0       	rjmp	.+260    	; 0x1226 <LDR+0x2b2>

		}
	else
		{
			LCD_String_xy(2,4,Namei_Test_English);
    1122:	9e 01       	movw	r18, r28
    1124:	2c 5d       	subi	r18, 0xDC	; 220
    1126:	3f 4f       	sbci	r19, 0xFF	; 255
    1128:	82 e0       	ldi	r24, 0x02	; 2
    112a:	64 e0       	ldi	r22, 0x04	; 4
    112c:	a9 01       	movw	r20, r18
    112e:	0e 94 87 11 	call	0x230e	; 0x230e <LCD_String_xy>
			DIO_SetPinValue(PORTD,PIN5,HIGH);
    1132:	83 e0       	ldi	r24, 0x03	; 3
    1134:	65 e0       	ldi	r22, 0x05	; 5
    1136:	41 e0       	ldi	r20, 0x01	; 1
    1138:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_SetPinValue>
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	aa e7       	ldi	r26, 0x7A	; 122
    1142:	b4 e4       	ldi	r27, 0x44	; 68
    1144:	8b 87       	std	Y+11, r24	; 0x0b
    1146:	9c 87       	std	Y+12, r25	; 0x0c
    1148:	ad 87       	std	Y+13, r26	; 0x0d
    114a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    114c:	6b 85       	ldd	r22, Y+11	; 0x0b
    114e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1150:	8d 85       	ldd	r24, Y+13	; 0x0d
    1152:	9e 85       	ldd	r25, Y+14	; 0x0e
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	4a e7       	ldi	r20, 0x7A	; 122
    115a:	53 e4       	ldi	r21, 0x43	; 67
    115c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	8f 83       	std	Y+7, r24	; 0x07
    1166:	98 87       	std	Y+8, r25	; 0x08
    1168:	a9 87       	std	Y+9, r26	; 0x09
    116a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    116c:	6f 81       	ldd	r22, Y+7	; 0x07
    116e:	78 85       	ldd	r23, Y+8	; 0x08
    1170:	89 85       	ldd	r24, Y+9	; 0x09
    1172:	9a 85       	ldd	r25, Y+10	; 0x0a
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	40 e8       	ldi	r20, 0x80	; 128
    117a:	5f e3       	ldi	r21, 0x3F	; 63
    117c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1180:	88 23       	and	r24, r24
    1182:	2c f4       	brge	.+10     	; 0x118e <LDR+0x21a>
		__ticks = 1;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	9e 83       	std	Y+6, r25	; 0x06
    118a:	8d 83       	std	Y+5, r24	; 0x05
    118c:	3f c0       	rjmp	.+126    	; 0x120c <LDR+0x298>
	else if (__tmp > 65535)
    118e:	6f 81       	ldd	r22, Y+7	; 0x07
    1190:	78 85       	ldd	r23, Y+8	; 0x08
    1192:	89 85       	ldd	r24, Y+9	; 0x09
    1194:	9a 85       	ldd	r25, Y+10	; 0x0a
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	3f ef       	ldi	r19, 0xFF	; 255
    119a:	4f e7       	ldi	r20, 0x7F	; 127
    119c:	57 e4       	ldi	r21, 0x47	; 71
    119e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    11a2:	18 16       	cp	r1, r24
    11a4:	4c f5       	brge	.+82     	; 0x11f8 <LDR+0x284>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    11a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    11aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	40 e2       	ldi	r20, 0x20	; 32
    11b4:	51 e4       	ldi	r21, 0x41	; 65
    11b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11ba:	dc 01       	movw	r26, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	bc 01       	movw	r22, r24
    11c0:	cd 01       	movw	r24, r26
    11c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	9e 83       	std	Y+6, r25	; 0x06
    11cc:	8d 83       	std	Y+5, r24	; 0x05
    11ce:	0f c0       	rjmp	.+30     	; 0x11ee <LDR+0x27a>
    11d0:	89 e1       	ldi	r24, 0x19	; 25
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	9c 83       	std	Y+4, r25	; 0x04
    11d6:	8b 83       	std	Y+3, r24	; 0x03
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	9c 81       	ldd	r25, Y+4	; 0x04
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	f1 f7       	brne	.-4      	; 0x11dc <LDR+0x268>
    11e0:	9c 83       	std	Y+4, r25	; 0x04
    11e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e4:	8d 81       	ldd	r24, Y+5	; 0x05
    11e6:	9e 81       	ldd	r25, Y+6	; 0x06
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	9e 83       	std	Y+6, r25	; 0x06
    11ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ee:	8d 81       	ldd	r24, Y+5	; 0x05
    11f0:	9e 81       	ldd	r25, Y+6	; 0x06
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	69 f7       	brne	.-38     	; 0x11d0 <LDR+0x25c>
    11f6:	14 c0       	rjmp	.+40     	; 0x1220 <LDR+0x2ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f8:	6f 81       	ldd	r22, Y+7	; 0x07
    11fa:	78 85       	ldd	r23, Y+8	; 0x08
    11fc:	89 85       	ldd	r24, Y+9	; 0x09
    11fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1200:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	9e 83       	std	Y+6, r25	; 0x06
    120a:	8d 83       	std	Y+5, r24	; 0x05
    120c:	8d 81       	ldd	r24, Y+5	; 0x05
    120e:	9e 81       	ldd	r25, Y+6	; 0x06
    1210:	9a 83       	std	Y+2, r25	; 0x02
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	9a 81       	ldd	r25, Y+2	; 0x02
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	f1 f7       	brne	.-4      	; 0x1218 <LDR+0x2a4>
    121c:	9a 83       	std	Y+2, r25	; 0x02
    121e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			LCD_vidSendCommand(0x01);
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_vidSendCommand>
		}
	LCD_vidSendCommand(0x01);
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_vidSendCommand>
}
    122c:	ac 96       	adiw	r28, 0x2c	; 44
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	f8 94       	cli
    1232:	de bf       	out	0x3e, r29	; 62
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	cd bf       	out	0x3d, r28	; 61
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <DIO_SetPinValue>:
#include "DIO_int.h"
#include "DIO_reg.h"

/* IO Pins */
void DIO_SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy)
{
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	27 97       	sbiw	r28, 0x07	; 7
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	f8 94       	cli
    124c:	de bf       	out	0x3e, r29	; 62
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	cd bf       	out	0x3d, r28	; 61
    1252:	89 83       	std	Y+1, r24	; 0x01
    1254:	6a 83       	std	Y+2, r22	; 0x02
    1256:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	84 30       	cpi	r24, 0x04	; 4
    125c:	08 f0       	brcs	.+2      	; 0x1260 <DIO_SetPinValue+0x22>
    125e:	ee c0       	rjmp	.+476    	; 0x143c <DIO_SetPinValue+0x1fe>
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	88 30       	cpi	r24, 0x08	; 8
    1264:	08 f0       	brcs	.+2      	; 0x1268 <DIO_SetPinValue+0x2a>
    1266:	ea c0       	rjmp	.+468    	; 0x143c <DIO_SetPinValue+0x1fe>
	{
		if (u8PinValCopy == HIGH)
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	81 30       	cpi	r24, 0x01	; 1
    126c:	09 f0       	breq	.+2      	; 0x1270 <DIO_SetPinValue+0x32>
    126e:	6f c0       	rjmp	.+222    	; 0x134e <DIO_SetPinValue+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	3f 83       	std	Y+7, r19	; 0x07
    1278:	2e 83       	std	Y+6, r18	; 0x06
    127a:	8e 81       	ldd	r24, Y+6	; 0x06
    127c:	9f 81       	ldd	r25, Y+7	; 0x07
    127e:	81 30       	cpi	r24, 0x01	; 1
    1280:	91 05       	cpc	r25, r1
    1282:	49 f1       	breq	.+82     	; 0x12d6 <DIO_SetPinValue+0x98>
    1284:	2e 81       	ldd	r18, Y+6	; 0x06
    1286:	3f 81       	ldd	r19, Y+7	; 0x07
    1288:	22 30       	cpi	r18, 0x02	; 2
    128a:	31 05       	cpc	r19, r1
    128c:	2c f4       	brge	.+10     	; 0x1298 <DIO_SetPinValue+0x5a>
    128e:	8e 81       	ldd	r24, Y+6	; 0x06
    1290:	9f 81       	ldd	r25, Y+7	; 0x07
    1292:	00 97       	sbiw	r24, 0x00	; 0
    1294:	61 f0       	breq	.+24     	; 0x12ae <DIO_SetPinValue+0x70>
    1296:	d2 c0       	rjmp	.+420    	; 0x143c <DIO_SetPinValue+0x1fe>
    1298:	2e 81       	ldd	r18, Y+6	; 0x06
    129a:	3f 81       	ldd	r19, Y+7	; 0x07
    129c:	22 30       	cpi	r18, 0x02	; 2
    129e:	31 05       	cpc	r19, r1
    12a0:	71 f1       	breq	.+92     	; 0x12fe <DIO_SetPinValue+0xc0>
    12a2:	8e 81       	ldd	r24, Y+6	; 0x06
    12a4:	9f 81       	ldd	r25, Y+7	; 0x07
    12a6:	83 30       	cpi	r24, 0x03	; 3
    12a8:	91 05       	cpc	r25, r1
    12aa:	e9 f1       	breq	.+122    	; 0x1326 <DIO_SetPinValue+0xe8>
    12ac:	c7 c0       	rjmp	.+398    	; 0x143c <DIO_SetPinValue+0x1fe>
			{
				case PORTA: SET_BIT(PORTA_Register,u8PinIdCopy); break;
    12ae:	ab e3       	ldi	r26, 0x3B	; 59
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	eb e3       	ldi	r30, 0x3B	; 59
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	48 2f       	mov	r20, r24
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	02 2e       	mov	r0, r18
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <DIO_SetPinValue+0x8e>
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	0a 94       	dec	r0
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <DIO_SetPinValue+0x8a>
    12d0:	84 2b       	or	r24, r20
    12d2:	8c 93       	st	X, r24
    12d4:	b3 c0       	rjmp	.+358    	; 0x143c <DIO_SetPinValue+0x1fe>
				case PORTB: SET_BIT(PORTB_Register,u8PinIdCopy); break;
    12d6:	a8 e3       	ldi	r26, 0x38	; 56
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e8 e3       	ldi	r30, 0x38	; 56
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	48 2f       	mov	r20, r24
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	02 2e       	mov	r0, r18
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <DIO_SetPinValue+0xb6>
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	0a 94       	dec	r0
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <DIO_SetPinValue+0xb2>
    12f8:	84 2b       	or	r24, r20
    12fa:	8c 93       	st	X, r24
    12fc:	9f c0       	rjmp	.+318    	; 0x143c <DIO_SetPinValue+0x1fe>
				case PORTC: SET_BIT(PORTC_Register,u8PinIdCopy); break;
    12fe:	a5 e3       	ldi	r26, 0x35	; 53
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e5 e3       	ldi	r30, 0x35	; 53
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	48 2f       	mov	r20, r24
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	02 2e       	mov	r0, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <DIO_SetPinValue+0xde>
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	0a 94       	dec	r0
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <DIO_SetPinValue+0xda>
    1320:	84 2b       	or	r24, r20
    1322:	8c 93       	st	X, r24
    1324:	8b c0       	rjmp	.+278    	; 0x143c <DIO_SetPinValue+0x1fe>
				case PORTD: SET_BIT(PORTD_Register,u8PinIdCopy); break;
    1326:	a2 e3       	ldi	r26, 0x32	; 50
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e2 e3       	ldi	r30, 0x32	; 50
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	48 2f       	mov	r20, r24
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	02 2e       	mov	r0, r18
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <DIO_SetPinValue+0x106>
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	0a 94       	dec	r0
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <DIO_SetPinValue+0x102>
    1348:	84 2b       	or	r24, r20
    134a:	8c 93       	st	X, r24
    134c:	77 c0       	rjmp	.+238    	; 0x143c <DIO_SetPinValue+0x1fe>
			}

		}

		else if (u8PinValCopy == LOW)
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	88 23       	and	r24, r24
    1352:	09 f0       	breq	.+2      	; 0x1356 <DIO_SetPinValue+0x118>
    1354:	73 c0       	rjmp	.+230    	; 0x143c <DIO_SetPinValue+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	3d 83       	std	Y+5, r19	; 0x05
    135e:	2c 83       	std	Y+4, r18	; 0x04
    1360:	8c 81       	ldd	r24, Y+4	; 0x04
    1362:	9d 81       	ldd	r25, Y+5	; 0x05
    1364:	81 30       	cpi	r24, 0x01	; 1
    1366:	91 05       	cpc	r25, r1
    1368:	59 f1       	breq	.+86     	; 0x13c0 <DIO_SetPinValue+0x182>
    136a:	2c 81       	ldd	r18, Y+4	; 0x04
    136c:	3d 81       	ldd	r19, Y+5	; 0x05
    136e:	22 30       	cpi	r18, 0x02	; 2
    1370:	31 05       	cpc	r19, r1
    1372:	2c f4       	brge	.+10     	; 0x137e <DIO_SetPinValue+0x140>
    1374:	8c 81       	ldd	r24, Y+4	; 0x04
    1376:	9d 81       	ldd	r25, Y+5	; 0x05
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	69 f0       	breq	.+26     	; 0x1396 <DIO_SetPinValue+0x158>
    137c:	5f c0       	rjmp	.+190    	; 0x143c <DIO_SetPinValue+0x1fe>
    137e:	2c 81       	ldd	r18, Y+4	; 0x04
    1380:	3d 81       	ldd	r19, Y+5	; 0x05
    1382:	22 30       	cpi	r18, 0x02	; 2
    1384:	31 05       	cpc	r19, r1
    1386:	89 f1       	breq	.+98     	; 0x13ea <DIO_SetPinValue+0x1ac>
    1388:	8c 81       	ldd	r24, Y+4	; 0x04
    138a:	9d 81       	ldd	r25, Y+5	; 0x05
    138c:	83 30       	cpi	r24, 0x03	; 3
    138e:	91 05       	cpc	r25, r1
    1390:	09 f4       	brne	.+2      	; 0x1394 <DIO_SetPinValue+0x156>
    1392:	40 c0       	rjmp	.+128    	; 0x1414 <DIO_SetPinValue+0x1d6>
    1394:	53 c0       	rjmp	.+166    	; 0x143c <DIO_SetPinValue+0x1fe>
			{
				case PORTA: CLR_BIT(PORTA_Register,u8PinIdCopy); break;
    1396:	ab e3       	ldi	r26, 0x3B	; 59
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	eb e3       	ldi	r30, 0x3B	; 59
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	48 2f       	mov	r20, r24
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	02 2e       	mov	r0, r18
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <DIO_SetPinValue+0x176>
    13b0:	88 0f       	add	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	0a 94       	dec	r0
    13b6:	e2 f7       	brpl	.-8      	; 0x13b0 <DIO_SetPinValue+0x172>
    13b8:	80 95       	com	r24
    13ba:	84 23       	and	r24, r20
    13bc:	8c 93       	st	X, r24
    13be:	3e c0       	rjmp	.+124    	; 0x143c <DIO_SetPinValue+0x1fe>
				case PORTB: CLR_BIT(PORTB_Register,u8PinIdCopy); break;
    13c0:	a8 e3       	ldi	r26, 0x38	; 56
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e8 e3       	ldi	r30, 0x38	; 56
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	48 2f       	mov	r20, r24
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	02 2e       	mov	r0, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <DIO_SetPinValue+0x1a0>
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	0a 94       	dec	r0
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <DIO_SetPinValue+0x19c>
    13e2:	80 95       	com	r24
    13e4:	84 23       	and	r24, r20
    13e6:	8c 93       	st	X, r24
    13e8:	29 c0       	rjmp	.+82     	; 0x143c <DIO_SetPinValue+0x1fe>
				case PORTC: CLR_BIT(PORTC_Register,u8PinIdCopy); break;
    13ea:	a5 e3       	ldi	r26, 0x35	; 53
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e5 e3       	ldi	r30, 0x35	; 53
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	48 2f       	mov	r20, r24
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	02 2e       	mov	r0, r18
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <DIO_SetPinValue+0x1ca>
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	0a 94       	dec	r0
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <DIO_SetPinValue+0x1c6>
    140c:	80 95       	com	r24
    140e:	84 23       	and	r24, r20
    1410:	8c 93       	st	X, r24
    1412:	14 c0       	rjmp	.+40     	; 0x143c <DIO_SetPinValue+0x1fe>
				case PORTD: CLR_BIT(PORTD_Register,u8PinIdCopy); break;
    1414:	a2 e3       	ldi	r26, 0x32	; 50
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e2 e3       	ldi	r30, 0x32	; 50
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	48 2f       	mov	r20, r24
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	02 2e       	mov	r0, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <DIO_SetPinValue+0x1f4>
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	0a 94       	dec	r0
    1434:	e2 f7       	brpl	.-8      	; 0x142e <DIO_SetPinValue+0x1f0>
    1436:	80 95       	com	r24
    1438:	84 23       	and	r24, r20
    143a:	8c 93       	st	X, r24

	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
    143c:	27 96       	adiw	r28, 0x07	; 7
    143e:	0f b6       	in	r0, 0x3f	; 63
    1440:	f8 94       	cli
    1442:	de bf       	out	0x3e, r29	; 62
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	cd bf       	out	0x3d, r28	; 61
    1448:	cf 91       	pop	r28
    144a:	df 91       	pop	r29
    144c:	08 95       	ret

0000144e <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy)
{
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	00 d0       	rcall	.+0      	; 0x1454 <DIO_GetPinValue+0x6>
    1454:	00 d0       	rcall	.+0      	; 0x1456 <DIO_GetPinValue+0x8>
    1456:	0f 92       	push	r0
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    145c:	8a 83       	std	Y+2, r24	; 0x02
    145e:	6b 83       	std	Y+3, r22	; 0x03
	/* Define Local Variable to get the BIT Value */
	u8 u8ResultLocal;
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	84 30       	cpi	r24, 0x04	; 4
    1464:	08 f0       	brcs	.+2      	; 0x1468 <DIO_GetPinValue+0x1a>
    1466:	6c c0       	rjmp	.+216    	; 0x1540 <DIO_GetPinValue+0xf2>
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	88 30       	cpi	r24, 0x08	; 8
    146c:	08 f0       	brcs	.+2      	; 0x1470 <DIO_GetPinValue+0x22>
    146e:	68 c0       	rjmp	.+208    	; 0x1540 <DIO_GetPinValue+0xf2>
	{
		/* Check on the Required PORT Number */
		switch (u8PortIdCopy)
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	3d 83       	std	Y+5, r19	; 0x05
    1478:	2c 83       	std	Y+4, r18	; 0x04
    147a:	4c 81       	ldd	r20, Y+4	; 0x04
    147c:	5d 81       	ldd	r21, Y+5	; 0x05
    147e:	41 30       	cpi	r20, 0x01	; 1
    1480:	51 05       	cpc	r21, r1
    1482:	41 f1       	breq	.+80     	; 0x14d4 <DIO_GetPinValue+0x86>
    1484:	8c 81       	ldd	r24, Y+4	; 0x04
    1486:	9d 81       	ldd	r25, Y+5	; 0x05
    1488:	82 30       	cpi	r24, 0x02	; 2
    148a:	91 05       	cpc	r25, r1
    148c:	34 f4       	brge	.+12     	; 0x149a <DIO_GetPinValue+0x4c>
    148e:	2c 81       	ldd	r18, Y+4	; 0x04
    1490:	3d 81       	ldd	r19, Y+5	; 0x05
    1492:	21 15       	cp	r18, r1
    1494:	31 05       	cpc	r19, r1
    1496:	61 f0       	breq	.+24     	; 0x14b0 <DIO_GetPinValue+0x62>
    1498:	55 c0       	rjmp	.+170    	; 0x1544 <DIO_GetPinValue+0xf6>
    149a:	4c 81       	ldd	r20, Y+4	; 0x04
    149c:	5d 81       	ldd	r21, Y+5	; 0x05
    149e:	42 30       	cpi	r20, 0x02	; 2
    14a0:	51 05       	cpc	r21, r1
    14a2:	51 f1       	breq	.+84     	; 0x14f8 <DIO_GetPinValue+0xaa>
    14a4:	8c 81       	ldd	r24, Y+4	; 0x04
    14a6:	9d 81       	ldd	r25, Y+5	; 0x05
    14a8:	83 30       	cpi	r24, 0x03	; 3
    14aa:	91 05       	cpc	r25, r1
    14ac:	b9 f1       	breq	.+110    	; 0x151c <DIO_GetPinValue+0xce>
    14ae:	4a c0       	rjmp	.+148    	; 0x1544 <DIO_GetPinValue+0xf6>
		{
			case PORTA: u8ResultLocal= GET_BIT(PINA_Register,u8PinIdCopy); break;
    14b0:	e9 e3       	ldi	r30, 0x39	; 57
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	88 2f       	mov	r24, r24
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	a9 01       	movw	r20, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <DIO_GetPinValue+0x7a>
    14c4:	55 95       	asr	r21
    14c6:	47 95       	ror	r20
    14c8:	8a 95       	dec	r24
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <DIO_GetPinValue+0x76>
    14cc:	ca 01       	movw	r24, r20
    14ce:	81 70       	andi	r24, 0x01	; 1
    14d0:	89 83       	std	Y+1, r24	; 0x01
    14d2:	38 c0       	rjmp	.+112    	; 0x1544 <DIO_GetPinValue+0xf6>
			case PORTB: u8ResultLocal= GET_BIT(PINB_Register,u8PinIdCopy); break;
    14d4:	e6 e3       	ldi	r30, 0x36	; 54
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	88 2f       	mov	r24, r24
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	a9 01       	movw	r20, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <DIO_GetPinValue+0x9e>
    14e8:	55 95       	asr	r21
    14ea:	47 95       	ror	r20
    14ec:	8a 95       	dec	r24
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <DIO_GetPinValue+0x9a>
    14f0:	ca 01       	movw	r24, r20
    14f2:	81 70       	andi	r24, 0x01	; 1
    14f4:	89 83       	std	Y+1, r24	; 0x01
    14f6:	26 c0       	rjmp	.+76     	; 0x1544 <DIO_GetPinValue+0xf6>
			case PORTC: u8ResultLocal= GET_BIT(PINC_Register,u8PinIdCopy); break;
    14f8:	e3 e3       	ldi	r30, 0x33	; 51
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	88 2f       	mov	r24, r24
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	a9 01       	movw	r20, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <DIO_GetPinValue+0xc2>
    150c:	55 95       	asr	r21
    150e:	47 95       	ror	r20
    1510:	8a 95       	dec	r24
    1512:	e2 f7       	brpl	.-8      	; 0x150c <DIO_GetPinValue+0xbe>
    1514:	ca 01       	movw	r24, r20
    1516:	81 70       	andi	r24, 0x01	; 1
    1518:	89 83       	std	Y+1, r24	; 0x01
    151a:	14 c0       	rjmp	.+40     	; 0x1544 <DIO_GetPinValue+0xf6>
			case PORTD: u8ResultLocal= GET_BIT(PIND_Register,u8PinIdCopy); break;
    151c:	e0 e3       	ldi	r30, 0x30	; 48
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	88 2f       	mov	r24, r24
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	a9 01       	movw	r20, r18
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <DIO_GetPinValue+0xe6>
    1530:	55 95       	asr	r21
    1532:	47 95       	ror	r20
    1534:	8a 95       	dec	r24
    1536:	e2 f7       	brpl	.-8      	; 0x1530 <DIO_GetPinValue+0xe2>
    1538:	ca 01       	movw	r24, r20
    153a:	81 70       	andi	r24, 0x01	; 1
    153c:	89 83       	std	Y+1, r24	; 0x01
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <DIO_GetPinValue+0xf6>
	}

	else
	{
		/* return 0xff in case of error in the Pin ID or PORT ID */
		u8ResultLocal = 0xFF;
    1540:	8f ef       	ldi	r24, 0xFF	; 255
    1542:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ResultLocal;
    1544:	89 81       	ldd	r24, Y+1	; 0x01
}
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <DIO_SetPinDirection>:

void DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	27 97       	sbiw	r28, 0x07	; 7
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	f8 94       	cli
    1564:	de bf       	out	0x3e, r29	; 62
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	cd bf       	out	0x3d, r28	; 61
    156a:	89 83       	std	Y+1, r24	; 0x01
    156c:	6a 83       	std	Y+2, r22	; 0x02
    156e:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	84 30       	cpi	r24, 0x04	; 4
    1574:	08 f0       	brcs	.+2      	; 0x1578 <DIO_SetPinDirection+0x22>
    1576:	ee c0       	rjmp	.+476    	; 0x1754 <DIO_SetPinDirection+0x1fe>
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	88 30       	cpi	r24, 0x08	; 8
    157c:	08 f0       	brcs	.+2      	; 0x1580 <DIO_SetPinDirection+0x2a>
    157e:	ea c0       	rjmp	.+468    	; 0x1754 <DIO_SetPinDirection+0x1fe>
	{
		if ( u8PinDirCopy == OUTPUT )
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	81 30       	cpi	r24, 0x01	; 1
    1584:	09 f0       	breq	.+2      	; 0x1588 <DIO_SetPinDirection+0x32>
    1586:	6f c0       	rjmp	.+222    	; 0x1666 <DIO_SetPinDirection+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	3f 83       	std	Y+7, r19	; 0x07
    1590:	2e 83       	std	Y+6, r18	; 0x06
    1592:	8e 81       	ldd	r24, Y+6	; 0x06
    1594:	9f 81       	ldd	r25, Y+7	; 0x07
    1596:	81 30       	cpi	r24, 0x01	; 1
    1598:	91 05       	cpc	r25, r1
    159a:	49 f1       	breq	.+82     	; 0x15ee <DIO_SetPinDirection+0x98>
    159c:	2e 81       	ldd	r18, Y+6	; 0x06
    159e:	3f 81       	ldd	r19, Y+7	; 0x07
    15a0:	22 30       	cpi	r18, 0x02	; 2
    15a2:	31 05       	cpc	r19, r1
    15a4:	2c f4       	brge	.+10     	; 0x15b0 <DIO_SetPinDirection+0x5a>
    15a6:	8e 81       	ldd	r24, Y+6	; 0x06
    15a8:	9f 81       	ldd	r25, Y+7	; 0x07
    15aa:	00 97       	sbiw	r24, 0x00	; 0
    15ac:	61 f0       	breq	.+24     	; 0x15c6 <DIO_SetPinDirection+0x70>
    15ae:	d2 c0       	rjmp	.+420    	; 0x1754 <DIO_SetPinDirection+0x1fe>
    15b0:	2e 81       	ldd	r18, Y+6	; 0x06
    15b2:	3f 81       	ldd	r19, Y+7	; 0x07
    15b4:	22 30       	cpi	r18, 0x02	; 2
    15b6:	31 05       	cpc	r19, r1
    15b8:	71 f1       	breq	.+92     	; 0x1616 <DIO_SetPinDirection+0xc0>
    15ba:	8e 81       	ldd	r24, Y+6	; 0x06
    15bc:	9f 81       	ldd	r25, Y+7	; 0x07
    15be:	83 30       	cpi	r24, 0x03	; 3
    15c0:	91 05       	cpc	r25, r1
    15c2:	e9 f1       	breq	.+122    	; 0x163e <DIO_SetPinDirection+0xe8>
    15c4:	c7 c0       	rjmp	.+398    	; 0x1754 <DIO_SetPinDirection+0x1fe>
			{
				case PORTA: SET_BIT(DDRA_Register,u8PinIdCopy); break;
    15c6:	aa e3       	ldi	r26, 0x3A	; 58
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	ea e3       	ldi	r30, 0x3A	; 58
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	48 2f       	mov	r20, r24
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	02 2e       	mov	r0, r18
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <DIO_SetPinDirection+0x8e>
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	0a 94       	dec	r0
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <DIO_SetPinDirection+0x8a>
    15e8:	84 2b       	or	r24, r20
    15ea:	8c 93       	st	X, r24
    15ec:	b3 c0       	rjmp	.+358    	; 0x1754 <DIO_SetPinDirection+0x1fe>
				case PORTB: SET_BIT(DDRB_Register,u8PinIdCopy); break;
    15ee:	a7 e3       	ldi	r26, 0x37	; 55
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e7 e3       	ldi	r30, 0x37	; 55
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	48 2f       	mov	r20, r24
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	02 2e       	mov	r0, r18
    1606:	02 c0       	rjmp	.+4      	; 0x160c <DIO_SetPinDirection+0xb6>
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	0a 94       	dec	r0
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <DIO_SetPinDirection+0xb2>
    1610:	84 2b       	or	r24, r20
    1612:	8c 93       	st	X, r24
    1614:	9f c0       	rjmp	.+318    	; 0x1754 <DIO_SetPinDirection+0x1fe>
				case PORTC: SET_BIT(DDRC_Register,u8PinIdCopy); break;
    1616:	a4 e3       	ldi	r26, 0x34	; 52
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e4 e3       	ldi	r30, 0x34	; 52
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	48 2f       	mov	r20, r24
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	02 2e       	mov	r0, r18
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <DIO_SetPinDirection+0xde>
    1630:	88 0f       	add	r24, r24
    1632:	99 1f       	adc	r25, r25
    1634:	0a 94       	dec	r0
    1636:	e2 f7       	brpl	.-8      	; 0x1630 <DIO_SetPinDirection+0xda>
    1638:	84 2b       	or	r24, r20
    163a:	8c 93       	st	X, r24
    163c:	8b c0       	rjmp	.+278    	; 0x1754 <DIO_SetPinDirection+0x1fe>
				case PORTD: SET_BIT(DDRD_Register,u8PinIdCopy); break;
    163e:	a1 e3       	ldi	r26, 0x31	; 49
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e1 e3       	ldi	r30, 0x31	; 49
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	48 2f       	mov	r20, r24
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	02 2e       	mov	r0, r18
    1656:	02 c0       	rjmp	.+4      	; 0x165c <DIO_SetPinDirection+0x106>
    1658:	88 0f       	add	r24, r24
    165a:	99 1f       	adc	r25, r25
    165c:	0a 94       	dec	r0
    165e:	e2 f7       	brpl	.-8      	; 0x1658 <DIO_SetPinDirection+0x102>
    1660:	84 2b       	or	r24, r20
    1662:	8c 93       	st	X, r24
    1664:	77 c0       	rjmp	.+238    	; 0x1754 <DIO_SetPinDirection+0x1fe>
			}
		}

		else if ( u8PinDirCopy == INPUT )
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	88 23       	and	r24, r24
    166a:	09 f0       	breq	.+2      	; 0x166e <DIO_SetPinDirection+0x118>
    166c:	73 c0       	rjmp	.+230    	; 0x1754 <DIO_SetPinDirection+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	3d 83       	std	Y+5, r19	; 0x05
    1676:	2c 83       	std	Y+4, r18	; 0x04
    1678:	8c 81       	ldd	r24, Y+4	; 0x04
    167a:	9d 81       	ldd	r25, Y+5	; 0x05
    167c:	81 30       	cpi	r24, 0x01	; 1
    167e:	91 05       	cpc	r25, r1
    1680:	59 f1       	breq	.+86     	; 0x16d8 <DIO_SetPinDirection+0x182>
    1682:	2c 81       	ldd	r18, Y+4	; 0x04
    1684:	3d 81       	ldd	r19, Y+5	; 0x05
    1686:	22 30       	cpi	r18, 0x02	; 2
    1688:	31 05       	cpc	r19, r1
    168a:	2c f4       	brge	.+10     	; 0x1696 <DIO_SetPinDirection+0x140>
    168c:	8c 81       	ldd	r24, Y+4	; 0x04
    168e:	9d 81       	ldd	r25, Y+5	; 0x05
    1690:	00 97       	sbiw	r24, 0x00	; 0
    1692:	69 f0       	breq	.+26     	; 0x16ae <DIO_SetPinDirection+0x158>
    1694:	5f c0       	rjmp	.+190    	; 0x1754 <DIO_SetPinDirection+0x1fe>
    1696:	2c 81       	ldd	r18, Y+4	; 0x04
    1698:	3d 81       	ldd	r19, Y+5	; 0x05
    169a:	22 30       	cpi	r18, 0x02	; 2
    169c:	31 05       	cpc	r19, r1
    169e:	89 f1       	breq	.+98     	; 0x1702 <DIO_SetPinDirection+0x1ac>
    16a0:	8c 81       	ldd	r24, Y+4	; 0x04
    16a2:	9d 81       	ldd	r25, Y+5	; 0x05
    16a4:	83 30       	cpi	r24, 0x03	; 3
    16a6:	91 05       	cpc	r25, r1
    16a8:	09 f4       	brne	.+2      	; 0x16ac <DIO_SetPinDirection+0x156>
    16aa:	40 c0       	rjmp	.+128    	; 0x172c <DIO_SetPinDirection+0x1d6>
    16ac:	53 c0       	rjmp	.+166    	; 0x1754 <DIO_SetPinDirection+0x1fe>
			{
				case PORTA: CLR_BIT(DDRA_Register,u8PinIdCopy); break;
    16ae:	aa e3       	ldi	r26, 0x3A	; 58
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	ea e3       	ldi	r30, 0x3A	; 58
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	48 2f       	mov	r20, r24
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	02 2e       	mov	r0, r18
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <DIO_SetPinDirection+0x176>
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	0a 94       	dec	r0
    16ce:	e2 f7       	brpl	.-8      	; 0x16c8 <DIO_SetPinDirection+0x172>
    16d0:	80 95       	com	r24
    16d2:	84 23       	and	r24, r20
    16d4:	8c 93       	st	X, r24
    16d6:	3e c0       	rjmp	.+124    	; 0x1754 <DIO_SetPinDirection+0x1fe>
				case PORTB: CLR_BIT(DDRB_Register,u8PinIdCopy); break;
    16d8:	a7 e3       	ldi	r26, 0x37	; 55
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e7 e3       	ldi	r30, 0x37	; 55
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	48 2f       	mov	r20, r24
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	02 2e       	mov	r0, r18
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <DIO_SetPinDirection+0x1a0>
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	0a 94       	dec	r0
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <DIO_SetPinDirection+0x19c>
    16fa:	80 95       	com	r24
    16fc:	84 23       	and	r24, r20
    16fe:	8c 93       	st	X, r24
    1700:	29 c0       	rjmp	.+82     	; 0x1754 <DIO_SetPinDirection+0x1fe>
				case PORTC: CLR_BIT(DDRC_Register,u8PinIdCopy); break;
    1702:	a4 e3       	ldi	r26, 0x34	; 52
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e4 e3       	ldi	r30, 0x34	; 52
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	48 2f       	mov	r20, r24
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	02 2e       	mov	r0, r18
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <DIO_SetPinDirection+0x1ca>
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	0a 94       	dec	r0
    1722:	e2 f7       	brpl	.-8      	; 0x171c <DIO_SetPinDirection+0x1c6>
    1724:	80 95       	com	r24
    1726:	84 23       	and	r24, r20
    1728:	8c 93       	st	X, r24
    172a:	14 c0       	rjmp	.+40     	; 0x1754 <DIO_SetPinDirection+0x1fe>
				case PORTD: CLR_BIT(DDRD_Register,u8PinIdCopy); break;
    172c:	a1 e3       	ldi	r26, 0x31	; 49
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e1 e3       	ldi	r30, 0x31	; 49
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	48 2f       	mov	r20, r24
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	02 2e       	mov	r0, r18
    1744:	02 c0       	rjmp	.+4      	; 0x174a <DIO_SetPinDirection+0x1f4>
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	0a 94       	dec	r0
    174c:	e2 f7       	brpl	.-8      	; 0x1746 <DIO_SetPinDirection+0x1f0>
    174e:	80 95       	com	r24
    1750:	84 23       	and	r24, r20
    1752:	8c 93       	st	X, r24

	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
    1754:	27 96       	adiw	r28, 0x07	; 7
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	de bf       	out	0x3e, r29	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	cd bf       	out	0x3d, r28	; 61
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	08 95       	ret

00001766 <DIO_SetPortDirection>:


/* IO Ports */
void DIO_SetPortDirection (u8 u8PortId, u8 u8PortDir)
{
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	00 d0       	rcall	.+0      	; 0x176c <DIO_SetPortDirection+0x6>
    176c:	00 d0       	rcall	.+0      	; 0x176e <DIO_SetPortDirection+0x8>
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	89 83       	std	Y+1, r24	; 0x01
    1774:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	28 2f       	mov	r18, r24
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	3c 83       	std	Y+4, r19	; 0x04
    177e:	2b 83       	std	Y+3, r18	; 0x03
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	9c 81       	ldd	r25, Y+4	; 0x04
    1784:	81 30       	cpi	r24, 0x01	; 1
    1786:	91 05       	cpc	r25, r1
    1788:	d1 f0       	breq	.+52     	; 0x17be <DIO_SetPortDirection+0x58>
    178a:	2b 81       	ldd	r18, Y+3	; 0x03
    178c:	3c 81       	ldd	r19, Y+4	; 0x04
    178e:	22 30       	cpi	r18, 0x02	; 2
    1790:	31 05       	cpc	r19, r1
    1792:	2c f4       	brge	.+10     	; 0x179e <DIO_SetPortDirection+0x38>
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	9c 81       	ldd	r25, Y+4	; 0x04
    1798:	00 97       	sbiw	r24, 0x00	; 0
    179a:	61 f0       	breq	.+24     	; 0x17b4 <DIO_SetPortDirection+0x4e>
    179c:	1e c0       	rjmp	.+60     	; 0x17da <DIO_SetPortDirection+0x74>
    179e:	2b 81       	ldd	r18, Y+3	; 0x03
    17a0:	3c 81       	ldd	r19, Y+4	; 0x04
    17a2:	22 30       	cpi	r18, 0x02	; 2
    17a4:	31 05       	cpc	r19, r1
    17a6:	81 f0       	breq	.+32     	; 0x17c8 <DIO_SetPortDirection+0x62>
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	9c 81       	ldd	r25, Y+4	; 0x04
    17ac:	83 30       	cpi	r24, 0x03	; 3
    17ae:	91 05       	cpc	r25, r1
    17b0:	81 f0       	breq	.+32     	; 0x17d2 <DIO_SetPortDirection+0x6c>
    17b2:	13 c0       	rjmp	.+38     	; 0x17da <DIO_SetPortDirection+0x74>
	{
		case     PORTA: DDRA_Register = u8PortDir; break;
    17b4:	ea e3       	ldi	r30, 0x3A	; 58
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	80 83       	st	Z, r24
    17bc:	0e c0       	rjmp	.+28     	; 0x17da <DIO_SetPortDirection+0x74>
		case     PORTB: DDRB_Register = u8PortDir; break;
    17be:	e7 e3       	ldi	r30, 0x37	; 55
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	8a 81       	ldd	r24, Y+2	; 0x02
    17c4:	80 83       	st	Z, r24
    17c6:	09 c0       	rjmp	.+18     	; 0x17da <DIO_SetPortDirection+0x74>
		case     PORTC: DDRC_Register = u8PortDir; break;
    17c8:	e4 e3       	ldi	r30, 0x34	; 52
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	8a 81       	ldd	r24, Y+2	; 0x02
    17ce:	80 83       	st	Z, r24
    17d0:	04 c0       	rjmp	.+8      	; 0x17da <DIO_SetPortDirection+0x74>
		case     PORTD: DDRD_Register = u8PortDir; break;
    17d2:	e1 e3       	ldi	r30, 0x31	; 49
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	80 83       	st	Z, r24
		default: /* Wrong Port ID */       break;
	}
}
    17da:	0f 90       	pop	r0
    17dc:	0f 90       	pop	r0
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	cf 91       	pop	r28
    17e4:	df 91       	pop	r29
    17e6:	08 95       	ret

000017e8 <DIO_SetPortValue>:

void DIO_SetPortValue (u8 u8PortId, u8 u8PortVal)
{
    17e8:	df 93       	push	r29
    17ea:	cf 93       	push	r28
    17ec:	00 d0       	rcall	.+0      	; 0x17ee <DIO_SetPortValue+0x6>
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <DIO_SetPortValue+0x8>
    17f0:	cd b7       	in	r28, 0x3d	; 61
    17f2:	de b7       	in	r29, 0x3e	; 62
    17f4:	89 83       	std	Y+1, r24	; 0x01
    17f6:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	3c 83       	std	Y+4, r19	; 0x04
    1800:	2b 83       	std	Y+3, r18	; 0x03
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	9c 81       	ldd	r25, Y+4	; 0x04
    1806:	81 30       	cpi	r24, 0x01	; 1
    1808:	91 05       	cpc	r25, r1
    180a:	d1 f0       	breq	.+52     	; 0x1840 <DIO_SetPortValue+0x58>
    180c:	2b 81       	ldd	r18, Y+3	; 0x03
    180e:	3c 81       	ldd	r19, Y+4	; 0x04
    1810:	22 30       	cpi	r18, 0x02	; 2
    1812:	31 05       	cpc	r19, r1
    1814:	2c f4       	brge	.+10     	; 0x1820 <DIO_SetPortValue+0x38>
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	9c 81       	ldd	r25, Y+4	; 0x04
    181a:	00 97       	sbiw	r24, 0x00	; 0
    181c:	61 f0       	breq	.+24     	; 0x1836 <DIO_SetPortValue+0x4e>
    181e:	1e c0       	rjmp	.+60     	; 0x185c <DIO_SetPortValue+0x74>
    1820:	2b 81       	ldd	r18, Y+3	; 0x03
    1822:	3c 81       	ldd	r19, Y+4	; 0x04
    1824:	22 30       	cpi	r18, 0x02	; 2
    1826:	31 05       	cpc	r19, r1
    1828:	81 f0       	breq	.+32     	; 0x184a <DIO_SetPortValue+0x62>
    182a:	8b 81       	ldd	r24, Y+3	; 0x03
    182c:	9c 81       	ldd	r25, Y+4	; 0x04
    182e:	83 30       	cpi	r24, 0x03	; 3
    1830:	91 05       	cpc	r25, r1
    1832:	81 f0       	breq	.+32     	; 0x1854 <DIO_SetPortValue+0x6c>
    1834:	13 c0       	rjmp	.+38     	; 0x185c <DIO_SetPortValue+0x74>
	{
		case     PORTA: PORTA_Register = u8PortVal; break;
    1836:	eb e3       	ldi	r30, 0x3B	; 59
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	80 83       	st	Z, r24
    183e:	0e c0       	rjmp	.+28     	; 0x185c <DIO_SetPortValue+0x74>
		case     PORTB: PORTB_Register = u8PortVal; break;
    1840:	e8 e3       	ldi	r30, 0x38	; 56
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	80 83       	st	Z, r24
    1848:	09 c0       	rjmp	.+18     	; 0x185c <DIO_SetPortValue+0x74>
		case     PORTC: PORTC_Register = u8PortVal; break;
    184a:	e5 e3       	ldi	r30, 0x35	; 53
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	80 83       	st	Z, r24
    1852:	04 c0       	rjmp	.+8      	; 0x185c <DIO_SetPortValue+0x74>
		case     PORTD: PORTD_Register = u8PortVal; break;
    1854:	e2 e3       	ldi	r30, 0x32	; 50
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	80 83       	st	Z, r24
		default: /* Wrong Port ID */        break;
	}
}
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	08 95       	ret

0000186a <LCD_vidInit>:
/* Description! Apply initialization sequence for LCD module                           */
/* Input      ! Nothing                                                                */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_vidInit(void)
{
    186a:	0f 93       	push	r16
    186c:	1f 93       	push	r17
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
    1876:	c4 55       	subi	r28, 0x54	; 84
    1878:	d0 40       	sbci	r29, 0x00	; 0
    187a:	0f b6       	in	r0, 0x3f	; 63
    187c:	f8 94       	cli
    187e:	de bf       	out	0x3e, r29	; 62
    1880:	0f be       	out	0x3f, r0	; 63
    1882:	cd bf       	out	0x3d, r28	; 61
    1884:	fe 01       	movw	r30, r28
    1886:	ef 5a       	subi	r30, 0xAF	; 175
    1888:	ff 4f       	sbci	r31, 0xFF	; 255
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	a0 ef       	ldi	r26, 0xF0	; 240
    1890:	b1 e4       	ldi	r27, 0x41	; 65
    1892:	80 83       	st	Z, r24
    1894:	91 83       	std	Z+1, r25	; 0x01
    1896:	a2 83       	std	Z+2, r26	; 0x02
    1898:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189a:	8e 01       	movw	r16, r28
    189c:	03 5b       	subi	r16, 0xB3	; 179
    189e:	1f 4f       	sbci	r17, 0xFF	; 255
    18a0:	fe 01       	movw	r30, r28
    18a2:	ef 5a       	subi	r30, 0xAF	; 175
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	60 81       	ld	r22, Z
    18a8:	71 81       	ldd	r23, Z+1	; 0x01
    18aa:	82 81       	ldd	r24, Z+2	; 0x02
    18ac:	93 81       	ldd	r25, Z+3	; 0x03
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	4a e7       	ldi	r20, 0x7A	; 122
    18b4:	53 e4       	ldi	r21, 0x43	; 67
    18b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	f8 01       	movw	r30, r16
    18c0:	80 83       	st	Z, r24
    18c2:	91 83       	std	Z+1, r25	; 0x01
    18c4:	a2 83       	std	Z+2, r26	; 0x02
    18c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18c8:	fe 01       	movw	r30, r28
    18ca:	e3 5b       	subi	r30, 0xB3	; 179
    18cc:	ff 4f       	sbci	r31, 0xFF	; 255
    18ce:	60 81       	ld	r22, Z
    18d0:	71 81       	ldd	r23, Z+1	; 0x01
    18d2:	82 81       	ldd	r24, Z+2	; 0x02
    18d4:	93 81       	ldd	r25, Z+3	; 0x03
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	40 e8       	ldi	r20, 0x80	; 128
    18dc:	5f e3       	ldi	r21, 0x3F	; 63
    18de:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18e2:	88 23       	and	r24, r24
    18e4:	44 f4       	brge	.+16     	; 0x18f6 <LCD_vidInit+0x8c>
		__ticks = 1;
    18e6:	fe 01       	movw	r30, r28
    18e8:	e5 5b       	subi	r30, 0xB5	; 181
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	91 83       	std	Z+1, r25	; 0x01
    18f2:	80 83       	st	Z, r24
    18f4:	64 c0       	rjmp	.+200    	; 0x19be <LCD_vidInit+0x154>
	else if (__tmp > 65535)
    18f6:	fe 01       	movw	r30, r28
    18f8:	e3 5b       	subi	r30, 0xB3	; 179
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	60 81       	ld	r22, Z
    18fe:	71 81       	ldd	r23, Z+1	; 0x01
    1900:	82 81       	ldd	r24, Z+2	; 0x02
    1902:	93 81       	ldd	r25, Z+3	; 0x03
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	3f ef       	ldi	r19, 0xFF	; 255
    1908:	4f e7       	ldi	r20, 0x7F	; 127
    190a:	57 e4       	ldi	r21, 0x47	; 71
    190c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1910:	18 16       	cp	r1, r24
    1912:	0c f0       	brlt	.+2      	; 0x1916 <LCD_vidInit+0xac>
    1914:	43 c0       	rjmp	.+134    	; 0x199c <LCD_vidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1916:	fe 01       	movw	r30, r28
    1918:	ef 5a       	subi	r30, 0xAF	; 175
    191a:	ff 4f       	sbci	r31, 0xFF	; 255
    191c:	60 81       	ld	r22, Z
    191e:	71 81       	ldd	r23, Z+1	; 0x01
    1920:	82 81       	ldd	r24, Z+2	; 0x02
    1922:	93 81       	ldd	r25, Z+3	; 0x03
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	40 e2       	ldi	r20, 0x20	; 32
    192a:	51 e4       	ldi	r21, 0x41	; 65
    192c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	8e 01       	movw	r16, r28
    1936:	05 5b       	subi	r16, 0xB5	; 181
    1938:	1f 4f       	sbci	r17, 0xFF	; 255
    193a:	bc 01       	movw	r22, r24
    193c:	cd 01       	movw	r24, r26
    193e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	f8 01       	movw	r30, r16
    1948:	91 83       	std	Z+1, r25	; 0x01
    194a:	80 83       	st	Z, r24
    194c:	1f c0       	rjmp	.+62     	; 0x198c <LCD_vidInit+0x122>
    194e:	fe 01       	movw	r30, r28
    1950:	e7 5b       	subi	r30, 0xB7	; 183
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	89 e1       	ldi	r24, 0x19	; 25
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	91 83       	std	Z+1, r25	; 0x01
    195a:	80 83       	st	Z, r24
    195c:	fe 01       	movw	r30, r28
    195e:	e7 5b       	subi	r30, 0xB7	; 183
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	80 81       	ld	r24, Z
    1964:	91 81       	ldd	r25, Z+1	; 0x01
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	f1 f7       	brne	.-4      	; 0x1966 <LCD_vidInit+0xfc>
    196a:	fe 01       	movw	r30, r28
    196c:	e7 5b       	subi	r30, 0xB7	; 183
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	91 83       	std	Z+1, r25	; 0x01
    1972:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1974:	de 01       	movw	r26, r28
    1976:	a5 5b       	subi	r26, 0xB5	; 181
    1978:	bf 4f       	sbci	r27, 0xFF	; 255
    197a:	fe 01       	movw	r30, r28
    197c:	e5 5b       	subi	r30, 0xB5	; 181
    197e:	ff 4f       	sbci	r31, 0xFF	; 255
    1980:	80 81       	ld	r24, Z
    1982:	91 81       	ldd	r25, Z+1	; 0x01
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	11 96       	adiw	r26, 0x01	; 1
    1988:	9c 93       	st	X, r25
    198a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    198c:	fe 01       	movw	r30, r28
    198e:	e5 5b       	subi	r30, 0xB5	; 181
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	80 81       	ld	r24, Z
    1994:	91 81       	ldd	r25, Z+1	; 0x01
    1996:	00 97       	sbiw	r24, 0x00	; 0
    1998:	d1 f6       	brne	.-76     	; 0x194e <LCD_vidInit+0xe4>
    199a:	27 c0       	rjmp	.+78     	; 0x19ea <LCD_vidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    199c:	8e 01       	movw	r16, r28
    199e:	05 5b       	subi	r16, 0xB5	; 181
    19a0:	1f 4f       	sbci	r17, 0xFF	; 255
    19a2:	fe 01       	movw	r30, r28
    19a4:	e3 5b       	subi	r30, 0xB3	; 179
    19a6:	ff 4f       	sbci	r31, 0xFF	; 255
    19a8:	60 81       	ld	r22, Z
    19aa:	71 81       	ldd	r23, Z+1	; 0x01
    19ac:	82 81       	ldd	r24, Z+2	; 0x02
    19ae:	93 81       	ldd	r25, Z+3	; 0x03
    19b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	f8 01       	movw	r30, r16
    19ba:	91 83       	std	Z+1, r25	; 0x01
    19bc:	80 83       	st	Z, r24
    19be:	de 01       	movw	r26, r28
    19c0:	a9 5b       	subi	r26, 0xB9	; 185
    19c2:	bf 4f       	sbci	r27, 0xFF	; 255
    19c4:	fe 01       	movw	r30, r28
    19c6:	e5 5b       	subi	r30, 0xB5	; 181
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	80 81       	ld	r24, Z
    19cc:	91 81       	ldd	r25, Z+1	; 0x01
    19ce:	8d 93       	st	X+, r24
    19d0:	9c 93       	st	X, r25
    19d2:	fe 01       	movw	r30, r28
    19d4:	e9 5b       	subi	r30, 0xB9	; 185
    19d6:	ff 4f       	sbci	r31, 0xFF	; 255
    19d8:	80 81       	ld	r24, Z
    19da:	91 81       	ldd	r25, Z+1	; 0x01
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	f1 f7       	brne	.-4      	; 0x19dc <LCD_vidInit+0x172>
    19e0:	fe 01       	movw	r30, r28
    19e2:	e9 5b       	subi	r30, 0xB9	; 185
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	91 83       	std	Z+1, r25	; 0x01
    19e8:	80 83       	st	Z, r24
	/* Delay 30ms to ensure the initialization of the LCD driver */
	_delay_ms(30);

	/* Return Home  */
	LCD_vidSendCommand(lcd_Home);
    19ea:	82 e0       	ldi	r24, 0x02	; 2
    19ec:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_vidSendCommand>
    19f0:	fe 01       	movw	r30, r28
    19f2:	ed 5b       	subi	r30, 0xBD	; 189
    19f4:	ff 4f       	sbci	r31, 0xFF	; 255
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	a0 e7       	ldi	r26, 0x70	; 112
    19fc:	b1 e4       	ldi	r27, 0x41	; 65
    19fe:	80 83       	st	Z, r24
    1a00:	91 83       	std	Z+1, r25	; 0x01
    1a02:	a2 83       	std	Z+2, r26	; 0x02
    1a04:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a06:	8e 01       	movw	r16, r28
    1a08:	01 5c       	subi	r16, 0xC1	; 193
    1a0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	ed 5b       	subi	r30, 0xBD	; 189
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	60 81       	ld	r22, Z
    1a14:	71 81       	ldd	r23, Z+1	; 0x01
    1a16:	82 81       	ldd	r24, Z+2	; 0x02
    1a18:	93 81       	ldd	r25, Z+3	; 0x03
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	4a e7       	ldi	r20, 0x7A	; 122
    1a20:	53 e4       	ldi	r21, 0x43	; 67
    1a22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	f8 01       	movw	r30, r16
    1a2c:	80 83       	st	Z, r24
    1a2e:	91 83       	std	Z+1, r25	; 0x01
    1a30:	a2 83       	std	Z+2, r26	; 0x02
    1a32:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a34:	fe 01       	movw	r30, r28
    1a36:	ff 96       	adiw	r30, 0x3f	; 63
    1a38:	60 81       	ld	r22, Z
    1a3a:	71 81       	ldd	r23, Z+1	; 0x01
    1a3c:	82 81       	ldd	r24, Z+2	; 0x02
    1a3e:	93 81       	ldd	r25, Z+3	; 0x03
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e8       	ldi	r20, 0x80	; 128
    1a46:	5f e3       	ldi	r21, 0x3F	; 63
    1a48:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a4c:	88 23       	and	r24, r24
    1a4e:	2c f4       	brge	.+10     	; 0x1a5a <LCD_vidInit+0x1f0>
		__ticks = 1;
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	9e af       	std	Y+62, r25	; 0x3e
    1a56:	8d af       	std	Y+61, r24	; 0x3d
    1a58:	46 c0       	rjmp	.+140    	; 0x1ae6 <LCD_vidInit+0x27c>
	else if (__tmp > 65535)
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	ff 96       	adiw	r30, 0x3f	; 63
    1a5e:	60 81       	ld	r22, Z
    1a60:	71 81       	ldd	r23, Z+1	; 0x01
    1a62:	82 81       	ldd	r24, Z+2	; 0x02
    1a64:	93 81       	ldd	r25, Z+3	; 0x03
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	3f ef       	ldi	r19, 0xFF	; 255
    1a6a:	4f e7       	ldi	r20, 0x7F	; 127
    1a6c:	57 e4       	ldi	r21, 0x47	; 71
    1a6e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a72:	18 16       	cp	r1, r24
    1a74:	64 f5       	brge	.+88     	; 0x1ace <LCD_vidInit+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a76:	fe 01       	movw	r30, r28
    1a78:	ed 5b       	subi	r30, 0xBD	; 189
    1a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7c:	60 81       	ld	r22, Z
    1a7e:	71 81       	ldd	r23, Z+1	; 0x01
    1a80:	82 81       	ldd	r24, Z+2	; 0x02
    1a82:	93 81       	ldd	r25, Z+3	; 0x03
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	40 e2       	ldi	r20, 0x20	; 32
    1a8a:	51 e4       	ldi	r21, 0x41	; 65
    1a8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	bc 01       	movw	r22, r24
    1a96:	cd 01       	movw	r24, r26
    1a98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	9e af       	std	Y+62, r25	; 0x3e
    1aa2:	8d af       	std	Y+61, r24	; 0x3d
    1aa4:	0f c0       	rjmp	.+30     	; 0x1ac4 <LCD_vidInit+0x25a>
    1aa6:	89 e1       	ldi	r24, 0x19	; 25
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	9c af       	std	Y+60, r25	; 0x3c
    1aac:	8b af       	std	Y+59, r24	; 0x3b
    1aae:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ab0:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ab2:	01 97       	sbiw	r24, 0x01	; 1
    1ab4:	f1 f7       	brne	.-4      	; 0x1ab2 <LCD_vidInit+0x248>
    1ab6:	9c af       	std	Y+60, r25	; 0x3c
    1ab8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aba:	8d ad       	ldd	r24, Y+61	; 0x3d
    1abc:	9e ad       	ldd	r25, Y+62	; 0x3e
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	9e af       	std	Y+62, r25	; 0x3e
    1ac2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ac6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ac8:	00 97       	sbiw	r24, 0x00	; 0
    1aca:	69 f7       	brne	.-38     	; 0x1aa6 <LCD_vidInit+0x23c>
    1acc:	16 c0       	rjmp	.+44     	; 0x1afa <LCD_vidInit+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ace:	fe 01       	movw	r30, r28
    1ad0:	ff 96       	adiw	r30, 0x3f	; 63
    1ad2:	60 81       	ld	r22, Z
    1ad4:	71 81       	ldd	r23, Z+1	; 0x01
    1ad6:	82 81       	ldd	r24, Z+2	; 0x02
    1ad8:	93 81       	ldd	r25, Z+3	; 0x03
    1ada:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	9e af       	std	Y+62, r25	; 0x3e
    1ae4:	8d af       	std	Y+61, r24	; 0x3d
    1ae6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ae8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1aea:	9a af       	std	Y+58, r25	; 0x3a
    1aec:	89 af       	std	Y+57, r24	; 0x39
    1aee:	89 ad       	ldd	r24, Y+57	; 0x39
    1af0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	f1 f7       	brne	.-4      	; 0x1af2 <LCD_vidInit+0x288>
    1af6:	9a af       	std	Y+58, r25	; 0x3a
    1af8:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(15);

	/* Function Set  */
	LCD_vidSendCommand(lcd_FunctionSet8bit);
    1afa:	88 e3       	ldi	r24, 0x38	; 56
    1afc:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_vidSendCommand>
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	a0 e8       	ldi	r26, 0x80	; 128
    1b06:	bf e3       	ldi	r27, 0x3F	; 63
    1b08:	8d ab       	std	Y+53, r24	; 0x35
    1b0a:	9e ab       	std	Y+54, r25	; 0x36
    1b0c:	af ab       	std	Y+55, r26	; 0x37
    1b0e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b10:	6d a9       	ldd	r22, Y+53	; 0x35
    1b12:	7e a9       	ldd	r23, Y+54	; 0x36
    1b14:	8f a9       	ldd	r24, Y+55	; 0x37
    1b16:	98 ad       	ldd	r25, Y+56	; 0x38
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	4a e7       	ldi	r20, 0x7A	; 122
    1b1e:	53 e4       	ldi	r21, 0x43	; 67
    1b20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	89 ab       	std	Y+49, r24	; 0x31
    1b2a:	9a ab       	std	Y+50, r25	; 0x32
    1b2c:	ab ab       	std	Y+51, r26	; 0x33
    1b2e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b30:	69 a9       	ldd	r22, Y+49	; 0x31
    1b32:	7a a9       	ldd	r23, Y+50	; 0x32
    1b34:	8b a9       	ldd	r24, Y+51	; 0x33
    1b36:	9c a9       	ldd	r25, Y+52	; 0x34
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	40 e8       	ldi	r20, 0x80	; 128
    1b3e:	5f e3       	ldi	r21, 0x3F	; 63
    1b40:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b44:	88 23       	and	r24, r24
    1b46:	2c f4       	brge	.+10     	; 0x1b52 <LCD_vidInit+0x2e8>
		__ticks = 1;
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	98 ab       	std	Y+48, r25	; 0x30
    1b4e:	8f a7       	std	Y+47, r24	; 0x2f
    1b50:	3f c0       	rjmp	.+126    	; 0x1bd0 <LCD_vidInit+0x366>
	else if (__tmp > 65535)
    1b52:	69 a9       	ldd	r22, Y+49	; 0x31
    1b54:	7a a9       	ldd	r23, Y+50	; 0x32
    1b56:	8b a9       	ldd	r24, Y+51	; 0x33
    1b58:	9c a9       	ldd	r25, Y+52	; 0x34
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	3f ef       	ldi	r19, 0xFF	; 255
    1b5e:	4f e7       	ldi	r20, 0x7F	; 127
    1b60:	57 e4       	ldi	r21, 0x47	; 71
    1b62:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b66:	18 16       	cp	r1, r24
    1b68:	4c f5       	brge	.+82     	; 0x1bbc <LCD_vidInit+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b6a:	6d a9       	ldd	r22, Y+53	; 0x35
    1b6c:	7e a9       	ldd	r23, Y+54	; 0x36
    1b6e:	8f a9       	ldd	r24, Y+55	; 0x37
    1b70:	98 ad       	ldd	r25, Y+56	; 0x38
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	40 e2       	ldi	r20, 0x20	; 32
    1b78:	51 e4       	ldi	r21, 0x41	; 65
    1b7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	bc 01       	movw	r22, r24
    1b84:	cd 01       	movw	r24, r26
    1b86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	98 ab       	std	Y+48, r25	; 0x30
    1b90:	8f a7       	std	Y+47, r24	; 0x2f
    1b92:	0f c0       	rjmp	.+30     	; 0x1bb2 <LCD_vidInit+0x348>
    1b94:	89 e1       	ldi	r24, 0x19	; 25
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	9e a7       	std	Y+46, r25	; 0x2e
    1b9a:	8d a7       	std	Y+45, r24	; 0x2d
    1b9c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b9e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	f1 f7       	brne	.-4      	; 0x1ba0 <LCD_vidInit+0x336>
    1ba4:	9e a7       	std	Y+46, r25	; 0x2e
    1ba6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1baa:	98 a9       	ldd	r25, Y+48	; 0x30
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	98 ab       	std	Y+48, r25	; 0x30
    1bb0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bb4:	98 a9       	ldd	r25, Y+48	; 0x30
    1bb6:	00 97       	sbiw	r24, 0x00	; 0
    1bb8:	69 f7       	brne	.-38     	; 0x1b94 <LCD_vidInit+0x32a>
    1bba:	14 c0       	rjmp	.+40     	; 0x1be4 <LCD_vidInit+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bbc:	69 a9       	ldd	r22, Y+49	; 0x31
    1bbe:	7a a9       	ldd	r23, Y+50	; 0x32
    1bc0:	8b a9       	ldd	r24, Y+51	; 0x33
    1bc2:	9c a9       	ldd	r25, Y+52	; 0x34
    1bc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	98 ab       	std	Y+48, r25	; 0x30
    1bce:	8f a7       	std	Y+47, r24	; 0x2f
    1bd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bd2:	98 a9       	ldd	r25, Y+48	; 0x30
    1bd4:	9c a7       	std	Y+44, r25	; 0x2c
    1bd6:	8b a7       	std	Y+43, r24	; 0x2b
    1bd8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bda:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	f1 f7       	brne	.-4      	; 0x1bdc <LCD_vidInit+0x372>
    1be0:	9c a7       	std	Y+44, r25	; 0x2c
    1be2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/* Display ON OFF Control */
	LCD_vidSendCommand(lcd_DisplayOn);
    1be4:	8c e0       	ldi	r24, 0x0C	; 12
    1be6:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_vidSendCommand>
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	a0 e8       	ldi	r26, 0x80	; 128
    1bf0:	bf e3       	ldi	r27, 0x3F	; 63
    1bf2:	8f a3       	std	Y+39, r24	; 0x27
    1bf4:	98 a7       	std	Y+40, r25	; 0x28
    1bf6:	a9 a7       	std	Y+41, r26	; 0x29
    1bf8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfa:	6f a1       	ldd	r22, Y+39	; 0x27
    1bfc:	78 a5       	ldd	r23, Y+40	; 0x28
    1bfe:	89 a5       	ldd	r24, Y+41	; 0x29
    1c00:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	4a e7       	ldi	r20, 0x7A	; 122
    1c08:	53 e4       	ldi	r21, 0x43	; 67
    1c0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	8b a3       	std	Y+35, r24	; 0x23
    1c14:	9c a3       	std	Y+36, r25	; 0x24
    1c16:	ad a3       	std	Y+37, r26	; 0x25
    1c18:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c1a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c1c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c1e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c20:	9e a1       	ldd	r25, Y+38	; 0x26
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	40 e8       	ldi	r20, 0x80	; 128
    1c28:	5f e3       	ldi	r21, 0x3F	; 63
    1c2a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c2e:	88 23       	and	r24, r24
    1c30:	2c f4       	brge	.+10     	; 0x1c3c <LCD_vidInit+0x3d2>
		__ticks = 1;
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	9a a3       	std	Y+34, r25	; 0x22
    1c38:	89 a3       	std	Y+33, r24	; 0x21
    1c3a:	3f c0       	rjmp	.+126    	; 0x1cba <LCD_vidInit+0x450>
	else if (__tmp > 65535)
    1c3c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c3e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c40:	8d a1       	ldd	r24, Y+37	; 0x25
    1c42:	9e a1       	ldd	r25, Y+38	; 0x26
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	3f ef       	ldi	r19, 0xFF	; 255
    1c48:	4f e7       	ldi	r20, 0x7F	; 127
    1c4a:	57 e4       	ldi	r21, 0x47	; 71
    1c4c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c50:	18 16       	cp	r1, r24
    1c52:	4c f5       	brge	.+82     	; 0x1ca6 <LCD_vidInit+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c54:	6f a1       	ldd	r22, Y+39	; 0x27
    1c56:	78 a5       	ldd	r23, Y+40	; 0x28
    1c58:	89 a5       	ldd	r24, Y+41	; 0x29
    1c5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	40 e2       	ldi	r20, 0x20	; 32
    1c62:	51 e4       	ldi	r21, 0x41	; 65
    1c64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	bc 01       	movw	r22, r24
    1c6e:	cd 01       	movw	r24, r26
    1c70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	9a a3       	std	Y+34, r25	; 0x22
    1c7a:	89 a3       	std	Y+33, r24	; 0x21
    1c7c:	0f c0       	rjmp	.+30     	; 0x1c9c <LCD_vidInit+0x432>
    1c7e:	89 e1       	ldi	r24, 0x19	; 25
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	98 a3       	std	Y+32, r25	; 0x20
    1c84:	8f 8f       	std	Y+31, r24	; 0x1f
    1c86:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c88:	98 a1       	ldd	r25, Y+32	; 0x20
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	f1 f7       	brne	.-4      	; 0x1c8a <LCD_vidInit+0x420>
    1c8e:	98 a3       	std	Y+32, r25	; 0x20
    1c90:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c92:	89 a1       	ldd	r24, Y+33	; 0x21
    1c94:	9a a1       	ldd	r25, Y+34	; 0x22
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	9a a3       	std	Y+34, r25	; 0x22
    1c9a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c9e:	9a a1       	ldd	r25, Y+34	; 0x22
    1ca0:	00 97       	sbiw	r24, 0x00	; 0
    1ca2:	69 f7       	brne	.-38     	; 0x1c7e <LCD_vidInit+0x414>
    1ca4:	14 c0       	rjmp	.+40     	; 0x1cce <LCD_vidInit+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ca8:	7c a1       	ldd	r23, Y+36	; 0x24
    1caa:	8d a1       	ldd	r24, Y+37	; 0x25
    1cac:	9e a1       	ldd	r25, Y+38	; 0x26
    1cae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	9a a3       	std	Y+34, r25	; 0x22
    1cb8:	89 a3       	std	Y+33, r24	; 0x21
    1cba:	89 a1       	ldd	r24, Y+33	; 0x21
    1cbc:	9a a1       	ldd	r25, Y+34	; 0x22
    1cbe:	9e 8f       	std	Y+30, r25	; 0x1e
    1cc0:	8d 8f       	std	Y+29, r24	; 0x1d
    1cc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cc4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	f1 f7       	brne	.-4      	; 0x1cc6 <LCD_vidInit+0x45c>
    1cca:	9e 8f       	std	Y+30, r25	; 0x1e
    1ccc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/* Clear Display */
	LCD_vidSendCommand(lcd_Clear);
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_vidSendCommand>
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	a0 e7       	ldi	r26, 0x70	; 112
    1cda:	b1 e4       	ldi	r27, 0x41	; 65
    1cdc:	89 8f       	std	Y+25, r24	; 0x19
    1cde:	9a 8f       	std	Y+26, r25	; 0x1a
    1ce0:	ab 8f       	std	Y+27, r26	; 0x1b
    1ce2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ce6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ce8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	4a e7       	ldi	r20, 0x7A	; 122
    1cf2:	53 e4       	ldi	r21, 0x43	; 67
    1cf4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	8d 8b       	std	Y+21, r24	; 0x15
    1cfe:	9e 8b       	std	Y+22, r25	; 0x16
    1d00:	af 8b       	std	Y+23, r26	; 0x17
    1d02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d04:	6d 89       	ldd	r22, Y+21	; 0x15
    1d06:	7e 89       	ldd	r23, Y+22	; 0x16
    1d08:	8f 89       	ldd	r24, Y+23	; 0x17
    1d0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	40 e8       	ldi	r20, 0x80	; 128
    1d12:	5f e3       	ldi	r21, 0x3F	; 63
    1d14:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d18:	88 23       	and	r24, r24
    1d1a:	2c f4       	brge	.+10     	; 0x1d26 <LCD_vidInit+0x4bc>
		__ticks = 1;
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	9c 8b       	std	Y+20, r25	; 0x14
    1d22:	8b 8b       	std	Y+19, r24	; 0x13
    1d24:	3f c0       	rjmp	.+126    	; 0x1da4 <LCD_vidInit+0x53a>
	else if (__tmp > 65535)
    1d26:	6d 89       	ldd	r22, Y+21	; 0x15
    1d28:	7e 89       	ldd	r23, Y+22	; 0x16
    1d2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	3f ef       	ldi	r19, 0xFF	; 255
    1d32:	4f e7       	ldi	r20, 0x7F	; 127
    1d34:	57 e4       	ldi	r21, 0x47	; 71
    1d36:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d3a:	18 16       	cp	r1, r24
    1d3c:	4c f5       	brge	.+82     	; 0x1d90 <LCD_vidInit+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d3e:	69 8d       	ldd	r22, Y+25	; 0x19
    1d40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	40 e2       	ldi	r20, 0x20	; 32
    1d4c:	51 e4       	ldi	r21, 0x41	; 65
    1d4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	bc 01       	movw	r22, r24
    1d58:	cd 01       	movw	r24, r26
    1d5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	9c 8b       	std	Y+20, r25	; 0x14
    1d64:	8b 8b       	std	Y+19, r24	; 0x13
    1d66:	0f c0       	rjmp	.+30     	; 0x1d86 <LCD_vidInit+0x51c>
    1d68:	89 e1       	ldi	r24, 0x19	; 25
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	9a 8b       	std	Y+18, r25	; 0x12
    1d6e:	89 8b       	std	Y+17, r24	; 0x11
    1d70:	89 89       	ldd	r24, Y+17	; 0x11
    1d72:	9a 89       	ldd	r25, Y+18	; 0x12
    1d74:	01 97       	sbiw	r24, 0x01	; 1
    1d76:	f1 f7       	brne	.-4      	; 0x1d74 <LCD_vidInit+0x50a>
    1d78:	9a 8b       	std	Y+18, r25	; 0x12
    1d7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d80:	01 97       	sbiw	r24, 0x01	; 1
    1d82:	9c 8b       	std	Y+20, r25	; 0x14
    1d84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d86:	8b 89       	ldd	r24, Y+19	; 0x13
    1d88:	9c 89       	ldd	r25, Y+20	; 0x14
    1d8a:	00 97       	sbiw	r24, 0x00	; 0
    1d8c:	69 f7       	brne	.-38     	; 0x1d68 <LCD_vidInit+0x4fe>
    1d8e:	14 c0       	rjmp	.+40     	; 0x1db8 <LCD_vidInit+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d90:	6d 89       	ldd	r22, Y+21	; 0x15
    1d92:	7e 89       	ldd	r23, Y+22	; 0x16
    1d94:	8f 89       	ldd	r24, Y+23	; 0x17
    1d96:	98 8d       	ldd	r25, Y+24	; 0x18
    1d98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	9c 8b       	std	Y+20, r25	; 0x14
    1da2:	8b 8b       	std	Y+19, r24	; 0x13
    1da4:	8b 89       	ldd	r24, Y+19	; 0x13
    1da6:	9c 89       	ldd	r25, Y+20	; 0x14
    1da8:	98 8b       	std	Y+16, r25	; 0x10
    1daa:	8f 87       	std	Y+15, r24	; 0x0f
    1dac:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dae:	98 89       	ldd	r25, Y+16	; 0x10
    1db0:	01 97       	sbiw	r24, 0x01	; 1
    1db2:	f1 f7       	brne	.-4      	; 0x1db0 <LCD_vidInit+0x546>
    1db4:	98 8b       	std	Y+16, r25	; 0x10
    1db6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(15);

	/* Entry Mode Set  */
	LCD_vidSendCommand(lcd_EntryMode);
    1db8:	86 e0       	ldi	r24, 0x06	; 6
    1dba:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_vidSendCommand>
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	a0 e0       	ldi	r26, 0x00	; 0
    1dc4:	b0 e4       	ldi	r27, 0x40	; 64
    1dc6:	8b 87       	std	Y+11, r24	; 0x0b
    1dc8:	9c 87       	std	Y+12, r25	; 0x0c
    1dca:	ad 87       	std	Y+13, r26	; 0x0d
    1dcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dce:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	4a e7       	ldi	r20, 0x7A	; 122
    1ddc:	53 e4       	ldi	r21, 0x43	; 67
    1dde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	8f 83       	std	Y+7, r24	; 0x07
    1de8:	98 87       	std	Y+8, r25	; 0x08
    1dea:	a9 87       	std	Y+9, r26	; 0x09
    1dec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dee:	6f 81       	ldd	r22, Y+7	; 0x07
    1df0:	78 85       	ldd	r23, Y+8	; 0x08
    1df2:	89 85       	ldd	r24, Y+9	; 0x09
    1df4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	40 e8       	ldi	r20, 0x80	; 128
    1dfc:	5f e3       	ldi	r21, 0x3F	; 63
    1dfe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e02:	88 23       	and	r24, r24
    1e04:	2c f4       	brge	.+10     	; 0x1e10 <LCD_vidInit+0x5a6>
		__ticks = 1;
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	9e 83       	std	Y+6, r25	; 0x06
    1e0c:	8d 83       	std	Y+5, r24	; 0x05
    1e0e:	3f c0       	rjmp	.+126    	; 0x1e8e <LCD_vidInit+0x624>
	else if (__tmp > 65535)
    1e10:	6f 81       	ldd	r22, Y+7	; 0x07
    1e12:	78 85       	ldd	r23, Y+8	; 0x08
    1e14:	89 85       	ldd	r24, Y+9	; 0x09
    1e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	3f ef       	ldi	r19, 0xFF	; 255
    1e1c:	4f e7       	ldi	r20, 0x7F	; 127
    1e1e:	57 e4       	ldi	r21, 0x47	; 71
    1e20:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e24:	18 16       	cp	r1, r24
    1e26:	4c f5       	brge	.+82     	; 0x1e7a <LCD_vidInit+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	40 e2       	ldi	r20, 0x20	; 32
    1e36:	51 e4       	ldi	r21, 0x41	; 65
    1e38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	bc 01       	movw	r22, r24
    1e42:	cd 01       	movw	r24, r26
    1e44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	9e 83       	std	Y+6, r25	; 0x06
    1e4e:	8d 83       	std	Y+5, r24	; 0x05
    1e50:	0f c0       	rjmp	.+30     	; 0x1e70 <LCD_vidInit+0x606>
    1e52:	89 e1       	ldi	r24, 0x19	; 25
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	9c 83       	std	Y+4, r25	; 0x04
    1e58:	8b 83       	std	Y+3, r24	; 0x03
    1e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	f1 f7       	brne	.-4      	; 0x1e5e <LCD_vidInit+0x5f4>
    1e62:	9c 83       	std	Y+4, r25	; 0x04
    1e64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e66:	8d 81       	ldd	r24, Y+5	; 0x05
    1e68:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6a:	01 97       	sbiw	r24, 0x01	; 1
    1e6c:	9e 83       	std	Y+6, r25	; 0x06
    1e6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e70:	8d 81       	ldd	r24, Y+5	; 0x05
    1e72:	9e 81       	ldd	r25, Y+6	; 0x06
    1e74:	00 97       	sbiw	r24, 0x00	; 0
    1e76:	69 f7       	brne	.-38     	; 0x1e52 <LCD_vidInit+0x5e8>
    1e78:	14 c0       	rjmp	.+40     	; 0x1ea2 <LCD_vidInit+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e7c:	78 85       	ldd	r23, Y+8	; 0x08
    1e7e:	89 85       	ldd	r24, Y+9	; 0x09
    1e80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	9e 83       	std	Y+6, r25	; 0x06
    1e8c:	8d 83       	std	Y+5, r24	; 0x05
    1e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e90:	9e 81       	ldd	r25, Y+6	; 0x06
    1e92:	9a 83       	std	Y+2, r25	; 0x02
    1e94:	89 83       	std	Y+1, r24	; 0x01
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	f1 f7       	brne	.-4      	; 0x1e9a <LCD_vidInit+0x630>
    1e9e:	9a 83       	std	Y+2, r25	; 0x02
    1ea0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    1ea2:	cc 5a       	subi	r28, 0xAC	; 172
    1ea4:	df 4f       	sbci	r29, 0xFF	; 255
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	f8 94       	cli
    1eaa:	de bf       	out	0x3e, r29	; 62
    1eac:	0f be       	out	0x3f, r0	; 63
    1eae:	cd bf       	out	0x3d, r28	; 61
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	1f 91       	pop	r17
    1eb6:	0f 91       	pop	r16
    1eb8:	08 95       	ret

00001eba <LCD_vidSendCommand>:
/* Description! Interface to send the configuration commands to the LCD Driver         */
/* Input      ! Command number                                                         */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_vidSendCommand(u8 u8CmdCpy)
{
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
    1ec2:	6d 97       	sbiw	r28, 0x1d	; 29
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	f8 94       	cli
    1ec8:	de bf       	out	0x3e, r29	; 62
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	cd bf       	out	0x3d, r28	; 61
    1ece:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Set RS to LOW */
	DIO_SetPinValue(PORTC, 0, LOW);
    1ed0:	82 e0       	ldi	r24, 0x02	; 2
    1ed2:	60 e0       	ldi	r22, 0x00	; 0
    1ed4:	40 e0       	ldi	r20, 0x00	; 0
    1ed6:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_SetPinValue>

	/* Set R/W to LOW */
	DIO_SetPinValue(PORTC, 1, LOW);
    1eda:	82 e0       	ldi	r24, 0x02	; 2
    1edc:	61 e0       	ldi	r22, 0x01	; 1
    1ede:	40 e0       	ldi	r20, 0x00	; 0
    1ee0:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_SetPinValue>

	/* Set E to HIGH  */
	DIO_SetPinValue(PORTC, 2, HIGH);
    1ee4:	82 e0       	ldi	r24, 0x02	; 2
    1ee6:	62 e0       	ldi	r22, 0x02	; 2
    1ee8:	41 e0       	ldi	r20, 0x01	; 1
    1eea:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_SetPinValue>

	/* Load Command on Data bus */
	DIO_SetPortValue(PORTD, u8CmdCpy);
    1eee:	83 e0       	ldi	r24, 0x03	; 3
    1ef0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1ef2:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <DIO_SetPortValue>

	/* Set E to LOW */
	DIO_SetPinValue(PORTC, 2, LOW);
    1ef6:	82 e0       	ldi	r24, 0x02	; 2
    1ef8:	62 e0       	ldi	r22, 0x02	; 2
    1efa:	40 e0       	ldi	r20, 0x00	; 0
    1efc:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_SetPinValue>
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	a0 ea       	ldi	r26, 0xA0	; 160
    1f06:	b0 e4       	ldi	r27, 0x40	; 64
    1f08:	89 8f       	std	Y+25, r24	; 0x19
    1f0a:	9a 8f       	std	Y+26, r25	; 0x1a
    1f0c:	ab 8f       	std	Y+27, r26	; 0x1b
    1f0e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f10:	69 8d       	ldd	r22, Y+25	; 0x19
    1f12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	4a e7       	ldi	r20, 0x7A	; 122
    1f1e:	53 e4       	ldi	r21, 0x43	; 67
    1f20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	8d 8b       	std	Y+21, r24	; 0x15
    1f2a:	9e 8b       	std	Y+22, r25	; 0x16
    1f2c:	af 8b       	std	Y+23, r26	; 0x17
    1f2e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f30:	6d 89       	ldd	r22, Y+21	; 0x15
    1f32:	7e 89       	ldd	r23, Y+22	; 0x16
    1f34:	8f 89       	ldd	r24, Y+23	; 0x17
    1f36:	98 8d       	ldd	r25, Y+24	; 0x18
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	40 e8       	ldi	r20, 0x80	; 128
    1f3e:	5f e3       	ldi	r21, 0x3F	; 63
    1f40:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f44:	88 23       	and	r24, r24
    1f46:	2c f4       	brge	.+10     	; 0x1f52 <LCD_vidSendCommand+0x98>
		__ticks = 1;
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	9c 8b       	std	Y+20, r25	; 0x14
    1f4e:	8b 8b       	std	Y+19, r24	; 0x13
    1f50:	3f c0       	rjmp	.+126    	; 0x1fd0 <LCD_vidSendCommand+0x116>
	else if (__tmp > 65535)
    1f52:	6d 89       	ldd	r22, Y+21	; 0x15
    1f54:	7e 89       	ldd	r23, Y+22	; 0x16
    1f56:	8f 89       	ldd	r24, Y+23	; 0x17
    1f58:	98 8d       	ldd	r25, Y+24	; 0x18
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	3f ef       	ldi	r19, 0xFF	; 255
    1f5e:	4f e7       	ldi	r20, 0x7F	; 127
    1f60:	57 e4       	ldi	r21, 0x47	; 71
    1f62:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f66:	18 16       	cp	r1, r24
    1f68:	4c f5       	brge	.+82     	; 0x1fbc <LCD_vidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f6a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	40 e2       	ldi	r20, 0x20	; 32
    1f78:	51 e4       	ldi	r21, 0x41	; 65
    1f7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	bc 01       	movw	r22, r24
    1f84:	cd 01       	movw	r24, r26
    1f86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	9c 8b       	std	Y+20, r25	; 0x14
    1f90:	8b 8b       	std	Y+19, r24	; 0x13
    1f92:	0f c0       	rjmp	.+30     	; 0x1fb2 <LCD_vidSendCommand+0xf8>
    1f94:	89 e1       	ldi	r24, 0x19	; 25
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	9a 8b       	std	Y+18, r25	; 0x12
    1f9a:	89 8b       	std	Y+17, r24	; 0x11
    1f9c:	89 89       	ldd	r24, Y+17	; 0x11
    1f9e:	9a 89       	ldd	r25, Y+18	; 0x12
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	f1 f7       	brne	.-4      	; 0x1fa0 <LCD_vidSendCommand+0xe6>
    1fa4:	9a 8b       	std	Y+18, r25	; 0x12
    1fa6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa8:	8b 89       	ldd	r24, Y+19	; 0x13
    1faa:	9c 89       	ldd	r25, Y+20	; 0x14
    1fac:	01 97       	sbiw	r24, 0x01	; 1
    1fae:	9c 8b       	std	Y+20, r25	; 0x14
    1fb0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fb4:	9c 89       	ldd	r25, Y+20	; 0x14
    1fb6:	00 97       	sbiw	r24, 0x00	; 0
    1fb8:	69 f7       	brne	.-38     	; 0x1f94 <LCD_vidSendCommand+0xda>
    1fba:	14 c0       	rjmp	.+40     	; 0x1fe4 <LCD_vidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fbc:	6d 89       	ldd	r22, Y+21	; 0x15
    1fbe:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	9c 8b       	std	Y+20, r25	; 0x14
    1fce:	8b 8b       	std	Y+19, r24	; 0x13
    1fd0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd4:	98 8b       	std	Y+16, r25	; 0x10
    1fd6:	8f 87       	std	Y+15, r24	; 0x0f
    1fd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fda:	98 89       	ldd	r25, Y+16	; 0x10
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	f1 f7       	brne	.-4      	; 0x1fdc <LCD_vidSendCommand+0x122>
    1fe0:	98 8b       	std	Y+16, r25	; 0x10
    1fe2:	8f 87       	std	Y+15, r24	; 0x0f

	/* Wait for E to settle */
	_delay_ms(5);

	/* Set E to HIGH */
	DIO_SetPinValue(PORTC, 2, HIGH);
    1fe4:	82 e0       	ldi	r24, 0x02	; 2
    1fe6:	62 e0       	ldi	r22, 0x02	; 2
    1fe8:	41 e0       	ldi	r20, 0x01	; 1
    1fea:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_SetPinValue>
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	a0 e2       	ldi	r26, 0x20	; 32
    1ff4:	b1 e4       	ldi	r27, 0x41	; 65
    1ff6:	8b 87       	std	Y+11, r24	; 0x0b
    1ff8:	9c 87       	std	Y+12, r25	; 0x0c
    1ffa:	ad 87       	std	Y+13, r26	; 0x0d
    1ffc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2000:	7c 85       	ldd	r23, Y+12	; 0x0c
    2002:	8d 85       	ldd	r24, Y+13	; 0x0d
    2004:	9e 85       	ldd	r25, Y+14	; 0x0e
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	4a e7       	ldi	r20, 0x7A	; 122
    200c:	53 e4       	ldi	r21, 0x43	; 67
    200e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	8f 83       	std	Y+7, r24	; 0x07
    2018:	98 87       	std	Y+8, r25	; 0x08
    201a:	a9 87       	std	Y+9, r26	; 0x09
    201c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    201e:	6f 81       	ldd	r22, Y+7	; 0x07
    2020:	78 85       	ldd	r23, Y+8	; 0x08
    2022:	89 85       	ldd	r24, Y+9	; 0x09
    2024:	9a 85       	ldd	r25, Y+10	; 0x0a
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	40 e8       	ldi	r20, 0x80	; 128
    202c:	5f e3       	ldi	r21, 0x3F	; 63
    202e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2032:	88 23       	and	r24, r24
    2034:	2c f4       	brge	.+10     	; 0x2040 <LCD_vidSendCommand+0x186>
		__ticks = 1;
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	9e 83       	std	Y+6, r25	; 0x06
    203c:	8d 83       	std	Y+5, r24	; 0x05
    203e:	3f c0       	rjmp	.+126    	; 0x20be <LCD_vidSendCommand+0x204>
	else if (__tmp > 65535)
    2040:	6f 81       	ldd	r22, Y+7	; 0x07
    2042:	78 85       	ldd	r23, Y+8	; 0x08
    2044:	89 85       	ldd	r24, Y+9	; 0x09
    2046:	9a 85       	ldd	r25, Y+10	; 0x0a
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	3f ef       	ldi	r19, 0xFF	; 255
    204c:	4f e7       	ldi	r20, 0x7F	; 127
    204e:	57 e4       	ldi	r21, 0x47	; 71
    2050:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2054:	18 16       	cp	r1, r24
    2056:	4c f5       	brge	.+82     	; 0x20aa <LCD_vidSendCommand+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2058:	6b 85       	ldd	r22, Y+11	; 0x0b
    205a:	7c 85       	ldd	r23, Y+12	; 0x0c
    205c:	8d 85       	ldd	r24, Y+13	; 0x0d
    205e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e2       	ldi	r20, 0x20	; 32
    2066:	51 e4       	ldi	r21, 0x41	; 65
    2068:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	bc 01       	movw	r22, r24
    2072:	cd 01       	movw	r24, r26
    2074:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	9e 83       	std	Y+6, r25	; 0x06
    207e:	8d 83       	std	Y+5, r24	; 0x05
    2080:	0f c0       	rjmp	.+30     	; 0x20a0 <LCD_vidSendCommand+0x1e6>
    2082:	89 e1       	ldi	r24, 0x19	; 25
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	9c 83       	std	Y+4, r25	; 0x04
    2088:	8b 83       	std	Y+3, r24	; 0x03
    208a:	8b 81       	ldd	r24, Y+3	; 0x03
    208c:	9c 81       	ldd	r25, Y+4	; 0x04
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <LCD_vidSendCommand+0x1d4>
    2092:	9c 83       	std	Y+4, r25	; 0x04
    2094:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2096:	8d 81       	ldd	r24, Y+5	; 0x05
    2098:	9e 81       	ldd	r25, Y+6	; 0x06
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	9e 83       	std	Y+6, r25	; 0x06
    209e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a0:	8d 81       	ldd	r24, Y+5	; 0x05
    20a2:	9e 81       	ldd	r25, Y+6	; 0x06
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	69 f7       	brne	.-38     	; 0x2082 <LCD_vidSendCommand+0x1c8>
    20a8:	14 c0       	rjmp	.+40     	; 0x20d2 <LCD_vidSendCommand+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20aa:	6f 81       	ldd	r22, Y+7	; 0x07
    20ac:	78 85       	ldd	r23, Y+8	; 0x08
    20ae:	89 85       	ldd	r24, Y+9	; 0x09
    20b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	9e 83       	std	Y+6, r25	; 0x06
    20bc:	8d 83       	std	Y+5, r24	; 0x05
    20be:	8d 81       	ldd	r24, Y+5	; 0x05
    20c0:	9e 81       	ldd	r25, Y+6	; 0x06
    20c2:	9a 83       	std	Y+2, r25	; 0x02
    20c4:	89 83       	std	Y+1, r24	; 0x01
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <LCD_vidSendCommand+0x210>
    20ce:	9a 83       	std	Y+2, r25	; 0x02
    20d0:	89 83       	std	Y+1, r24	; 0x01

	/* Delay for 10ms to let the LCD execute command */
	_delay_ms(10);

}
    20d2:	6d 96       	adiw	r28, 0x1d	; 29
    20d4:	0f b6       	in	r0, 0x3f	; 63
    20d6:	f8 94       	cli
    20d8:	de bf       	out	0x3e, r29	; 62
    20da:	0f be       	out	0x3f, r0	; 63
    20dc:	cd bf       	out	0x3d, r28	; 61
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	08 95       	ret

000020e4 <LCD_vidWriteCharctr>:
/* Description! Interface to write character on LCD screen                             */
/* Input      ! Data to send                                                           */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_vidWriteCharctr(u8 u8DataCpy)
{
    20e4:	df 93       	push	r29
    20e6:	cf 93       	push	r28
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
    20ec:	6d 97       	sbiw	r28, 0x1d	; 29
    20ee:	0f b6       	in	r0, 0x3f	; 63
    20f0:	f8 94       	cli
    20f2:	de bf       	out	0x3e, r29	; 62
    20f4:	0f be       	out	0x3f, r0	; 63
    20f6:	cd bf       	out	0x3d, r28	; 61
    20f8:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Set RS to HIG */
	DIO_SetPinValue(PORTC, 0, HIGH);
    20fa:	82 e0       	ldi	r24, 0x02	; 2
    20fc:	60 e0       	ldi	r22, 0x00	; 0
    20fe:	41 e0       	ldi	r20, 0x01	; 1
    2100:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_SetPinValue>

	/* Set R/W to LOW */
	DIO_SetPinValue(PORTC, 1, LOW);
    2104:	82 e0       	ldi	r24, 0x02	; 2
    2106:	61 e0       	ldi	r22, 0x01	; 1
    2108:	40 e0       	ldi	r20, 0x00	; 0
    210a:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_SetPinValue>

	/* Set E to HIGH */
	DIO_SetPinValue(PORTC, 2, HIGH);
    210e:	82 e0       	ldi	r24, 0x02	; 2
    2110:	62 e0       	ldi	r22, 0x02	; 2
    2112:	41 e0       	ldi	r20, 0x01	; 1
    2114:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_SetPinValue>

	/* Load Command on Data bus */
	DIO_SetPortValue(PORTD, u8DataCpy);
    2118:	83 e0       	ldi	r24, 0x03	; 3
    211a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    211c:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <DIO_SetPortValue>

	/* Set E to LOW */
	DIO_SetPinValue(PORTC, 2, LOW);
    2120:	82 e0       	ldi	r24, 0x02	; 2
    2122:	62 e0       	ldi	r22, 0x02	; 2
    2124:	40 e0       	ldi	r20, 0x00	; 0
    2126:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_SetPinValue>
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	a0 ea       	ldi	r26, 0xA0	; 160
    2130:	b0 e4       	ldi	r27, 0x40	; 64
    2132:	89 8f       	std	Y+25, r24	; 0x19
    2134:	9a 8f       	std	Y+26, r25	; 0x1a
    2136:	ab 8f       	std	Y+27, r26	; 0x1b
    2138:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213a:	69 8d       	ldd	r22, Y+25	; 0x19
    213c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    213e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2140:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	4a e7       	ldi	r20, 0x7A	; 122
    2148:	53 e4       	ldi	r21, 0x43	; 67
    214a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	8d 8b       	std	Y+21, r24	; 0x15
    2154:	9e 8b       	std	Y+22, r25	; 0x16
    2156:	af 8b       	std	Y+23, r26	; 0x17
    2158:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    215a:	6d 89       	ldd	r22, Y+21	; 0x15
    215c:	7e 89       	ldd	r23, Y+22	; 0x16
    215e:	8f 89       	ldd	r24, Y+23	; 0x17
    2160:	98 8d       	ldd	r25, Y+24	; 0x18
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e8       	ldi	r20, 0x80	; 128
    2168:	5f e3       	ldi	r21, 0x3F	; 63
    216a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    216e:	88 23       	and	r24, r24
    2170:	2c f4       	brge	.+10     	; 0x217c <LCD_vidWriteCharctr+0x98>
		__ticks = 1;
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	9c 8b       	std	Y+20, r25	; 0x14
    2178:	8b 8b       	std	Y+19, r24	; 0x13
    217a:	3f c0       	rjmp	.+126    	; 0x21fa <LCD_vidWriteCharctr+0x116>
	else if (__tmp > 65535)
    217c:	6d 89       	ldd	r22, Y+21	; 0x15
    217e:	7e 89       	ldd	r23, Y+22	; 0x16
    2180:	8f 89       	ldd	r24, Y+23	; 0x17
    2182:	98 8d       	ldd	r25, Y+24	; 0x18
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	3f ef       	ldi	r19, 0xFF	; 255
    2188:	4f e7       	ldi	r20, 0x7F	; 127
    218a:	57 e4       	ldi	r21, 0x47	; 71
    218c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2190:	18 16       	cp	r1, r24
    2192:	4c f5       	brge	.+82     	; 0x21e6 <LCD_vidWriteCharctr+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2194:	69 8d       	ldd	r22, Y+25	; 0x19
    2196:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2198:	8b 8d       	ldd	r24, Y+27	; 0x1b
    219a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e2       	ldi	r20, 0x20	; 32
    21a2:	51 e4       	ldi	r21, 0x41	; 65
    21a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	bc 01       	movw	r22, r24
    21ae:	cd 01       	movw	r24, r26
    21b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	9c 8b       	std	Y+20, r25	; 0x14
    21ba:	8b 8b       	std	Y+19, r24	; 0x13
    21bc:	0f c0       	rjmp	.+30     	; 0x21dc <LCD_vidWriteCharctr+0xf8>
    21be:	89 e1       	ldi	r24, 0x19	; 25
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	9a 8b       	std	Y+18, r25	; 0x12
    21c4:	89 8b       	std	Y+17, r24	; 0x11
    21c6:	89 89       	ldd	r24, Y+17	; 0x11
    21c8:	9a 89       	ldd	r25, Y+18	; 0x12
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	f1 f7       	brne	.-4      	; 0x21ca <LCD_vidWriteCharctr+0xe6>
    21ce:	9a 8b       	std	Y+18, r25	; 0x12
    21d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d2:	8b 89       	ldd	r24, Y+19	; 0x13
    21d4:	9c 89       	ldd	r25, Y+20	; 0x14
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	9c 8b       	std	Y+20, r25	; 0x14
    21da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21dc:	8b 89       	ldd	r24, Y+19	; 0x13
    21de:	9c 89       	ldd	r25, Y+20	; 0x14
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	69 f7       	brne	.-38     	; 0x21be <LCD_vidWriteCharctr+0xda>
    21e4:	14 c0       	rjmp	.+40     	; 0x220e <LCD_vidWriteCharctr+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e6:	6d 89       	ldd	r22, Y+21	; 0x15
    21e8:	7e 89       	ldd	r23, Y+22	; 0x16
    21ea:	8f 89       	ldd	r24, Y+23	; 0x17
    21ec:	98 8d       	ldd	r25, Y+24	; 0x18
    21ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	9c 8b       	std	Y+20, r25	; 0x14
    21f8:	8b 8b       	std	Y+19, r24	; 0x13
    21fa:	8b 89       	ldd	r24, Y+19	; 0x13
    21fc:	9c 89       	ldd	r25, Y+20	; 0x14
    21fe:	98 8b       	std	Y+16, r25	; 0x10
    2200:	8f 87       	std	Y+15, r24	; 0x0f
    2202:	8f 85       	ldd	r24, Y+15	; 0x0f
    2204:	98 89       	ldd	r25, Y+16	; 0x10
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	f1 f7       	brne	.-4      	; 0x2206 <LCD_vidWriteCharctr+0x122>
    220a:	98 8b       	std	Y+16, r25	; 0x10
    220c:	8f 87       	std	Y+15, r24	; 0x0f

	/* Wait for E to settle */
	_delay_ms(5);

	/* Set E to HIGH */
	DIO_SetPinValue(PORTC, 2, HIGH);
    220e:	82 e0       	ldi	r24, 0x02	; 2
    2210:	62 e0       	ldi	r22, 0x02	; 2
    2212:	41 e0       	ldi	r20, 0x01	; 1
    2214:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_SetPinValue>
    2218:	80 e0       	ldi	r24, 0x00	; 0
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	a0 e2       	ldi	r26, 0x20	; 32
    221e:	b1 e4       	ldi	r27, 0x41	; 65
    2220:	8b 87       	std	Y+11, r24	; 0x0b
    2222:	9c 87       	std	Y+12, r25	; 0x0c
    2224:	ad 87       	std	Y+13, r26	; 0x0d
    2226:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2228:	6b 85       	ldd	r22, Y+11	; 0x0b
    222a:	7c 85       	ldd	r23, Y+12	; 0x0c
    222c:	8d 85       	ldd	r24, Y+13	; 0x0d
    222e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	4a e7       	ldi	r20, 0x7A	; 122
    2236:	53 e4       	ldi	r21, 0x43	; 67
    2238:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	8f 83       	std	Y+7, r24	; 0x07
    2242:	98 87       	std	Y+8, r25	; 0x08
    2244:	a9 87       	std	Y+9, r26	; 0x09
    2246:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2248:	6f 81       	ldd	r22, Y+7	; 0x07
    224a:	78 85       	ldd	r23, Y+8	; 0x08
    224c:	89 85       	ldd	r24, Y+9	; 0x09
    224e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	40 e8       	ldi	r20, 0x80	; 128
    2256:	5f e3       	ldi	r21, 0x3F	; 63
    2258:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    225c:	88 23       	and	r24, r24
    225e:	2c f4       	brge	.+10     	; 0x226a <LCD_vidWriteCharctr+0x186>
		__ticks = 1;
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	9e 83       	std	Y+6, r25	; 0x06
    2266:	8d 83       	std	Y+5, r24	; 0x05
    2268:	3f c0       	rjmp	.+126    	; 0x22e8 <LCD_vidWriteCharctr+0x204>
	else if (__tmp > 65535)
    226a:	6f 81       	ldd	r22, Y+7	; 0x07
    226c:	78 85       	ldd	r23, Y+8	; 0x08
    226e:	89 85       	ldd	r24, Y+9	; 0x09
    2270:	9a 85       	ldd	r25, Y+10	; 0x0a
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	3f ef       	ldi	r19, 0xFF	; 255
    2276:	4f e7       	ldi	r20, 0x7F	; 127
    2278:	57 e4       	ldi	r21, 0x47	; 71
    227a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    227e:	18 16       	cp	r1, r24
    2280:	4c f5       	brge	.+82     	; 0x22d4 <LCD_vidWriteCharctr+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2282:	6b 85       	ldd	r22, Y+11	; 0x0b
    2284:	7c 85       	ldd	r23, Y+12	; 0x0c
    2286:	8d 85       	ldd	r24, Y+13	; 0x0d
    2288:	9e 85       	ldd	r25, Y+14	; 0x0e
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	40 e2       	ldi	r20, 0x20	; 32
    2290:	51 e4       	ldi	r21, 0x41	; 65
    2292:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	bc 01       	movw	r22, r24
    229c:	cd 01       	movw	r24, r26
    229e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	9e 83       	std	Y+6, r25	; 0x06
    22a8:	8d 83       	std	Y+5, r24	; 0x05
    22aa:	0f c0       	rjmp	.+30     	; 0x22ca <LCD_vidWriteCharctr+0x1e6>
    22ac:	89 e1       	ldi	r24, 0x19	; 25
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	9c 83       	std	Y+4, r25	; 0x04
    22b2:	8b 83       	std	Y+3, r24	; 0x03
    22b4:	8b 81       	ldd	r24, Y+3	; 0x03
    22b6:	9c 81       	ldd	r25, Y+4	; 0x04
    22b8:	01 97       	sbiw	r24, 0x01	; 1
    22ba:	f1 f7       	brne	.-4      	; 0x22b8 <LCD_vidWriteCharctr+0x1d4>
    22bc:	9c 83       	std	Y+4, r25	; 0x04
    22be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c0:	8d 81       	ldd	r24, Y+5	; 0x05
    22c2:	9e 81       	ldd	r25, Y+6	; 0x06
    22c4:	01 97       	sbiw	r24, 0x01	; 1
    22c6:	9e 83       	std	Y+6, r25	; 0x06
    22c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ca:	8d 81       	ldd	r24, Y+5	; 0x05
    22cc:	9e 81       	ldd	r25, Y+6	; 0x06
    22ce:	00 97       	sbiw	r24, 0x00	; 0
    22d0:	69 f7       	brne	.-38     	; 0x22ac <LCD_vidWriteCharctr+0x1c8>
    22d2:	14 c0       	rjmp	.+40     	; 0x22fc <LCD_vidWriteCharctr+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d4:	6f 81       	ldd	r22, Y+7	; 0x07
    22d6:	78 85       	ldd	r23, Y+8	; 0x08
    22d8:	89 85       	ldd	r24, Y+9	; 0x09
    22da:	9a 85       	ldd	r25, Y+10	; 0x0a
    22dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	9e 83       	std	Y+6, r25	; 0x06
    22e6:	8d 83       	std	Y+5, r24	; 0x05
    22e8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ea:	9e 81       	ldd	r25, Y+6	; 0x06
    22ec:	9a 83       	std	Y+2, r25	; 0x02
    22ee:	89 83       	std	Y+1, r24	; 0x01
    22f0:	89 81       	ldd	r24, Y+1	; 0x01
    22f2:	9a 81       	ldd	r25, Y+2	; 0x02
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	f1 f7       	brne	.-4      	; 0x22f4 <LCD_vidWriteCharctr+0x210>
    22f8:	9a 83       	std	Y+2, r25	; 0x02
    22fa:	89 83       	std	Y+1, r24	; 0x01

	/* Delay to let the LCD Display the character */
	_delay_ms(10);

}
    22fc:	6d 96       	adiw	r28, 0x1d	; 29
    22fe:	0f b6       	in	r0, 0x3f	; 63
    2300:	f8 94       	cli
    2302:	de bf       	out	0x3e, r29	; 62
    2304:	0f be       	out	0x3f, r0	; 63
    2306:	cd bf       	out	0x3d, r28	; 61
    2308:	cf 91       	pop	r28
    230a:	df 91       	pop	r29
    230c:	08 95       	ret

0000230e <LCD_String_xy>:
/* Description! Interface to write string on LCD screen                                */
/* Input      ! Pointer to the string                                                  */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD function */
{
    230e:	df 93       	push	r29
    2310:	cf 93       	push	r28
    2312:	00 d0       	rcall	.+0      	; 0x2314 <LCD_String_xy+0x6>
    2314:	00 d0       	rcall	.+0      	; 0x2316 <LCD_String_xy+0x8>
    2316:	cd b7       	in	r28, 0x3d	; 61
    2318:	de b7       	in	r29, 0x3e	; 62
    231a:	89 83       	std	Y+1, r24	; 0x01
    231c:	6a 83       	std	Y+2, r22	; 0x02
    231e:	5c 83       	std	Y+4, r21	; 0x04
    2320:	4b 83       	std	Y+3, r20	; 0x03
	if (row == 1)
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	81 30       	cpi	r24, 0x01	; 1
    2326:	31 f4       	brne	.+12     	; 0x2334 <LCD_String_xy+0x26>
		LCD_vidSendCommand((pos & 0x0F)|0x80);				/* Command of first row and required position<16 */
    2328:	8a 81       	ldd	r24, Y+2	; 0x02
    232a:	8f 70       	andi	r24, 0x0F	; 15
    232c:	80 68       	ori	r24, 0x80	; 128
    232e:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_vidSendCommand>
    2332:	08 c0       	rjmp	.+16     	; 0x2344 <LCD_String_xy+0x36>
	else if (row == 2)
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	82 30       	cpi	r24, 0x02	; 2
    2338:	29 f4       	brne	.+10     	; 0x2344 <LCD_String_xy+0x36>
		LCD_vidSendCommand((pos & 0x0F)|0xC0);				/* Command of Second row and required position<16 */
    233a:	8a 81       	ldd	r24, Y+2	; 0x02
    233c:	8f 70       	andi	r24, 0x0F	; 15
    233e:	80 6c       	ori	r24, 0xC0	; 192
    2340:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_vidSendCommand>
	LCD_String(str);								/* Call LCD string function */
    2344:	8b 81       	ldd	r24, Y+3	; 0x03
    2346:	9c 81       	ldd	r25, Y+4	; 0x04
    2348:	0e 94 ad 11 	call	0x235a	; 0x235a <LCD_String>
}
    234c:	0f 90       	pop	r0
    234e:	0f 90       	pop	r0
    2350:	0f 90       	pop	r0
    2352:	0f 90       	pop	r0
    2354:	cf 91       	pop	r28
    2356:	df 91       	pop	r29
    2358:	08 95       	ret

0000235a <LCD_String>:

void LCD_String (char *str)							/* Send string to LCD function */
{
    235a:	df 93       	push	r29
    235c:	cf 93       	push	r28
    235e:	00 d0       	rcall	.+0      	; 0x2360 <LCD_String+0x6>
    2360:	00 d0       	rcall	.+0      	; 0x2362 <LCD_String+0x8>
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	9c 83       	std	Y+4, r25	; 0x04
    2368:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
    236a:	1a 82       	std	Y+2, r1	; 0x02
    236c:	19 82       	std	Y+1, r1	; 0x01
    236e:	0f c0       	rjmp	.+30     	; 0x238e <LCD_String+0x34>
	{
		LCD_vidWriteCharctr(str[i]);							/* Call LCD data write */
    2370:	29 81       	ldd	r18, Y+1	; 0x01
    2372:	3a 81       	ldd	r19, Y+2	; 0x02
    2374:	8b 81       	ldd	r24, Y+3	; 0x03
    2376:	9c 81       	ldd	r25, Y+4	; 0x04
    2378:	fc 01       	movw	r30, r24
    237a:	e2 0f       	add	r30, r18
    237c:	f3 1f       	adc	r31, r19
    237e:	80 81       	ld	r24, Z
    2380:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_vidWriteCharctr>
}

void LCD_String (char *str)							/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
    2384:	89 81       	ldd	r24, Y+1	; 0x01
    2386:	9a 81       	ldd	r25, Y+2	; 0x02
    2388:	01 96       	adiw	r24, 0x01	; 1
    238a:	9a 83       	std	Y+2, r25	; 0x02
    238c:	89 83       	std	Y+1, r24	; 0x01
    238e:	29 81       	ldd	r18, Y+1	; 0x01
    2390:	3a 81       	ldd	r19, Y+2	; 0x02
    2392:	8b 81       	ldd	r24, Y+3	; 0x03
    2394:	9c 81       	ldd	r25, Y+4	; 0x04
    2396:	fc 01       	movw	r30, r24
    2398:	e2 0f       	add	r30, r18
    239a:	f3 1f       	adc	r31, r19
    239c:	80 81       	ld	r24, Z
    239e:	88 23       	and	r24, r24
    23a0:	39 f7       	brne	.-50     	; 0x2370 <LCD_String+0x16>
	{
		LCD_vidWriteCharctr(str[i]);							/* Call LCD data write */
	}
}
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	0f 90       	pop	r0
    23a8:	0f 90       	pop	r0
    23aa:	cf 91       	pop	r28
    23ac:	df 91       	pop	r29
    23ae:	08 95       	ret

000023b0 <LCD_vidWriteExtraChar>:
/* Description! Interface to write extra characters saved in the CGRAM                 */
/* Input      ! Y = Row position , X = Column position                                 */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_vidWriteExtraChar (u8 Y,u8 X,u8* ExtraChar,u8* Index)
{
    23b0:	df 93       	push	r29
    23b2:	cf 93       	push	r28
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
    23b8:	66 97       	sbiw	r28, 0x16	; 22
    23ba:	0f b6       	in	r0, 0x3f	; 63
    23bc:	f8 94       	cli
    23be:	de bf       	out	0x3e, r29	; 62
    23c0:	0f be       	out	0x3f, r0	; 63
    23c2:	cd bf       	out	0x3d, r28	; 61
    23c4:	89 8b       	std	Y+17, r24	; 0x11
    23c6:	6a 8b       	std	Y+18, r22	; 0x12
    23c8:	5c 8b       	std	Y+20, r21	; 0x14
    23ca:	4b 8b       	std	Y+19, r20	; 0x13
    23cc:	3e 8b       	std	Y+22, r19	; 0x16
    23ce:	2d 8b       	std	Y+21, r18	; 0x15


    u8 iteration1,iteration2;

    /*DDRAM-->CGRAM*/
    LCD_vidSendCommand(64);
    23d0:	80 e4       	ldi	r24, 0x40	; 64
    23d2:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_vidSendCommand>
	for(iteration1=0 ; iteration1<Index ; iteration1++)
    23d6:	18 8a       	std	Y+16, r1	; 0x10
    23d8:	0e c0       	rjmp	.+28     	; 0x23f6 <LCD_vidWriteExtraChar+0x46>
	{
		LCD_vidWriteCharctr(ExtraChar[iteration1]);
    23da:	88 89       	ldd	r24, Y+16	; 0x10
    23dc:	28 2f       	mov	r18, r24
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	8b 89       	ldd	r24, Y+19	; 0x13
    23e2:	9c 89       	ldd	r25, Y+20	; 0x14
    23e4:	fc 01       	movw	r30, r24
    23e6:	e2 0f       	add	r30, r18
    23e8:	f3 1f       	adc	r31, r19
    23ea:	80 81       	ld	r24, Z
    23ec:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_vidWriteCharctr>

    u8 iteration1,iteration2;

    /*DDRAM-->CGRAM*/
    LCD_vidSendCommand(64);
	for(iteration1=0 ; iteration1<Index ; iteration1++)
    23f0:	88 89       	ldd	r24, Y+16	; 0x10
    23f2:	8f 5f       	subi	r24, 0xFF	; 255
    23f4:	88 8b       	std	Y+16, r24	; 0x10
    23f6:	88 89       	ldd	r24, Y+16	; 0x10
    23f8:	88 2f       	mov	r24, r24
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	9c 01       	movw	r18, r24
    23fe:	8d 89       	ldd	r24, Y+21	; 0x15
    2400:	9e 89       	ldd	r25, Y+22	; 0x16
    2402:	28 17       	cp	r18, r24
    2404:	39 07       	cpc	r19, r25
    2406:	48 f3       	brcs	.-46     	; 0x23da <LCD_vidWriteExtraChar+0x2a>
	{
		LCD_vidWriteCharctr(ExtraChar[iteration1]);
	}
	/*CGRAM-->DDRAM*/
	LCD_vidSendCommand(128);
    2408:	80 e8       	ldi	r24, 0x80	; 128
    240a:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_vidSendCommand>
	Gotoxy(Y,X);
    240e:	89 89       	ldd	r24, Y+17	; 0x11
    2410:	6a 89       	ldd	r22, Y+18	; 0x12
    2412:	0e 94 92 12 	call	0x2524	; 0x2524 <Gotoxy>
	/*First eight character which saved at CGRAM*/
	for (iteration2=0; iteration2<=7 ; iteration2++)
    2416:	1f 86       	std	Y+15, r1	; 0x0f
    2418:	78 c0       	rjmp	.+240    	; 0x250a <LCD_vidWriteExtraChar+0x15a>
	{
		/* Write bytes of DDRAM */
		LCD_vidWriteCharctr(iteration2);
    241a:	8f 85       	ldd	r24, Y+15	; 0x0f
    241c:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_vidWriteCharctr>
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	a0 ea       	ldi	r26, 0xA0	; 160
    2426:	b0 e4       	ldi	r27, 0x40	; 64
    2428:	8b 87       	std	Y+11, r24	; 0x0b
    242a:	9c 87       	std	Y+12, r25	; 0x0c
    242c:	ad 87       	std	Y+13, r26	; 0x0d
    242e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2430:	6b 85       	ldd	r22, Y+11	; 0x0b
    2432:	7c 85       	ldd	r23, Y+12	; 0x0c
    2434:	8d 85       	ldd	r24, Y+13	; 0x0d
    2436:	9e 85       	ldd	r25, Y+14	; 0x0e
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	4a e7       	ldi	r20, 0x7A	; 122
    243e:	53 e4       	ldi	r21, 0x43	; 67
    2440:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2444:	dc 01       	movw	r26, r24
    2446:	cb 01       	movw	r24, r22
    2448:	8f 83       	std	Y+7, r24	; 0x07
    244a:	98 87       	std	Y+8, r25	; 0x08
    244c:	a9 87       	std	Y+9, r26	; 0x09
    244e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2450:	6f 81       	ldd	r22, Y+7	; 0x07
    2452:	78 85       	ldd	r23, Y+8	; 0x08
    2454:	89 85       	ldd	r24, Y+9	; 0x09
    2456:	9a 85       	ldd	r25, Y+10	; 0x0a
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	40 e8       	ldi	r20, 0x80	; 128
    245e:	5f e3       	ldi	r21, 0x3F	; 63
    2460:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2464:	88 23       	and	r24, r24
    2466:	2c f4       	brge	.+10     	; 0x2472 <LCD_vidWriteExtraChar+0xc2>
		__ticks = 1;
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	9e 83       	std	Y+6, r25	; 0x06
    246e:	8d 83       	std	Y+5, r24	; 0x05
    2470:	3f c0       	rjmp	.+126    	; 0x24f0 <LCD_vidWriteExtraChar+0x140>
	else if (__tmp > 65535)
    2472:	6f 81       	ldd	r22, Y+7	; 0x07
    2474:	78 85       	ldd	r23, Y+8	; 0x08
    2476:	89 85       	ldd	r24, Y+9	; 0x09
    2478:	9a 85       	ldd	r25, Y+10	; 0x0a
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	3f ef       	ldi	r19, 0xFF	; 255
    247e:	4f e7       	ldi	r20, 0x7F	; 127
    2480:	57 e4       	ldi	r21, 0x47	; 71
    2482:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2486:	18 16       	cp	r1, r24
    2488:	4c f5       	brge	.+82     	; 0x24dc <LCD_vidWriteExtraChar+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    248a:	6b 85       	ldd	r22, Y+11	; 0x0b
    248c:	7c 85       	ldd	r23, Y+12	; 0x0c
    248e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2490:	9e 85       	ldd	r25, Y+14	; 0x0e
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	40 e2       	ldi	r20, 0x20	; 32
    2498:	51 e4       	ldi	r21, 0x41	; 65
    249a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	bc 01       	movw	r22, r24
    24a4:	cd 01       	movw	r24, r26
    24a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24aa:	dc 01       	movw	r26, r24
    24ac:	cb 01       	movw	r24, r22
    24ae:	9e 83       	std	Y+6, r25	; 0x06
    24b0:	8d 83       	std	Y+5, r24	; 0x05
    24b2:	0f c0       	rjmp	.+30     	; 0x24d2 <LCD_vidWriteExtraChar+0x122>
    24b4:	89 e1       	ldi	r24, 0x19	; 25
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	9c 83       	std	Y+4, r25	; 0x04
    24ba:	8b 83       	std	Y+3, r24	; 0x03
    24bc:	8b 81       	ldd	r24, Y+3	; 0x03
    24be:	9c 81       	ldd	r25, Y+4	; 0x04
    24c0:	01 97       	sbiw	r24, 0x01	; 1
    24c2:	f1 f7       	brne	.-4      	; 0x24c0 <LCD_vidWriteExtraChar+0x110>
    24c4:	9c 83       	std	Y+4, r25	; 0x04
    24c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ca:	9e 81       	ldd	r25, Y+6	; 0x06
    24cc:	01 97       	sbiw	r24, 0x01	; 1
    24ce:	9e 83       	std	Y+6, r25	; 0x06
    24d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d2:	8d 81       	ldd	r24, Y+5	; 0x05
    24d4:	9e 81       	ldd	r25, Y+6	; 0x06
    24d6:	00 97       	sbiw	r24, 0x00	; 0
    24d8:	69 f7       	brne	.-38     	; 0x24b4 <LCD_vidWriteExtraChar+0x104>
    24da:	14 c0       	rjmp	.+40     	; 0x2504 <LCD_vidWriteExtraChar+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24dc:	6f 81       	ldd	r22, Y+7	; 0x07
    24de:	78 85       	ldd	r23, Y+8	; 0x08
    24e0:	89 85       	ldd	r24, Y+9	; 0x09
    24e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	9e 83       	std	Y+6, r25	; 0x06
    24ee:	8d 83       	std	Y+5, r24	; 0x05
    24f0:	8d 81       	ldd	r24, Y+5	; 0x05
    24f2:	9e 81       	ldd	r25, Y+6	; 0x06
    24f4:	9a 83       	std	Y+2, r25	; 0x02
    24f6:	89 83       	std	Y+1, r24	; 0x01
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
    24fa:	9a 81       	ldd	r25, Y+2	; 0x02
    24fc:	01 97       	sbiw	r24, 0x01	; 1
    24fe:	f1 f7       	brne	.-4      	; 0x24fc <LCD_vidWriteExtraChar+0x14c>
    2500:	9a 83       	std	Y+2, r25	; 0x02
    2502:	89 83       	std	Y+1, r24	; 0x01
	}
	/*CGRAM-->DDRAM*/
	LCD_vidSendCommand(128);
	Gotoxy(Y,X);
	/*First eight character which saved at CGRAM*/
	for (iteration2=0; iteration2<=7 ; iteration2++)
    2504:	8f 85       	ldd	r24, Y+15	; 0x0f
    2506:	8f 5f       	subi	r24, 0xFF	; 255
    2508:	8f 87       	std	Y+15, r24	; 0x0f
    250a:	8f 85       	ldd	r24, Y+15	; 0x0f
    250c:	88 30       	cpi	r24, 0x08	; 8
    250e:	08 f4       	brcc	.+2      	; 0x2512 <LCD_vidWriteExtraChar+0x162>
    2510:	84 cf       	rjmp	.-248    	; 0x241a <LCD_vidWriteExtraChar+0x6a>
		/* Write bytes of DDRAM */
		LCD_vidWriteCharctr(iteration2);

		_delay_ms(5);
	}
}
    2512:	66 96       	adiw	r28, 0x16	; 22
    2514:	0f b6       	in	r0, 0x3f	; 63
    2516:	f8 94       	cli
    2518:	de bf       	out	0x3e, r29	; 62
    251a:	0f be       	out	0x3f, r0	; 63
    251c:	cd bf       	out	0x3d, r28	; 61
    251e:	cf 91       	pop	r28
    2520:	df 91       	pop	r29
    2522:	08 95       	ret

00002524 <Gotoxy>:

void Gotoxy (u8 Y,u8 X)
{
    2524:	df 93       	push	r29
    2526:	cf 93       	push	r28
    2528:	00 d0       	rcall	.+0      	; 0x252a <Gotoxy+0x6>
    252a:	00 d0       	rcall	.+0      	; 0x252c <Gotoxy+0x8>
    252c:	cd b7       	in	r28, 0x3d	; 61
    252e:	de b7       	in	r29, 0x3e	; 62
    2530:	89 83       	std	Y+1, r24	; 0x01
    2532:	6a 83       	std	Y+2, r22	; 0x02
	if (X>0 && X<=16)
    2534:	8a 81       	ldd	r24, Y+2	; 0x02
    2536:	88 23       	and	r24, r24
    2538:	e1 f0       	breq	.+56     	; 0x2572 <Gotoxy+0x4e>
    253a:	8a 81       	ldd	r24, Y+2	; 0x02
    253c:	81 31       	cpi	r24, 0x11	; 17
    253e:	c8 f4       	brcc	.+50     	; 0x2572 <Gotoxy+0x4e>
	{
	    switch(Y)
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	28 2f       	mov	r18, r24
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	3c 83       	std	Y+4, r19	; 0x04
    2548:	2b 83       	std	Y+3, r18	; 0x03
    254a:	8b 81       	ldd	r24, Y+3	; 0x03
    254c:	9c 81       	ldd	r25, Y+4	; 0x04
    254e:	81 30       	cpi	r24, 0x01	; 1
    2550:	91 05       	cpc	r25, r1
    2552:	31 f0       	breq	.+12     	; 0x2560 <Gotoxy+0x3c>
    2554:	2b 81       	ldd	r18, Y+3	; 0x03
    2556:	3c 81       	ldd	r19, Y+4	; 0x04
    2558:	22 30       	cpi	r18, 0x02	; 2
    255a:	31 05       	cpc	r19, r1
    255c:	31 f0       	breq	.+12     	; 0x256a <Gotoxy+0x46>
    255e:	09 c0       	rjmp	.+18     	; 0x2572 <Gotoxy+0x4e>
	    {
		    case 1:
		    	LCD_vidSendCommand(X+127);
    2560:	8a 81       	ldd	r24, Y+2	; 0x02
    2562:	81 58       	subi	r24, 0x81	; 129
    2564:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_vidSendCommand>
    2568:	04 c0       	rjmp	.+8      	; 0x2572 <Gotoxy+0x4e>
		    break;
		    case 2:
		    	LCD_vidSendCommand(X+191);
    256a:	8a 81       	ldd	r24, Y+2	; 0x02
    256c:	81 54       	subi	r24, 0x41	; 65
    256e:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_vidSendCommand>
		    break;
		    default:
		    break;
	    }
	}
}
    2572:	0f 90       	pop	r0
    2574:	0f 90       	pop	r0
    2576:	0f 90       	pop	r0
    2578:	0f 90       	pop	r0
    257a:	cf 91       	pop	r28
    257c:	df 91       	pop	r29
    257e:	08 95       	ret

00002580 <lcd_writenumber>:

void lcd_writenumber(int num)
{
    2580:	df 93       	push	r29
    2582:	cf 93       	push	r28
    2584:	cd b7       	in	r28, 0x3d	; 61
    2586:	de b7       	in	r29, 0x3e	; 62
    2588:	28 97       	sbiw	r28, 0x08	; 8
    258a:	0f b6       	in	r0, 0x3f	; 63
    258c:	f8 94       	cli
    258e:	de bf       	out	0x3e, r29	; 62
    2590:	0f be       	out	0x3f, r0	; 63
    2592:	cd bf       	out	0x3d, r28	; 61
    2594:	98 87       	std	Y+8, r25	; 0x08
    2596:	8f 83       	std	Y+7, r24	; 0x07
	int temp=1;
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	9e 83       	std	Y+6, r25	; 0x06
    259e:	8d 83       	std	Y+5, r24	; 0x05
	int rem;
	int rem2;
	if(num==0)
    25a0:	8f 81       	ldd	r24, Y+7	; 0x07
    25a2:	98 85       	ldd	r25, Y+8	; 0x08
    25a4:	00 97       	sbiw	r24, 0x00	; 0
    25a6:	49 f5       	brne	.+82     	; 0x25fa <lcd_writenumber+0x7a>
	{
		LCD_vidWriteCharctr(48);
    25a8:	80 e3       	ldi	r24, 0x30	; 48
    25aa:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_vidWriteCharctr>
    25ae:	25 c0       	rjmp	.+74     	; 0x25fa <lcd_writenumber+0x7a>
	}
	while(num!=0)
	{
		rem=num%10;
    25b0:	8f 81       	ldd	r24, Y+7	; 0x07
    25b2:	98 85       	ldd	r25, Y+8	; 0x08
    25b4:	2a e0       	ldi	r18, 0x0A	; 10
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	b9 01       	movw	r22, r18
    25ba:	0e 94 b4 14 	call	0x2968	; 0x2968 <__divmodhi4>
    25be:	9c 83       	std	Y+4, r25	; 0x04
    25c0:	8b 83       	std	Y+3, r24	; 0x03
		num/=10;
    25c2:	8f 81       	ldd	r24, Y+7	; 0x07
    25c4:	98 85       	ldd	r25, Y+8	; 0x08
    25c6:	2a e0       	ldi	r18, 0x0A	; 10
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	b9 01       	movw	r22, r18
    25cc:	0e 94 b4 14 	call	0x2968	; 0x2968 <__divmodhi4>
    25d0:	cb 01       	movw	r24, r22
    25d2:	98 87       	std	Y+8, r25	; 0x08
    25d4:	8f 83       	std	Y+7, r24	; 0x07
		temp=temp*10+rem;
    25d6:	8d 81       	ldd	r24, Y+5	; 0x05
    25d8:	9e 81       	ldd	r25, Y+6	; 0x06
    25da:	9c 01       	movw	r18, r24
    25dc:	22 0f       	add	r18, r18
    25de:	33 1f       	adc	r19, r19
    25e0:	c9 01       	movw	r24, r18
    25e2:	88 0f       	add	r24, r24
    25e4:	99 1f       	adc	r25, r25
    25e6:	88 0f       	add	r24, r24
    25e8:	99 1f       	adc	r25, r25
    25ea:	28 0f       	add	r18, r24
    25ec:	39 1f       	adc	r19, r25
    25ee:	8b 81       	ldd	r24, Y+3	; 0x03
    25f0:	9c 81       	ldd	r25, Y+4	; 0x04
    25f2:	82 0f       	add	r24, r18
    25f4:	93 1f       	adc	r25, r19
    25f6:	9e 83       	std	Y+6, r25	; 0x06
    25f8:	8d 83       	std	Y+5, r24	; 0x05
	int rem2;
	if(num==0)
	{
		LCD_vidWriteCharctr(48);
	}
	while(num!=0)
    25fa:	8f 81       	ldd	r24, Y+7	; 0x07
    25fc:	98 85       	ldd	r25, Y+8	; 0x08
    25fe:	00 97       	sbiw	r24, 0x00	; 0
    2600:	b9 f6       	brne	.-82     	; 0x25b0 <lcd_writenumber+0x30>
    2602:	17 c0       	rjmp	.+46     	; 0x2632 <lcd_writenumber+0xb2>
		num/=10;
		temp=temp*10+rem;
	}
	while(temp!=1)
	{
		rem2=temp%10;
    2604:	8d 81       	ldd	r24, Y+5	; 0x05
    2606:	9e 81       	ldd	r25, Y+6	; 0x06
    2608:	2a e0       	ldi	r18, 0x0A	; 10
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	b9 01       	movw	r22, r18
    260e:	0e 94 b4 14 	call	0x2968	; 0x2968 <__divmodhi4>
    2612:	9a 83       	std	Y+2, r25	; 0x02
    2614:	89 83       	std	Y+1, r24	; 0x01
		LCD_vidWriteCharctr(rem2+48);
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	80 5d       	subi	r24, 0xD0	; 208
    261a:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_vidWriteCharctr>
		temp/=10;
    261e:	8d 81       	ldd	r24, Y+5	; 0x05
    2620:	9e 81       	ldd	r25, Y+6	; 0x06
    2622:	2a e0       	ldi	r18, 0x0A	; 10
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	b9 01       	movw	r22, r18
    2628:	0e 94 b4 14 	call	0x2968	; 0x2968 <__divmodhi4>
    262c:	cb 01       	movw	r24, r22
    262e:	9e 83       	std	Y+6, r25	; 0x06
    2630:	8d 83       	std	Y+5, r24	; 0x05
	{
		rem=num%10;
		num/=10;
		temp=temp*10+rem;
	}
	while(temp!=1)
    2632:	8d 81       	ldd	r24, Y+5	; 0x05
    2634:	9e 81       	ldd	r25, Y+6	; 0x06
    2636:	81 30       	cpi	r24, 0x01	; 1
    2638:	91 05       	cpc	r25, r1
    263a:	21 f7       	brne	.-56     	; 0x2604 <lcd_writenumber+0x84>
	{
		rem2=temp%10;
		LCD_vidWriteCharctr(rem2+48);
		temp/=10;
	}
}
    263c:	28 96       	adiw	r28, 0x08	; 8
    263e:	0f b6       	in	r0, 0x3f	; 63
    2640:	f8 94       	cli
    2642:	de bf       	out	0x3e, r29	; 62
    2644:	0f be       	out	0x3f, r0	; 63
    2646:	cd bf       	out	0x3d, r28	; 61
    2648:	cf 91       	pop	r28
    264a:	df 91       	pop	r29
    264c:	08 95       	ret

0000264e <main>:
#include "DIO_reg.h"
#include "DIO_int.h"


int main(void)
{
    264e:	df 93       	push	r29
    2650:	cf 93       	push	r28
    2652:	cd b7       	in	r28, 0x3d	; 61
    2654:	de b7       	in	r29, 0x3e	; 62
    2656:	aa 97       	sbiw	r28, 0x2a	; 42
    2658:	0f b6       	in	r0, 0x3f	; 63
    265a:	f8 94       	cli
    265c:	de bf       	out	0x3e, r29	; 62
    265e:	0f be       	out	0x3f, r0	; 63
    2660:	cd bf       	out	0x3d, r28	; 61

	DIO_SetPinDirection(PORTB,PIN0,HIGH);
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	60 e0       	ldi	r22, 0x00	; 0
    2666:	41 e0       	ldi	r20, 0x01	; 1
    2668:	0e 94 ab 0a 	call	0x1556	; 0x1556 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA,PIN0,LOW);
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	60 e0       	ldi	r22, 0x00	; 0
    2670:	40 e0       	ldi	r20, 0x00	; 0
    2672:	0e 94 ab 0a 	call	0x1556	; 0x1556 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA,PIN1,LOW);
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	61 e0       	ldi	r22, 0x01	; 1
    267a:	40 e0       	ldi	r20, 0x00	; 0
    267c:	0e 94 ab 0a 	call	0x1556	; 0x1556 <DIO_SetPinDirection>

	DIO_SetPortDirection(PORTD,HIGH);
    2680:	83 e0       	ldi	r24, 0x03	; 3
    2682:	61 e0       	ldi	r22, 0x01	; 1
    2684:	0e 94 b3 0b 	call	0x1766	; 0x1766 <DIO_SetPortDirection>
	DIO_SetPinDirection(PORTC,PIN0,HIGH);
    2688:	82 e0       	ldi	r24, 0x02	; 2
    268a:	60 e0       	ldi	r22, 0x00	; 0
    268c:	41 e0       	ldi	r20, 0x01	; 1
    268e:	0e 94 ab 0a 	call	0x1556	; 0x1556 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTC,PIN1,HIGH);
    2692:	82 e0       	ldi	r24, 0x02	; 2
    2694:	61 e0       	ldi	r22, 0x01	; 1
    2696:	41 e0       	ldi	r20, 0x01	; 1
    2698:	0e 94 ab 0a 	call	0x1556	; 0x1556 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTC,PIN2,HIGH);
    269c:	82 e0       	ldi	r24, 0x02	; 2
    269e:	62 e0       	ldi	r22, 0x02	; 2
    26a0:	41 e0       	ldi	r20, 0x01	; 1
    26a2:	0e 94 ab 0a 	call	0x1556	; 0x1556 <DIO_SetPinDirection>

	LCD_vidInit();
    26a6:	0e 94 35 0c 	call	0x186a	; 0x186a <LCD_vidInit>
	ADC_Init();
    26aa:	0e 94 f4 06 	call	0xde8	; 0xde8 <ADC_Init>
	while(1)

	{
		LM35();
    26ae:	0e 94 49 07 	call	0xe92	; 0xe92 <LM35>
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	a8 ec       	ldi	r26, 0xC8	; 200
    26b8:	b2 e4       	ldi	r27, 0x42	; 66
    26ba:	8f a3       	std	Y+39, r24	; 0x27
    26bc:	98 a7       	std	Y+40, r25	; 0x28
    26be:	a9 a7       	std	Y+41, r26	; 0x29
    26c0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c2:	6f a1       	ldd	r22, Y+39	; 0x27
    26c4:	78 a5       	ldd	r23, Y+40	; 0x28
    26c6:	89 a5       	ldd	r24, Y+41	; 0x29
    26c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	4a e7       	ldi	r20, 0x7A	; 122
    26d0:	53 e4       	ldi	r21, 0x43	; 67
    26d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	8b a3       	std	Y+35, r24	; 0x23
    26dc:	9c a3       	std	Y+36, r25	; 0x24
    26de:	ad a3       	std	Y+37, r26	; 0x25
    26e0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26e2:	6b a1       	ldd	r22, Y+35	; 0x23
    26e4:	7c a1       	ldd	r23, Y+36	; 0x24
    26e6:	8d a1       	ldd	r24, Y+37	; 0x25
    26e8:	9e a1       	ldd	r25, Y+38	; 0x26
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	40 e8       	ldi	r20, 0x80	; 128
    26f0:	5f e3       	ldi	r21, 0x3F	; 63
    26f2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    26f6:	88 23       	and	r24, r24
    26f8:	2c f4       	brge	.+10     	; 0x2704 <main+0xb6>
		__ticks = 1;
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	9a a3       	std	Y+34, r25	; 0x22
    2700:	89 a3       	std	Y+33, r24	; 0x21
    2702:	3f c0       	rjmp	.+126    	; 0x2782 <main+0x134>
	else if (__tmp > 65535)
    2704:	6b a1       	ldd	r22, Y+35	; 0x23
    2706:	7c a1       	ldd	r23, Y+36	; 0x24
    2708:	8d a1       	ldd	r24, Y+37	; 0x25
    270a:	9e a1       	ldd	r25, Y+38	; 0x26
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	3f ef       	ldi	r19, 0xFF	; 255
    2710:	4f e7       	ldi	r20, 0x7F	; 127
    2712:	57 e4       	ldi	r21, 0x47	; 71
    2714:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2718:	18 16       	cp	r1, r24
    271a:	4c f5       	brge	.+82     	; 0x276e <main+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    271c:	6f a1       	ldd	r22, Y+39	; 0x27
    271e:	78 a5       	ldd	r23, Y+40	; 0x28
    2720:	89 a5       	ldd	r24, Y+41	; 0x29
    2722:	9a a5       	ldd	r25, Y+42	; 0x2a
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	40 e2       	ldi	r20, 0x20	; 32
    272a:	51 e4       	ldi	r21, 0x41	; 65
    272c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	bc 01       	movw	r22, r24
    2736:	cd 01       	movw	r24, r26
    2738:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	9a a3       	std	Y+34, r25	; 0x22
    2742:	89 a3       	std	Y+33, r24	; 0x21
    2744:	0f c0       	rjmp	.+30     	; 0x2764 <main+0x116>
    2746:	89 e1       	ldi	r24, 0x19	; 25
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	98 a3       	std	Y+32, r25	; 0x20
    274c:	8f 8f       	std	Y+31, r24	; 0x1f
    274e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2750:	98 a1       	ldd	r25, Y+32	; 0x20
    2752:	01 97       	sbiw	r24, 0x01	; 1
    2754:	f1 f7       	brne	.-4      	; 0x2752 <main+0x104>
    2756:	98 a3       	std	Y+32, r25	; 0x20
    2758:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    275a:	89 a1       	ldd	r24, Y+33	; 0x21
    275c:	9a a1       	ldd	r25, Y+34	; 0x22
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	9a a3       	std	Y+34, r25	; 0x22
    2762:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2764:	89 a1       	ldd	r24, Y+33	; 0x21
    2766:	9a a1       	ldd	r25, Y+34	; 0x22
    2768:	00 97       	sbiw	r24, 0x00	; 0
    276a:	69 f7       	brne	.-38     	; 0x2746 <main+0xf8>
    276c:	14 c0       	rjmp	.+40     	; 0x2796 <main+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    276e:	6b a1       	ldd	r22, Y+35	; 0x23
    2770:	7c a1       	ldd	r23, Y+36	; 0x24
    2772:	8d a1       	ldd	r24, Y+37	; 0x25
    2774:	9e a1       	ldd	r25, Y+38	; 0x26
    2776:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	9a a3       	std	Y+34, r25	; 0x22
    2780:	89 a3       	std	Y+33, r24	; 0x21
    2782:	89 a1       	ldd	r24, Y+33	; 0x21
    2784:	9a a1       	ldd	r25, Y+34	; 0x22
    2786:	9e 8f       	std	Y+30, r25	; 0x1e
    2788:	8d 8f       	std	Y+29, r24	; 0x1d
    278a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    278c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	f1 f7       	brne	.-4      	; 0x278e <main+0x140>
    2792:	9e 8f       	std	Y+30, r25	; 0x1e
    2794:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);
		Potinemeter();
    2796:	0e 94 91 07 	call	0xf22	; 0xf22 <Potinemeter>
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	a8 ec       	ldi	r26, 0xC8	; 200
    27a0:	b2 e4       	ldi	r27, 0x42	; 66
    27a2:	89 8f       	std	Y+25, r24	; 0x19
    27a4:	9a 8f       	std	Y+26, r25	; 0x1a
    27a6:	ab 8f       	std	Y+27, r26	; 0x1b
    27a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27aa:	69 8d       	ldd	r22, Y+25	; 0x19
    27ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	4a e7       	ldi	r20, 0x7A	; 122
    27b8:	53 e4       	ldi	r21, 0x43	; 67
    27ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	8d 8b       	std	Y+21, r24	; 0x15
    27c4:	9e 8b       	std	Y+22, r25	; 0x16
    27c6:	af 8b       	std	Y+23, r26	; 0x17
    27c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27ca:	6d 89       	ldd	r22, Y+21	; 0x15
    27cc:	7e 89       	ldd	r23, Y+22	; 0x16
    27ce:	8f 89       	ldd	r24, Y+23	; 0x17
    27d0:	98 8d       	ldd	r25, Y+24	; 0x18
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	40 e8       	ldi	r20, 0x80	; 128
    27d8:	5f e3       	ldi	r21, 0x3F	; 63
    27da:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    27de:	88 23       	and	r24, r24
    27e0:	2c f4       	brge	.+10     	; 0x27ec <main+0x19e>
		__ticks = 1;
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	9c 8b       	std	Y+20, r25	; 0x14
    27e8:	8b 8b       	std	Y+19, r24	; 0x13
    27ea:	3f c0       	rjmp	.+126    	; 0x286a <main+0x21c>
	else if (__tmp > 65535)
    27ec:	6d 89       	ldd	r22, Y+21	; 0x15
    27ee:	7e 89       	ldd	r23, Y+22	; 0x16
    27f0:	8f 89       	ldd	r24, Y+23	; 0x17
    27f2:	98 8d       	ldd	r25, Y+24	; 0x18
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	3f ef       	ldi	r19, 0xFF	; 255
    27f8:	4f e7       	ldi	r20, 0x7F	; 127
    27fa:	57 e4       	ldi	r21, 0x47	; 71
    27fc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2800:	18 16       	cp	r1, r24
    2802:	4c f5       	brge	.+82     	; 0x2856 <main+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2804:	69 8d       	ldd	r22, Y+25	; 0x19
    2806:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2808:	8b 8d       	ldd	r24, Y+27	; 0x1b
    280a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	40 e2       	ldi	r20, 0x20	; 32
    2812:	51 e4       	ldi	r21, 0x41	; 65
    2814:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	bc 01       	movw	r22, r24
    281e:	cd 01       	movw	r24, r26
    2820:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	9c 8b       	std	Y+20, r25	; 0x14
    282a:	8b 8b       	std	Y+19, r24	; 0x13
    282c:	0f c0       	rjmp	.+30     	; 0x284c <main+0x1fe>
    282e:	89 e1       	ldi	r24, 0x19	; 25
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	9a 8b       	std	Y+18, r25	; 0x12
    2834:	89 8b       	std	Y+17, r24	; 0x11
    2836:	89 89       	ldd	r24, Y+17	; 0x11
    2838:	9a 89       	ldd	r25, Y+18	; 0x12
    283a:	01 97       	sbiw	r24, 0x01	; 1
    283c:	f1 f7       	brne	.-4      	; 0x283a <main+0x1ec>
    283e:	9a 8b       	std	Y+18, r25	; 0x12
    2840:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2842:	8b 89       	ldd	r24, Y+19	; 0x13
    2844:	9c 89       	ldd	r25, Y+20	; 0x14
    2846:	01 97       	sbiw	r24, 0x01	; 1
    2848:	9c 8b       	std	Y+20, r25	; 0x14
    284a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    284c:	8b 89       	ldd	r24, Y+19	; 0x13
    284e:	9c 89       	ldd	r25, Y+20	; 0x14
    2850:	00 97       	sbiw	r24, 0x00	; 0
    2852:	69 f7       	brne	.-38     	; 0x282e <main+0x1e0>
    2854:	14 c0       	rjmp	.+40     	; 0x287e <main+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2856:	6d 89       	ldd	r22, Y+21	; 0x15
    2858:	7e 89       	ldd	r23, Y+22	; 0x16
    285a:	8f 89       	ldd	r24, Y+23	; 0x17
    285c:	98 8d       	ldd	r25, Y+24	; 0x18
    285e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	9c 8b       	std	Y+20, r25	; 0x14
    2868:	8b 8b       	std	Y+19, r24	; 0x13
    286a:	8b 89       	ldd	r24, Y+19	; 0x13
    286c:	9c 89       	ldd	r25, Y+20	; 0x14
    286e:	98 8b       	std	Y+16, r25	; 0x10
    2870:	8f 87       	std	Y+15, r24	; 0x0f
    2872:	8f 85       	ldd	r24, Y+15	; 0x0f
    2874:	98 89       	ldd	r25, Y+16	; 0x10
    2876:	01 97       	sbiw	r24, 0x01	; 1
    2878:	f1 f7       	brne	.-4      	; 0x2876 <main+0x228>
    287a:	98 8b       	std	Y+16, r25	; 0x10
    287c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		LDR();
    287e:	0e 94 ba 07 	call	0xf74	; 0xf74 <LDR>
    2882:	80 e0       	ldi	r24, 0x00	; 0
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	a8 ec       	ldi	r26, 0xC8	; 200
    2888:	b2 e4       	ldi	r27, 0x42	; 66
    288a:	8b 87       	std	Y+11, r24	; 0x0b
    288c:	9c 87       	std	Y+12, r25	; 0x0c
    288e:	ad 87       	std	Y+13, r26	; 0x0d
    2890:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2892:	6b 85       	ldd	r22, Y+11	; 0x0b
    2894:	7c 85       	ldd	r23, Y+12	; 0x0c
    2896:	8d 85       	ldd	r24, Y+13	; 0x0d
    2898:	9e 85       	ldd	r25, Y+14	; 0x0e
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	4a e7       	ldi	r20, 0x7A	; 122
    28a0:	53 e4       	ldi	r21, 0x43	; 67
    28a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	8f 83       	std	Y+7, r24	; 0x07
    28ac:	98 87       	std	Y+8, r25	; 0x08
    28ae:	a9 87       	std	Y+9, r26	; 0x09
    28b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28b2:	6f 81       	ldd	r22, Y+7	; 0x07
    28b4:	78 85       	ldd	r23, Y+8	; 0x08
    28b6:	89 85       	ldd	r24, Y+9	; 0x09
    28b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	40 e8       	ldi	r20, 0x80	; 128
    28c0:	5f e3       	ldi	r21, 0x3F	; 63
    28c2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    28c6:	88 23       	and	r24, r24
    28c8:	2c f4       	brge	.+10     	; 0x28d4 <main+0x286>
		__ticks = 1;
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	9e 83       	std	Y+6, r25	; 0x06
    28d0:	8d 83       	std	Y+5, r24	; 0x05
    28d2:	3f c0       	rjmp	.+126    	; 0x2952 <main+0x304>
	else if (__tmp > 65535)
    28d4:	6f 81       	ldd	r22, Y+7	; 0x07
    28d6:	78 85       	ldd	r23, Y+8	; 0x08
    28d8:	89 85       	ldd	r24, Y+9	; 0x09
    28da:	9a 85       	ldd	r25, Y+10	; 0x0a
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	3f ef       	ldi	r19, 0xFF	; 255
    28e0:	4f e7       	ldi	r20, 0x7F	; 127
    28e2:	57 e4       	ldi	r21, 0x47	; 71
    28e4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    28e8:	18 16       	cp	r1, r24
    28ea:	4c f5       	brge	.+82     	; 0x293e <main+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    28f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	40 e2       	ldi	r20, 0x20	; 32
    28fa:	51 e4       	ldi	r21, 0x41	; 65
    28fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	bc 01       	movw	r22, r24
    2906:	cd 01       	movw	r24, r26
    2908:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	9e 83       	std	Y+6, r25	; 0x06
    2912:	8d 83       	std	Y+5, r24	; 0x05
    2914:	0f c0       	rjmp	.+30     	; 0x2934 <main+0x2e6>
    2916:	89 e1       	ldi	r24, 0x19	; 25
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	9c 83       	std	Y+4, r25	; 0x04
    291c:	8b 83       	std	Y+3, r24	; 0x03
    291e:	8b 81       	ldd	r24, Y+3	; 0x03
    2920:	9c 81       	ldd	r25, Y+4	; 0x04
    2922:	01 97       	sbiw	r24, 0x01	; 1
    2924:	f1 f7       	brne	.-4      	; 0x2922 <main+0x2d4>
    2926:	9c 83       	std	Y+4, r25	; 0x04
    2928:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    292a:	8d 81       	ldd	r24, Y+5	; 0x05
    292c:	9e 81       	ldd	r25, Y+6	; 0x06
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	9e 83       	std	Y+6, r25	; 0x06
    2932:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2934:	8d 81       	ldd	r24, Y+5	; 0x05
    2936:	9e 81       	ldd	r25, Y+6	; 0x06
    2938:	00 97       	sbiw	r24, 0x00	; 0
    293a:	69 f7       	brne	.-38     	; 0x2916 <main+0x2c8>
    293c:	b8 ce       	rjmp	.-656    	; 0x26ae <main+0x60>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    293e:	6f 81       	ldd	r22, Y+7	; 0x07
    2940:	78 85       	ldd	r23, Y+8	; 0x08
    2942:	89 85       	ldd	r24, Y+9	; 0x09
    2944:	9a 85       	ldd	r25, Y+10	; 0x0a
    2946:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    294a:	dc 01       	movw	r26, r24
    294c:	cb 01       	movw	r24, r22
    294e:	9e 83       	std	Y+6, r25	; 0x06
    2950:	8d 83       	std	Y+5, r24	; 0x05
    2952:	8d 81       	ldd	r24, Y+5	; 0x05
    2954:	9e 81       	ldd	r25, Y+6	; 0x06
    2956:	9a 83       	std	Y+2, r25	; 0x02
    2958:	89 83       	std	Y+1, r24	; 0x01
    295a:	89 81       	ldd	r24, Y+1	; 0x01
    295c:	9a 81       	ldd	r25, Y+2	; 0x02
    295e:	01 97       	sbiw	r24, 0x01	; 1
    2960:	f1 f7       	brne	.-4      	; 0x295e <main+0x310>
    2962:	9a 83       	std	Y+2, r25	; 0x02
    2964:	89 83       	std	Y+1, r24	; 0x01
    2966:	a3 ce       	rjmp	.-698    	; 0x26ae <main+0x60>

00002968 <__divmodhi4>:
    2968:	97 fb       	bst	r25, 7
    296a:	09 2e       	mov	r0, r25
    296c:	07 26       	eor	r0, r23
    296e:	0a d0       	rcall	.+20     	; 0x2984 <__divmodhi4_neg1>
    2970:	77 fd       	sbrc	r23, 7
    2972:	04 d0       	rcall	.+8      	; 0x297c <__divmodhi4_neg2>
    2974:	0c d0       	rcall	.+24     	; 0x298e <__udivmodhi4>
    2976:	06 d0       	rcall	.+12     	; 0x2984 <__divmodhi4_neg1>
    2978:	00 20       	and	r0, r0
    297a:	1a f4       	brpl	.+6      	; 0x2982 <__divmodhi4_exit>

0000297c <__divmodhi4_neg2>:
    297c:	70 95       	com	r23
    297e:	61 95       	neg	r22
    2980:	7f 4f       	sbci	r23, 0xFF	; 255

00002982 <__divmodhi4_exit>:
    2982:	08 95       	ret

00002984 <__divmodhi4_neg1>:
    2984:	f6 f7       	brtc	.-4      	; 0x2982 <__divmodhi4_exit>
    2986:	90 95       	com	r25
    2988:	81 95       	neg	r24
    298a:	9f 4f       	sbci	r25, 0xFF	; 255
    298c:	08 95       	ret

0000298e <__udivmodhi4>:
    298e:	aa 1b       	sub	r26, r26
    2990:	bb 1b       	sub	r27, r27
    2992:	51 e1       	ldi	r21, 0x11	; 17
    2994:	07 c0       	rjmp	.+14     	; 0x29a4 <__udivmodhi4_ep>

00002996 <__udivmodhi4_loop>:
    2996:	aa 1f       	adc	r26, r26
    2998:	bb 1f       	adc	r27, r27
    299a:	a6 17       	cp	r26, r22
    299c:	b7 07       	cpc	r27, r23
    299e:	10 f0       	brcs	.+4      	; 0x29a4 <__udivmodhi4_ep>
    29a0:	a6 1b       	sub	r26, r22
    29a2:	b7 0b       	sbc	r27, r23

000029a4 <__udivmodhi4_ep>:
    29a4:	88 1f       	adc	r24, r24
    29a6:	99 1f       	adc	r25, r25
    29a8:	5a 95       	dec	r21
    29aa:	a9 f7       	brne	.-22     	; 0x2996 <__udivmodhi4_loop>
    29ac:	80 95       	com	r24
    29ae:	90 95       	com	r25
    29b0:	bc 01       	movw	r22, r24
    29b2:	cd 01       	movw	r24, r26
    29b4:	08 95       	ret

000029b6 <__prologue_saves__>:
    29b6:	2f 92       	push	r2
    29b8:	3f 92       	push	r3
    29ba:	4f 92       	push	r4
    29bc:	5f 92       	push	r5
    29be:	6f 92       	push	r6
    29c0:	7f 92       	push	r7
    29c2:	8f 92       	push	r8
    29c4:	9f 92       	push	r9
    29c6:	af 92       	push	r10
    29c8:	bf 92       	push	r11
    29ca:	cf 92       	push	r12
    29cc:	df 92       	push	r13
    29ce:	ef 92       	push	r14
    29d0:	ff 92       	push	r15
    29d2:	0f 93       	push	r16
    29d4:	1f 93       	push	r17
    29d6:	cf 93       	push	r28
    29d8:	df 93       	push	r29
    29da:	cd b7       	in	r28, 0x3d	; 61
    29dc:	de b7       	in	r29, 0x3e	; 62
    29de:	ca 1b       	sub	r28, r26
    29e0:	db 0b       	sbc	r29, r27
    29e2:	0f b6       	in	r0, 0x3f	; 63
    29e4:	f8 94       	cli
    29e6:	de bf       	out	0x3e, r29	; 62
    29e8:	0f be       	out	0x3f, r0	; 63
    29ea:	cd bf       	out	0x3d, r28	; 61
    29ec:	09 94       	ijmp

000029ee <__epilogue_restores__>:
    29ee:	2a 88       	ldd	r2, Y+18	; 0x12
    29f0:	39 88       	ldd	r3, Y+17	; 0x11
    29f2:	48 88       	ldd	r4, Y+16	; 0x10
    29f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    29f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    29f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    29fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    29fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    29fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a00:	b9 84       	ldd	r11, Y+9	; 0x09
    2a02:	c8 84       	ldd	r12, Y+8	; 0x08
    2a04:	df 80       	ldd	r13, Y+7	; 0x07
    2a06:	ee 80       	ldd	r14, Y+6	; 0x06
    2a08:	fd 80       	ldd	r15, Y+5	; 0x05
    2a0a:	0c 81       	ldd	r16, Y+4	; 0x04
    2a0c:	1b 81       	ldd	r17, Y+3	; 0x03
    2a0e:	aa 81       	ldd	r26, Y+2	; 0x02
    2a10:	b9 81       	ldd	r27, Y+1	; 0x01
    2a12:	ce 0f       	add	r28, r30
    2a14:	d1 1d       	adc	r29, r1
    2a16:	0f b6       	in	r0, 0x3f	; 63
    2a18:	f8 94       	cli
    2a1a:	de bf       	out	0x3e, r29	; 62
    2a1c:	0f be       	out	0x3f, r0	; 63
    2a1e:	cd bf       	out	0x3d, r28	; 61
    2a20:	ed 01       	movw	r28, r26
    2a22:	08 95       	ret

00002a24 <_exit>:
    2a24:	f8 94       	cli

00002a26 <__stop_program>:
    2a26:	ff cf       	rjmp	.-2      	; 0x2a26 <__stop_program>
