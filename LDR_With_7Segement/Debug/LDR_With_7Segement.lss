
LDR_With_7Segement.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000c78  00000000  00000000  00000a44  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000007f1  00000000  00000000  000016bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a7 03 	call	0x74e	; 0x74e <main>
  64:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_Init>:
#include "BIT_MATH.h"

#include "ADC.h"

extern void ADC_Init(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	// Enable ADC On AVR
		SET_BIT(ADCSRA_Reg,7);
  74:	a6 e2       	ldi	r26, 0x26	; 38
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e6 e2       	ldi	r30, 0x26	; 38
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	80 68       	ori	r24, 0x80	; 128
  80:	8c 93       	st	X, r24

	// Select Conversion Speed
		SET_BIT(ADCSRA_Reg,0);
  82:	a6 e2       	ldi	r26, 0x26	; 38
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e6 e2       	ldi	r30, 0x26	; 38
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	81 60       	ori	r24, 0x01	; 1
  8e:	8c 93       	st	X, r24
		SET_BIT(ADCSRA_Reg,1);
  90:	a6 e2       	ldi	r26, 0x26	; 38
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e6 e2       	ldi	r30, 0x26	; 38
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	82 60       	ori	r24, 0x02	; 2
  9c:	8c 93       	st	X, r24
		SET_BIT(ADCSRA_Reg,2);
  9e:	a6 e2       	ldi	r26, 0x26	; 38
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	e6 e2       	ldi	r30, 0x26	; 38
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	8c 93       	st	X, r24

	// Select Voltage Reference
		SET_BIT(ADMUX_Reg,6);
  ac:	a7 e2       	ldi	r26, 0x27	; 39
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	e7 e2       	ldi	r30, 0x27	; 39
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	8c 93       	st	X, r24


	// ADC Data Rgith Adjustment
		SET_BIT(ADMUX_Reg,5);
  ba:	a7 e2       	ldi	r26, 0x27	; 39
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	e7 e2       	ldi	r30, 0x27	; 39
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 62       	ori	r24, 0x20	; 32
  c6:	8c 93       	st	X, r24
}
  c8:	cf 91       	pop	r28
  ca:	df 91       	pop	r29
  cc:	08 95       	ret

000000ce <ADC_Read>:

extern char ADC_Read (char channel)
{
  ce:	df 93       	push	r29
  d0:	cf 93       	push	r28
  d2:	00 d0       	rcall	.+0      	; 0xd4 <ADC_Read+0x6>
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
  d8:	8a 83       	std	Y+2, r24	; 0x02
	char value;

	// Select ADC Channel
	ADMUX_Reg |= (channel & 0b00000111);
  da:	a7 e2       	ldi	r26, 0x27	; 39
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	e7 e2       	ldi	r30, 0x27	; 39
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	98 2f       	mov	r25, r24
  e6:	8a 81       	ldd	r24, Y+2	; 0x02
  e8:	87 70       	andi	r24, 0x07	; 7
  ea:	89 2b       	or	r24, r25
  ec:	8c 93       	st	X, r24

	// Start ADC Conversion
	SET_BIT(ADCSRA_Reg,6);
  ee:	a6 e2       	ldi	r26, 0x26	; 38
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	e6 e2       	ldi	r30, 0x26	; 38
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	80 64       	ori	r24, 0x40	; 64
  fa:	8c 93       	st	X, r24

	//Wait for the conversion
	while(!(ADCSRA_Reg & (1<<4)));
  fc:	e6 e2       	ldi	r30, 0x26	; 38
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	88 2f       	mov	r24, r24
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	80 71       	andi	r24, 0x10	; 16
 108:	90 70       	andi	r25, 0x00	; 0
 10a:	00 97       	sbiw	r24, 0x00	; 0
 10c:	b9 f3       	breq	.-18     	; 0xfc <ADC_Read+0x2e>

	value=ADCH_Reg;
 10e:	e5 e2       	ldi	r30, 0x25	; 37
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	89 83       	std	Y+1, r24	; 0x01

	//ADCSRA_Reg|=0x10;

	return value;
 116:	89 81       	ldd	r24, Y+1	; 0x01

	SET_BIT(ADCSRA_Reg,4);
}
 118:	0f 90       	pop	r0
 11a:	0f 90       	pop	r0
 11c:	cf 91       	pop	r28
 11e:	df 91       	pop	r29
 120:	08 95       	ret

00000122 <DIO_SetPinValue>:
#include "DIO_int.h"
#include "DIO_reg.h"

/* IO Pins */
void DIO_SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy)
{
 122:	df 93       	push	r29
 124:	cf 93       	push	r28
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
 12a:	27 97       	sbiw	r28, 0x07	; 7
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	f8 94       	cli
 130:	de bf       	out	0x3e, r29	; 62
 132:	0f be       	out	0x3f, r0	; 63
 134:	cd bf       	out	0x3d, r28	; 61
 136:	89 83       	std	Y+1, r24	; 0x01
 138:	6a 83       	std	Y+2, r22	; 0x02
 13a:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
 13c:	89 81       	ldd	r24, Y+1	; 0x01
 13e:	84 30       	cpi	r24, 0x04	; 4
 140:	08 f0       	brcs	.+2      	; 0x144 <DIO_SetPinValue+0x22>
 142:	ee c0       	rjmp	.+476    	; 0x320 <DIO_SetPinValue+0x1fe>
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	88 30       	cpi	r24, 0x08	; 8
 148:	08 f0       	brcs	.+2      	; 0x14c <DIO_SetPinValue+0x2a>
 14a:	ea c0       	rjmp	.+468    	; 0x320 <DIO_SetPinValue+0x1fe>
	{
		if (u8PinValCopy == HIGH)
 14c:	8b 81       	ldd	r24, Y+3	; 0x03
 14e:	81 30       	cpi	r24, 0x01	; 1
 150:	09 f0       	breq	.+2      	; 0x154 <DIO_SetPinValue+0x32>
 152:	6f c0       	rjmp	.+222    	; 0x232 <DIO_SetPinValue+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	28 2f       	mov	r18, r24
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	3f 83       	std	Y+7, r19	; 0x07
 15c:	2e 83       	std	Y+6, r18	; 0x06
 15e:	8e 81       	ldd	r24, Y+6	; 0x06
 160:	9f 81       	ldd	r25, Y+7	; 0x07
 162:	81 30       	cpi	r24, 0x01	; 1
 164:	91 05       	cpc	r25, r1
 166:	49 f1       	breq	.+82     	; 0x1ba <DIO_SetPinValue+0x98>
 168:	2e 81       	ldd	r18, Y+6	; 0x06
 16a:	3f 81       	ldd	r19, Y+7	; 0x07
 16c:	22 30       	cpi	r18, 0x02	; 2
 16e:	31 05       	cpc	r19, r1
 170:	2c f4       	brge	.+10     	; 0x17c <DIO_SetPinValue+0x5a>
 172:	8e 81       	ldd	r24, Y+6	; 0x06
 174:	9f 81       	ldd	r25, Y+7	; 0x07
 176:	00 97       	sbiw	r24, 0x00	; 0
 178:	61 f0       	breq	.+24     	; 0x192 <DIO_SetPinValue+0x70>
 17a:	d2 c0       	rjmp	.+420    	; 0x320 <DIO_SetPinValue+0x1fe>
 17c:	2e 81       	ldd	r18, Y+6	; 0x06
 17e:	3f 81       	ldd	r19, Y+7	; 0x07
 180:	22 30       	cpi	r18, 0x02	; 2
 182:	31 05       	cpc	r19, r1
 184:	71 f1       	breq	.+92     	; 0x1e2 <DIO_SetPinValue+0xc0>
 186:	8e 81       	ldd	r24, Y+6	; 0x06
 188:	9f 81       	ldd	r25, Y+7	; 0x07
 18a:	83 30       	cpi	r24, 0x03	; 3
 18c:	91 05       	cpc	r25, r1
 18e:	e9 f1       	breq	.+122    	; 0x20a <DIO_SetPinValue+0xe8>
 190:	c7 c0       	rjmp	.+398    	; 0x320 <DIO_SetPinValue+0x1fe>
			{
				case PORTA: SET_BIT(PORTA_Register,u8PinIdCopy); break;
 192:	ab e3       	ldi	r26, 0x3B	; 59
 194:	b0 e0       	ldi	r27, 0x00	; 0
 196:	eb e3       	ldi	r30, 0x3B	; 59
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	48 2f       	mov	r20, r24
 19e:	8a 81       	ldd	r24, Y+2	; 0x02
 1a0:	28 2f       	mov	r18, r24
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 2e       	mov	r0, r18
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_SetPinValue+0x8e>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	0a 94       	dec	r0
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_SetPinValue+0x8a>
 1b4:	84 2b       	or	r24, r20
 1b6:	8c 93       	st	X, r24
 1b8:	b3 c0       	rjmp	.+358    	; 0x320 <DIO_SetPinValue+0x1fe>
				case PORTB: SET_BIT(PORTB_Register,u8PinIdCopy); break;
 1ba:	a8 e3       	ldi	r26, 0x38	; 56
 1bc:	b0 e0       	ldi	r27, 0x00	; 0
 1be:	e8 e3       	ldi	r30, 0x38	; 56
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	48 2f       	mov	r20, r24
 1c6:	8a 81       	ldd	r24, Y+2	; 0x02
 1c8:	28 2f       	mov	r18, r24
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 2e       	mov	r0, r18
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_SetPinValue+0xb6>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	0a 94       	dec	r0
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_SetPinValue+0xb2>
 1dc:	84 2b       	or	r24, r20
 1de:	8c 93       	st	X, r24
 1e0:	9f c0       	rjmp	.+318    	; 0x320 <DIO_SetPinValue+0x1fe>
				case PORTC: SET_BIT(PORTC_Register,u8PinIdCopy); break;
 1e2:	a5 e3       	ldi	r26, 0x35	; 53
 1e4:	b0 e0       	ldi	r27, 0x00	; 0
 1e6:	e5 e3       	ldi	r30, 0x35	; 53
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	48 2f       	mov	r20, r24
 1ee:	8a 81       	ldd	r24, Y+2	; 0x02
 1f0:	28 2f       	mov	r18, r24
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 2e       	mov	r0, r18
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_SetPinValue+0xde>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	0a 94       	dec	r0
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_SetPinValue+0xda>
 204:	84 2b       	or	r24, r20
 206:	8c 93       	st	X, r24
 208:	8b c0       	rjmp	.+278    	; 0x320 <DIO_SetPinValue+0x1fe>
				case PORTD: SET_BIT(PORTD_Register,u8PinIdCopy); break;
 20a:	a2 e3       	ldi	r26, 0x32	; 50
 20c:	b0 e0       	ldi	r27, 0x00	; 0
 20e:	e2 e3       	ldi	r30, 0x32	; 50
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	48 2f       	mov	r20, r24
 216:	8a 81       	ldd	r24, Y+2	; 0x02
 218:	28 2f       	mov	r18, r24
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 2e       	mov	r0, r18
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_SetPinValue+0x106>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	0a 94       	dec	r0
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_SetPinValue+0x102>
 22c:	84 2b       	or	r24, r20
 22e:	8c 93       	st	X, r24
 230:	77 c0       	rjmp	.+238    	; 0x320 <DIO_SetPinValue+0x1fe>
			}

		}

		else if (u8PinValCopy == LOW)
 232:	8b 81       	ldd	r24, Y+3	; 0x03
 234:	88 23       	and	r24, r24
 236:	09 f0       	breq	.+2      	; 0x23a <DIO_SetPinValue+0x118>
 238:	73 c0       	rjmp	.+230    	; 0x320 <DIO_SetPinValue+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
 23a:	89 81       	ldd	r24, Y+1	; 0x01
 23c:	28 2f       	mov	r18, r24
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	3d 83       	std	Y+5, r19	; 0x05
 242:	2c 83       	std	Y+4, r18	; 0x04
 244:	8c 81       	ldd	r24, Y+4	; 0x04
 246:	9d 81       	ldd	r25, Y+5	; 0x05
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	91 05       	cpc	r25, r1
 24c:	59 f1       	breq	.+86     	; 0x2a4 <DIO_SetPinValue+0x182>
 24e:	2c 81       	ldd	r18, Y+4	; 0x04
 250:	3d 81       	ldd	r19, Y+5	; 0x05
 252:	22 30       	cpi	r18, 0x02	; 2
 254:	31 05       	cpc	r19, r1
 256:	2c f4       	brge	.+10     	; 0x262 <DIO_SetPinValue+0x140>
 258:	8c 81       	ldd	r24, Y+4	; 0x04
 25a:	9d 81       	ldd	r25, Y+5	; 0x05
 25c:	00 97       	sbiw	r24, 0x00	; 0
 25e:	69 f0       	breq	.+26     	; 0x27a <DIO_SetPinValue+0x158>
 260:	5f c0       	rjmp	.+190    	; 0x320 <DIO_SetPinValue+0x1fe>
 262:	2c 81       	ldd	r18, Y+4	; 0x04
 264:	3d 81       	ldd	r19, Y+5	; 0x05
 266:	22 30       	cpi	r18, 0x02	; 2
 268:	31 05       	cpc	r19, r1
 26a:	89 f1       	breq	.+98     	; 0x2ce <DIO_SetPinValue+0x1ac>
 26c:	8c 81       	ldd	r24, Y+4	; 0x04
 26e:	9d 81       	ldd	r25, Y+5	; 0x05
 270:	83 30       	cpi	r24, 0x03	; 3
 272:	91 05       	cpc	r25, r1
 274:	09 f4       	brne	.+2      	; 0x278 <DIO_SetPinValue+0x156>
 276:	40 c0       	rjmp	.+128    	; 0x2f8 <DIO_SetPinValue+0x1d6>
 278:	53 c0       	rjmp	.+166    	; 0x320 <DIO_SetPinValue+0x1fe>
			{
				case PORTA: CLR_BIT(PORTA_Register,u8PinIdCopy); break;
 27a:	ab e3       	ldi	r26, 0x3B	; 59
 27c:	b0 e0       	ldi	r27, 0x00	; 0
 27e:	eb e3       	ldi	r30, 0x3B	; 59
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	48 2f       	mov	r20, r24
 286:	8a 81       	ldd	r24, Y+2	; 0x02
 288:	28 2f       	mov	r18, r24
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	02 2e       	mov	r0, r18
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_SetPinValue+0x176>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	0a 94       	dec	r0
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_SetPinValue+0x172>
 29c:	80 95       	com	r24
 29e:	84 23       	and	r24, r20
 2a0:	8c 93       	st	X, r24
 2a2:	3e c0       	rjmp	.+124    	; 0x320 <DIO_SetPinValue+0x1fe>
				case PORTB: CLR_BIT(PORTB_Register,u8PinIdCopy); break;
 2a4:	a8 e3       	ldi	r26, 0x38	; 56
 2a6:	b0 e0       	ldi	r27, 0x00	; 0
 2a8:	e8 e3       	ldi	r30, 0x38	; 56
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	48 2f       	mov	r20, r24
 2b0:	8a 81       	ldd	r24, Y+2	; 0x02
 2b2:	28 2f       	mov	r18, r24
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 2e       	mov	r0, r18
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_SetPinValue+0x1a0>
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	0a 94       	dec	r0
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_SetPinValue+0x19c>
 2c6:	80 95       	com	r24
 2c8:	84 23       	and	r24, r20
 2ca:	8c 93       	st	X, r24
 2cc:	29 c0       	rjmp	.+82     	; 0x320 <DIO_SetPinValue+0x1fe>
				case PORTC: CLR_BIT(PORTC_Register,u8PinIdCopy); break;
 2ce:	a5 e3       	ldi	r26, 0x35	; 53
 2d0:	b0 e0       	ldi	r27, 0x00	; 0
 2d2:	e5 e3       	ldi	r30, 0x35	; 53
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	48 2f       	mov	r20, r24
 2da:	8a 81       	ldd	r24, Y+2	; 0x02
 2dc:	28 2f       	mov	r18, r24
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	02 2e       	mov	r0, r18
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_SetPinValue+0x1ca>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	0a 94       	dec	r0
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_SetPinValue+0x1c6>
 2f0:	80 95       	com	r24
 2f2:	84 23       	and	r24, r20
 2f4:	8c 93       	st	X, r24
 2f6:	14 c0       	rjmp	.+40     	; 0x320 <DIO_SetPinValue+0x1fe>
				case PORTD: CLR_BIT(PORTD_Register,u8PinIdCopy); break;
 2f8:	a2 e3       	ldi	r26, 0x32	; 50
 2fa:	b0 e0       	ldi	r27, 0x00	; 0
 2fc:	e2 e3       	ldi	r30, 0x32	; 50
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 81       	ld	r24, Z
 302:	48 2f       	mov	r20, r24
 304:	8a 81       	ldd	r24, Y+2	; 0x02
 306:	28 2f       	mov	r18, r24
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 2e       	mov	r0, r18
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_SetPinValue+0x1f4>
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	0a 94       	dec	r0
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_SetPinValue+0x1f0>
 31a:	80 95       	com	r24
 31c:	84 23       	and	r24, r20
 31e:	8c 93       	st	X, r24

	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
 320:	27 96       	adiw	r28, 0x07	; 7
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	f8 94       	cli
 326:	de bf       	out	0x3e, r29	; 62
 328:	0f be       	out	0x3f, r0	; 63
 32a:	cd bf       	out	0x3d, r28	; 61
 32c:	cf 91       	pop	r28
 32e:	df 91       	pop	r29
 330:	08 95       	ret

00000332 <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy)
{
 332:	df 93       	push	r29
 334:	cf 93       	push	r28
 336:	00 d0       	rcall	.+0      	; 0x338 <DIO_GetPinValue+0x6>
 338:	00 d0       	rcall	.+0      	; 0x33a <DIO_GetPinValue+0x8>
 33a:	0f 92       	push	r0
 33c:	cd b7       	in	r28, 0x3d	; 61
 33e:	de b7       	in	r29, 0x3e	; 62
 340:	8a 83       	std	Y+2, r24	; 0x02
 342:	6b 83       	std	Y+3, r22	; 0x03
	/* Define Local Variable to get the BIT Value */
	u8 u8ResultLocal;
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
 344:	8a 81       	ldd	r24, Y+2	; 0x02
 346:	84 30       	cpi	r24, 0x04	; 4
 348:	08 f0       	brcs	.+2      	; 0x34c <DIO_GetPinValue+0x1a>
 34a:	6c c0       	rjmp	.+216    	; 0x424 <DIO_GetPinValue+0xf2>
 34c:	8b 81       	ldd	r24, Y+3	; 0x03
 34e:	88 30       	cpi	r24, 0x08	; 8
 350:	08 f0       	brcs	.+2      	; 0x354 <DIO_GetPinValue+0x22>
 352:	68 c0       	rjmp	.+208    	; 0x424 <DIO_GetPinValue+0xf2>
	{
		/* Check on the Required PORT Number */
		switch (u8PortIdCopy)
 354:	8a 81       	ldd	r24, Y+2	; 0x02
 356:	28 2f       	mov	r18, r24
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	3d 83       	std	Y+5, r19	; 0x05
 35c:	2c 83       	std	Y+4, r18	; 0x04
 35e:	4c 81       	ldd	r20, Y+4	; 0x04
 360:	5d 81       	ldd	r21, Y+5	; 0x05
 362:	41 30       	cpi	r20, 0x01	; 1
 364:	51 05       	cpc	r21, r1
 366:	41 f1       	breq	.+80     	; 0x3b8 <DIO_GetPinValue+0x86>
 368:	8c 81       	ldd	r24, Y+4	; 0x04
 36a:	9d 81       	ldd	r25, Y+5	; 0x05
 36c:	82 30       	cpi	r24, 0x02	; 2
 36e:	91 05       	cpc	r25, r1
 370:	34 f4       	brge	.+12     	; 0x37e <DIO_GetPinValue+0x4c>
 372:	2c 81       	ldd	r18, Y+4	; 0x04
 374:	3d 81       	ldd	r19, Y+5	; 0x05
 376:	21 15       	cp	r18, r1
 378:	31 05       	cpc	r19, r1
 37a:	61 f0       	breq	.+24     	; 0x394 <DIO_GetPinValue+0x62>
 37c:	55 c0       	rjmp	.+170    	; 0x428 <DIO_GetPinValue+0xf6>
 37e:	4c 81       	ldd	r20, Y+4	; 0x04
 380:	5d 81       	ldd	r21, Y+5	; 0x05
 382:	42 30       	cpi	r20, 0x02	; 2
 384:	51 05       	cpc	r21, r1
 386:	51 f1       	breq	.+84     	; 0x3dc <DIO_GetPinValue+0xaa>
 388:	8c 81       	ldd	r24, Y+4	; 0x04
 38a:	9d 81       	ldd	r25, Y+5	; 0x05
 38c:	83 30       	cpi	r24, 0x03	; 3
 38e:	91 05       	cpc	r25, r1
 390:	b9 f1       	breq	.+110    	; 0x400 <DIO_GetPinValue+0xce>
 392:	4a c0       	rjmp	.+148    	; 0x428 <DIO_GetPinValue+0xf6>
		{
			case PORTA: u8ResultLocal= GET_BIT(PINA_Register,u8PinIdCopy); break;
 394:	e9 e3       	ldi	r30, 0x39	; 57
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	80 81       	ld	r24, Z
 39a:	28 2f       	mov	r18, r24
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	8b 81       	ldd	r24, Y+3	; 0x03
 3a0:	88 2f       	mov	r24, r24
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	a9 01       	movw	r20, r18
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <DIO_GetPinValue+0x7a>
 3a8:	55 95       	asr	r21
 3aa:	47 95       	ror	r20
 3ac:	8a 95       	dec	r24
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <DIO_GetPinValue+0x76>
 3b0:	ca 01       	movw	r24, r20
 3b2:	81 70       	andi	r24, 0x01	; 1
 3b4:	89 83       	std	Y+1, r24	; 0x01
 3b6:	38 c0       	rjmp	.+112    	; 0x428 <DIO_GetPinValue+0xf6>
			case PORTB: u8ResultLocal= GET_BIT(PINB_Register,u8PinIdCopy); break;
 3b8:	e6 e3       	ldi	r30, 0x36	; 54
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	28 2f       	mov	r18, r24
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	8b 81       	ldd	r24, Y+3	; 0x03
 3c4:	88 2f       	mov	r24, r24
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	a9 01       	movw	r20, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_GetPinValue+0x9e>
 3cc:	55 95       	asr	r21
 3ce:	47 95       	ror	r20
 3d0:	8a 95       	dec	r24
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_GetPinValue+0x9a>
 3d4:	ca 01       	movw	r24, r20
 3d6:	81 70       	andi	r24, 0x01	; 1
 3d8:	89 83       	std	Y+1, r24	; 0x01
 3da:	26 c0       	rjmp	.+76     	; 0x428 <DIO_GetPinValue+0xf6>
			case PORTC: u8ResultLocal= GET_BIT(PINC_Register,u8PinIdCopy); break;
 3dc:	e3 e3       	ldi	r30, 0x33	; 51
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	28 2f       	mov	r18, r24
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	8b 81       	ldd	r24, Y+3	; 0x03
 3e8:	88 2f       	mov	r24, r24
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	a9 01       	movw	r20, r18
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_GetPinValue+0xc2>
 3f0:	55 95       	asr	r21
 3f2:	47 95       	ror	r20
 3f4:	8a 95       	dec	r24
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_GetPinValue+0xbe>
 3f8:	ca 01       	movw	r24, r20
 3fa:	81 70       	andi	r24, 0x01	; 1
 3fc:	89 83       	std	Y+1, r24	; 0x01
 3fe:	14 c0       	rjmp	.+40     	; 0x428 <DIO_GetPinValue+0xf6>
			case PORTD: u8ResultLocal= GET_BIT(PIND_Register,u8PinIdCopy); break;
 400:	e0 e3       	ldi	r30, 0x30	; 48
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	80 81       	ld	r24, Z
 406:	28 2f       	mov	r18, r24
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	8b 81       	ldd	r24, Y+3	; 0x03
 40c:	88 2f       	mov	r24, r24
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	a9 01       	movw	r20, r18
 412:	02 c0       	rjmp	.+4      	; 0x418 <DIO_GetPinValue+0xe6>
 414:	55 95       	asr	r21
 416:	47 95       	ror	r20
 418:	8a 95       	dec	r24
 41a:	e2 f7       	brpl	.-8      	; 0x414 <DIO_GetPinValue+0xe2>
 41c:	ca 01       	movw	r24, r20
 41e:	81 70       	andi	r24, 0x01	; 1
 420:	89 83       	std	Y+1, r24	; 0x01
 422:	02 c0       	rjmp	.+4      	; 0x428 <DIO_GetPinValue+0xf6>
	}

	else
	{
		/* return 0xff in case of error in the Pin ID or PORT ID */
		u8ResultLocal = 0xFF;
 424:	8f ef       	ldi	r24, 0xFF	; 255
 426:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ResultLocal;
 428:	89 81       	ldd	r24, Y+1	; 0x01
}
 42a:	0f 90       	pop	r0
 42c:	0f 90       	pop	r0
 42e:	0f 90       	pop	r0
 430:	0f 90       	pop	r0
 432:	0f 90       	pop	r0
 434:	cf 91       	pop	r28
 436:	df 91       	pop	r29
 438:	08 95       	ret

0000043a <DIO_SetPinDirection>:

void DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
 43a:	df 93       	push	r29
 43c:	cf 93       	push	r28
 43e:	cd b7       	in	r28, 0x3d	; 61
 440:	de b7       	in	r29, 0x3e	; 62
 442:	27 97       	sbiw	r28, 0x07	; 7
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	f8 94       	cli
 448:	de bf       	out	0x3e, r29	; 62
 44a:	0f be       	out	0x3f, r0	; 63
 44c:	cd bf       	out	0x3d, r28	; 61
 44e:	89 83       	std	Y+1, r24	; 0x01
 450:	6a 83       	std	Y+2, r22	; 0x02
 452:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
 454:	89 81       	ldd	r24, Y+1	; 0x01
 456:	84 30       	cpi	r24, 0x04	; 4
 458:	08 f0       	brcs	.+2      	; 0x45c <DIO_SetPinDirection+0x22>
 45a:	ee c0       	rjmp	.+476    	; 0x638 <DIO_SetPinDirection+0x1fe>
 45c:	8a 81       	ldd	r24, Y+2	; 0x02
 45e:	88 30       	cpi	r24, 0x08	; 8
 460:	08 f0       	brcs	.+2      	; 0x464 <DIO_SetPinDirection+0x2a>
 462:	ea c0       	rjmp	.+468    	; 0x638 <DIO_SetPinDirection+0x1fe>
	{
		if ( u8PinDirCopy == OUTPUT )
 464:	8b 81       	ldd	r24, Y+3	; 0x03
 466:	81 30       	cpi	r24, 0x01	; 1
 468:	09 f0       	breq	.+2      	; 0x46c <DIO_SetPinDirection+0x32>
 46a:	6f c0       	rjmp	.+222    	; 0x54a <DIO_SetPinDirection+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
 46c:	89 81       	ldd	r24, Y+1	; 0x01
 46e:	28 2f       	mov	r18, r24
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	3f 83       	std	Y+7, r19	; 0x07
 474:	2e 83       	std	Y+6, r18	; 0x06
 476:	8e 81       	ldd	r24, Y+6	; 0x06
 478:	9f 81       	ldd	r25, Y+7	; 0x07
 47a:	81 30       	cpi	r24, 0x01	; 1
 47c:	91 05       	cpc	r25, r1
 47e:	49 f1       	breq	.+82     	; 0x4d2 <DIO_SetPinDirection+0x98>
 480:	2e 81       	ldd	r18, Y+6	; 0x06
 482:	3f 81       	ldd	r19, Y+7	; 0x07
 484:	22 30       	cpi	r18, 0x02	; 2
 486:	31 05       	cpc	r19, r1
 488:	2c f4       	brge	.+10     	; 0x494 <DIO_SetPinDirection+0x5a>
 48a:	8e 81       	ldd	r24, Y+6	; 0x06
 48c:	9f 81       	ldd	r25, Y+7	; 0x07
 48e:	00 97       	sbiw	r24, 0x00	; 0
 490:	61 f0       	breq	.+24     	; 0x4aa <DIO_SetPinDirection+0x70>
 492:	d2 c0       	rjmp	.+420    	; 0x638 <DIO_SetPinDirection+0x1fe>
 494:	2e 81       	ldd	r18, Y+6	; 0x06
 496:	3f 81       	ldd	r19, Y+7	; 0x07
 498:	22 30       	cpi	r18, 0x02	; 2
 49a:	31 05       	cpc	r19, r1
 49c:	71 f1       	breq	.+92     	; 0x4fa <DIO_SetPinDirection+0xc0>
 49e:	8e 81       	ldd	r24, Y+6	; 0x06
 4a0:	9f 81       	ldd	r25, Y+7	; 0x07
 4a2:	83 30       	cpi	r24, 0x03	; 3
 4a4:	91 05       	cpc	r25, r1
 4a6:	e9 f1       	breq	.+122    	; 0x522 <DIO_SetPinDirection+0xe8>
 4a8:	c7 c0       	rjmp	.+398    	; 0x638 <DIO_SetPinDirection+0x1fe>
			{
				case PORTA: SET_BIT(DDRA_Register,u8PinIdCopy); break;
 4aa:	aa e3       	ldi	r26, 0x3A	; 58
 4ac:	b0 e0       	ldi	r27, 0x00	; 0
 4ae:	ea e3       	ldi	r30, 0x3A	; 58
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	80 81       	ld	r24, Z
 4b4:	48 2f       	mov	r20, r24
 4b6:	8a 81       	ldd	r24, Y+2	; 0x02
 4b8:	28 2f       	mov	r18, r24
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	02 2e       	mov	r0, r18
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <DIO_SetPinDirection+0x8e>
 4c4:	88 0f       	add	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	0a 94       	dec	r0
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <DIO_SetPinDirection+0x8a>
 4cc:	84 2b       	or	r24, r20
 4ce:	8c 93       	st	X, r24
 4d0:	b3 c0       	rjmp	.+358    	; 0x638 <DIO_SetPinDirection+0x1fe>
				case PORTB: SET_BIT(DDRB_Register,u8PinIdCopy); break;
 4d2:	a7 e3       	ldi	r26, 0x37	; 55
 4d4:	b0 e0       	ldi	r27, 0x00	; 0
 4d6:	e7 e3       	ldi	r30, 0x37	; 55
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	80 81       	ld	r24, Z
 4dc:	48 2f       	mov	r20, r24
 4de:	8a 81       	ldd	r24, Y+2	; 0x02
 4e0:	28 2f       	mov	r18, r24
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	02 2e       	mov	r0, r18
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <DIO_SetPinDirection+0xb6>
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	0a 94       	dec	r0
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <DIO_SetPinDirection+0xb2>
 4f4:	84 2b       	or	r24, r20
 4f6:	8c 93       	st	X, r24
 4f8:	9f c0       	rjmp	.+318    	; 0x638 <DIO_SetPinDirection+0x1fe>
				case PORTC: SET_BIT(DDRC_Register,u8PinIdCopy); break;
 4fa:	a4 e3       	ldi	r26, 0x34	; 52
 4fc:	b0 e0       	ldi	r27, 0x00	; 0
 4fe:	e4 e3       	ldi	r30, 0x34	; 52
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	80 81       	ld	r24, Z
 504:	48 2f       	mov	r20, r24
 506:	8a 81       	ldd	r24, Y+2	; 0x02
 508:	28 2f       	mov	r18, r24
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	02 2e       	mov	r0, r18
 512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_SetPinDirection+0xde>
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	0a 94       	dec	r0
 51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_SetPinDirection+0xda>
 51c:	84 2b       	or	r24, r20
 51e:	8c 93       	st	X, r24
 520:	8b c0       	rjmp	.+278    	; 0x638 <DIO_SetPinDirection+0x1fe>
				case PORTD: SET_BIT(DDRD_Register,u8PinIdCopy); break;
 522:	a1 e3       	ldi	r26, 0x31	; 49
 524:	b0 e0       	ldi	r27, 0x00	; 0
 526:	e1 e3       	ldi	r30, 0x31	; 49
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	80 81       	ld	r24, Z
 52c:	48 2f       	mov	r20, r24
 52e:	8a 81       	ldd	r24, Y+2	; 0x02
 530:	28 2f       	mov	r18, r24
 532:	30 e0       	ldi	r19, 0x00	; 0
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	02 2e       	mov	r0, r18
 53a:	02 c0       	rjmp	.+4      	; 0x540 <DIO_SetPinDirection+0x106>
 53c:	88 0f       	add	r24, r24
 53e:	99 1f       	adc	r25, r25
 540:	0a 94       	dec	r0
 542:	e2 f7       	brpl	.-8      	; 0x53c <DIO_SetPinDirection+0x102>
 544:	84 2b       	or	r24, r20
 546:	8c 93       	st	X, r24
 548:	77 c0       	rjmp	.+238    	; 0x638 <DIO_SetPinDirection+0x1fe>
			}
		}

		else if ( u8PinDirCopy == INPUT )
 54a:	8b 81       	ldd	r24, Y+3	; 0x03
 54c:	88 23       	and	r24, r24
 54e:	09 f0       	breq	.+2      	; 0x552 <DIO_SetPinDirection+0x118>
 550:	73 c0       	rjmp	.+230    	; 0x638 <DIO_SetPinDirection+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
 552:	89 81       	ldd	r24, Y+1	; 0x01
 554:	28 2f       	mov	r18, r24
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	3d 83       	std	Y+5, r19	; 0x05
 55a:	2c 83       	std	Y+4, r18	; 0x04
 55c:	8c 81       	ldd	r24, Y+4	; 0x04
 55e:	9d 81       	ldd	r25, Y+5	; 0x05
 560:	81 30       	cpi	r24, 0x01	; 1
 562:	91 05       	cpc	r25, r1
 564:	59 f1       	breq	.+86     	; 0x5bc <DIO_SetPinDirection+0x182>
 566:	2c 81       	ldd	r18, Y+4	; 0x04
 568:	3d 81       	ldd	r19, Y+5	; 0x05
 56a:	22 30       	cpi	r18, 0x02	; 2
 56c:	31 05       	cpc	r19, r1
 56e:	2c f4       	brge	.+10     	; 0x57a <DIO_SetPinDirection+0x140>
 570:	8c 81       	ldd	r24, Y+4	; 0x04
 572:	9d 81       	ldd	r25, Y+5	; 0x05
 574:	00 97       	sbiw	r24, 0x00	; 0
 576:	69 f0       	breq	.+26     	; 0x592 <DIO_SetPinDirection+0x158>
 578:	5f c0       	rjmp	.+190    	; 0x638 <DIO_SetPinDirection+0x1fe>
 57a:	2c 81       	ldd	r18, Y+4	; 0x04
 57c:	3d 81       	ldd	r19, Y+5	; 0x05
 57e:	22 30       	cpi	r18, 0x02	; 2
 580:	31 05       	cpc	r19, r1
 582:	89 f1       	breq	.+98     	; 0x5e6 <DIO_SetPinDirection+0x1ac>
 584:	8c 81       	ldd	r24, Y+4	; 0x04
 586:	9d 81       	ldd	r25, Y+5	; 0x05
 588:	83 30       	cpi	r24, 0x03	; 3
 58a:	91 05       	cpc	r25, r1
 58c:	09 f4       	brne	.+2      	; 0x590 <DIO_SetPinDirection+0x156>
 58e:	40 c0       	rjmp	.+128    	; 0x610 <DIO_SetPinDirection+0x1d6>
 590:	53 c0       	rjmp	.+166    	; 0x638 <DIO_SetPinDirection+0x1fe>
			{
				case PORTA: CLR_BIT(DDRA_Register,u8PinIdCopy); break;
 592:	aa e3       	ldi	r26, 0x3A	; 58
 594:	b0 e0       	ldi	r27, 0x00	; 0
 596:	ea e3       	ldi	r30, 0x3A	; 58
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	80 81       	ld	r24, Z
 59c:	48 2f       	mov	r20, r24
 59e:	8a 81       	ldd	r24, Y+2	; 0x02
 5a0:	28 2f       	mov	r18, r24
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	02 2e       	mov	r0, r18
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <DIO_SetPinDirection+0x176>
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	0a 94       	dec	r0
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <DIO_SetPinDirection+0x172>
 5b4:	80 95       	com	r24
 5b6:	84 23       	and	r24, r20
 5b8:	8c 93       	st	X, r24
 5ba:	3e c0       	rjmp	.+124    	; 0x638 <DIO_SetPinDirection+0x1fe>
				case PORTB: CLR_BIT(DDRB_Register,u8PinIdCopy); break;
 5bc:	a7 e3       	ldi	r26, 0x37	; 55
 5be:	b0 e0       	ldi	r27, 0x00	; 0
 5c0:	e7 e3       	ldi	r30, 0x37	; 55
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	80 81       	ld	r24, Z
 5c6:	48 2f       	mov	r20, r24
 5c8:	8a 81       	ldd	r24, Y+2	; 0x02
 5ca:	28 2f       	mov	r18, r24
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	02 2e       	mov	r0, r18
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <DIO_SetPinDirection+0x1a0>
 5d6:	88 0f       	add	r24, r24
 5d8:	99 1f       	adc	r25, r25
 5da:	0a 94       	dec	r0
 5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <DIO_SetPinDirection+0x19c>
 5de:	80 95       	com	r24
 5e0:	84 23       	and	r24, r20
 5e2:	8c 93       	st	X, r24
 5e4:	29 c0       	rjmp	.+82     	; 0x638 <DIO_SetPinDirection+0x1fe>
				case PORTC: CLR_BIT(DDRC_Register,u8PinIdCopy); break;
 5e6:	a4 e3       	ldi	r26, 0x34	; 52
 5e8:	b0 e0       	ldi	r27, 0x00	; 0
 5ea:	e4 e3       	ldi	r30, 0x34	; 52
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	80 81       	ld	r24, Z
 5f0:	48 2f       	mov	r20, r24
 5f2:	8a 81       	ldd	r24, Y+2	; 0x02
 5f4:	28 2f       	mov	r18, r24
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	02 2e       	mov	r0, r18
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <DIO_SetPinDirection+0x1ca>
 600:	88 0f       	add	r24, r24
 602:	99 1f       	adc	r25, r25
 604:	0a 94       	dec	r0
 606:	e2 f7       	brpl	.-8      	; 0x600 <DIO_SetPinDirection+0x1c6>
 608:	80 95       	com	r24
 60a:	84 23       	and	r24, r20
 60c:	8c 93       	st	X, r24
 60e:	14 c0       	rjmp	.+40     	; 0x638 <DIO_SetPinDirection+0x1fe>
				case PORTD: CLR_BIT(DDRD_Register,u8PinIdCopy); break;
 610:	a1 e3       	ldi	r26, 0x31	; 49
 612:	b0 e0       	ldi	r27, 0x00	; 0
 614:	e1 e3       	ldi	r30, 0x31	; 49
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	80 81       	ld	r24, Z
 61a:	48 2f       	mov	r20, r24
 61c:	8a 81       	ldd	r24, Y+2	; 0x02
 61e:	28 2f       	mov	r18, r24
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	02 2e       	mov	r0, r18
 628:	02 c0       	rjmp	.+4      	; 0x62e <DIO_SetPinDirection+0x1f4>
 62a:	88 0f       	add	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	0a 94       	dec	r0
 630:	e2 f7       	brpl	.-8      	; 0x62a <DIO_SetPinDirection+0x1f0>
 632:	80 95       	com	r24
 634:	84 23       	and	r24, r20
 636:	8c 93       	st	X, r24

	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
 638:	27 96       	adiw	r28, 0x07	; 7
 63a:	0f b6       	in	r0, 0x3f	; 63
 63c:	f8 94       	cli
 63e:	de bf       	out	0x3e, r29	; 62
 640:	0f be       	out	0x3f, r0	; 63
 642:	cd bf       	out	0x3d, r28	; 61
 644:	cf 91       	pop	r28
 646:	df 91       	pop	r29
 648:	08 95       	ret

0000064a <DIO_SetPortDirection>:


/* IO Ports */
void DIO_SetPortDirection (u8 u8PortId, u8 u8PortDir)
{
 64a:	df 93       	push	r29
 64c:	cf 93       	push	r28
 64e:	00 d0       	rcall	.+0      	; 0x650 <DIO_SetPortDirection+0x6>
 650:	00 d0       	rcall	.+0      	; 0x652 <DIO_SetPortDirection+0x8>
 652:	cd b7       	in	r28, 0x3d	; 61
 654:	de b7       	in	r29, 0x3e	; 62
 656:	89 83       	std	Y+1, r24	; 0x01
 658:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
 65a:	89 81       	ldd	r24, Y+1	; 0x01
 65c:	28 2f       	mov	r18, r24
 65e:	30 e0       	ldi	r19, 0x00	; 0
 660:	3c 83       	std	Y+4, r19	; 0x04
 662:	2b 83       	std	Y+3, r18	; 0x03
 664:	8b 81       	ldd	r24, Y+3	; 0x03
 666:	9c 81       	ldd	r25, Y+4	; 0x04
 668:	81 30       	cpi	r24, 0x01	; 1
 66a:	91 05       	cpc	r25, r1
 66c:	d1 f0       	breq	.+52     	; 0x6a2 <DIO_SetPortDirection+0x58>
 66e:	2b 81       	ldd	r18, Y+3	; 0x03
 670:	3c 81       	ldd	r19, Y+4	; 0x04
 672:	22 30       	cpi	r18, 0x02	; 2
 674:	31 05       	cpc	r19, r1
 676:	2c f4       	brge	.+10     	; 0x682 <DIO_SetPortDirection+0x38>
 678:	8b 81       	ldd	r24, Y+3	; 0x03
 67a:	9c 81       	ldd	r25, Y+4	; 0x04
 67c:	00 97       	sbiw	r24, 0x00	; 0
 67e:	61 f0       	breq	.+24     	; 0x698 <DIO_SetPortDirection+0x4e>
 680:	1e c0       	rjmp	.+60     	; 0x6be <DIO_SetPortDirection+0x74>
 682:	2b 81       	ldd	r18, Y+3	; 0x03
 684:	3c 81       	ldd	r19, Y+4	; 0x04
 686:	22 30       	cpi	r18, 0x02	; 2
 688:	31 05       	cpc	r19, r1
 68a:	81 f0       	breq	.+32     	; 0x6ac <DIO_SetPortDirection+0x62>
 68c:	8b 81       	ldd	r24, Y+3	; 0x03
 68e:	9c 81       	ldd	r25, Y+4	; 0x04
 690:	83 30       	cpi	r24, 0x03	; 3
 692:	91 05       	cpc	r25, r1
 694:	81 f0       	breq	.+32     	; 0x6b6 <DIO_SetPortDirection+0x6c>
 696:	13 c0       	rjmp	.+38     	; 0x6be <DIO_SetPortDirection+0x74>
	{
		case     PORTA: DDRA_Register = u8PortDir; break;
 698:	ea e3       	ldi	r30, 0x3A	; 58
 69a:	f0 e0       	ldi	r31, 0x00	; 0
 69c:	8a 81       	ldd	r24, Y+2	; 0x02
 69e:	80 83       	st	Z, r24
 6a0:	0e c0       	rjmp	.+28     	; 0x6be <DIO_SetPortDirection+0x74>
		case     PORTB: DDRB_Register = u8PortDir; break;
 6a2:	e7 e3       	ldi	r30, 0x37	; 55
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	8a 81       	ldd	r24, Y+2	; 0x02
 6a8:	80 83       	st	Z, r24
 6aa:	09 c0       	rjmp	.+18     	; 0x6be <DIO_SetPortDirection+0x74>
		case     PORTC: DDRC_Register = u8PortDir; break;
 6ac:	e4 e3       	ldi	r30, 0x34	; 52
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	8a 81       	ldd	r24, Y+2	; 0x02
 6b2:	80 83       	st	Z, r24
 6b4:	04 c0       	rjmp	.+8      	; 0x6be <DIO_SetPortDirection+0x74>
		case     PORTD: DDRD_Register = u8PortDir; break;
 6b6:	e1 e3       	ldi	r30, 0x31	; 49
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	8a 81       	ldd	r24, Y+2	; 0x02
 6bc:	80 83       	st	Z, r24
		default: /* Wrong Port ID */       break;
	}
}
 6be:	0f 90       	pop	r0
 6c0:	0f 90       	pop	r0
 6c2:	0f 90       	pop	r0
 6c4:	0f 90       	pop	r0
 6c6:	cf 91       	pop	r28
 6c8:	df 91       	pop	r29
 6ca:	08 95       	ret

000006cc <DIO_SetPortValue>:

void DIO_SetPortValue (u8 u8PortId, u8 u8PortVal)
{
 6cc:	df 93       	push	r29
 6ce:	cf 93       	push	r28
 6d0:	00 d0       	rcall	.+0      	; 0x6d2 <DIO_SetPortValue+0x6>
 6d2:	00 d0       	rcall	.+0      	; 0x6d4 <DIO_SetPortValue+0x8>
 6d4:	cd b7       	in	r28, 0x3d	; 61
 6d6:	de b7       	in	r29, 0x3e	; 62
 6d8:	89 83       	std	Y+1, r24	; 0x01
 6da:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
 6dc:	89 81       	ldd	r24, Y+1	; 0x01
 6de:	28 2f       	mov	r18, r24
 6e0:	30 e0       	ldi	r19, 0x00	; 0
 6e2:	3c 83       	std	Y+4, r19	; 0x04
 6e4:	2b 83       	std	Y+3, r18	; 0x03
 6e6:	8b 81       	ldd	r24, Y+3	; 0x03
 6e8:	9c 81       	ldd	r25, Y+4	; 0x04
 6ea:	81 30       	cpi	r24, 0x01	; 1
 6ec:	91 05       	cpc	r25, r1
 6ee:	d1 f0       	breq	.+52     	; 0x724 <DIO_SetPortValue+0x58>
 6f0:	2b 81       	ldd	r18, Y+3	; 0x03
 6f2:	3c 81       	ldd	r19, Y+4	; 0x04
 6f4:	22 30       	cpi	r18, 0x02	; 2
 6f6:	31 05       	cpc	r19, r1
 6f8:	2c f4       	brge	.+10     	; 0x704 <DIO_SetPortValue+0x38>
 6fa:	8b 81       	ldd	r24, Y+3	; 0x03
 6fc:	9c 81       	ldd	r25, Y+4	; 0x04
 6fe:	00 97       	sbiw	r24, 0x00	; 0
 700:	61 f0       	breq	.+24     	; 0x71a <DIO_SetPortValue+0x4e>
 702:	1e c0       	rjmp	.+60     	; 0x740 <DIO_SetPortValue+0x74>
 704:	2b 81       	ldd	r18, Y+3	; 0x03
 706:	3c 81       	ldd	r19, Y+4	; 0x04
 708:	22 30       	cpi	r18, 0x02	; 2
 70a:	31 05       	cpc	r19, r1
 70c:	81 f0       	breq	.+32     	; 0x72e <DIO_SetPortValue+0x62>
 70e:	8b 81       	ldd	r24, Y+3	; 0x03
 710:	9c 81       	ldd	r25, Y+4	; 0x04
 712:	83 30       	cpi	r24, 0x03	; 3
 714:	91 05       	cpc	r25, r1
 716:	81 f0       	breq	.+32     	; 0x738 <DIO_SetPortValue+0x6c>
 718:	13 c0       	rjmp	.+38     	; 0x740 <DIO_SetPortValue+0x74>
	{
		case     PORTA: PORTA_Register = u8PortVal; break;
 71a:	eb e3       	ldi	r30, 0x3B	; 59
 71c:	f0 e0       	ldi	r31, 0x00	; 0
 71e:	8a 81       	ldd	r24, Y+2	; 0x02
 720:	80 83       	st	Z, r24
 722:	0e c0       	rjmp	.+28     	; 0x740 <DIO_SetPortValue+0x74>
		case     PORTB: PORTB_Register = u8PortVal; break;
 724:	e8 e3       	ldi	r30, 0x38	; 56
 726:	f0 e0       	ldi	r31, 0x00	; 0
 728:	8a 81       	ldd	r24, Y+2	; 0x02
 72a:	80 83       	st	Z, r24
 72c:	09 c0       	rjmp	.+18     	; 0x740 <DIO_SetPortValue+0x74>
		case     PORTC: PORTC_Register = u8PortVal; break;
 72e:	e5 e3       	ldi	r30, 0x35	; 53
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	8a 81       	ldd	r24, Y+2	; 0x02
 734:	80 83       	st	Z, r24
 736:	04 c0       	rjmp	.+8      	; 0x740 <DIO_SetPortValue+0x74>
		case     PORTD: PORTD_Register = u8PortVal; break;
 738:	e2 e3       	ldi	r30, 0x32	; 50
 73a:	f0 e0       	ldi	r31, 0x00	; 0
 73c:	8a 81       	ldd	r24, Y+2	; 0x02
 73e:	80 83       	st	Z, r24
		default: /* Wrong Port ID */        break;
	}
}
 740:	0f 90       	pop	r0
 742:	0f 90       	pop	r0
 744:	0f 90       	pop	r0
 746:	0f 90       	pop	r0
 748:	cf 91       	pop	r28
 74a:	df 91       	pop	r29
 74c:	08 95       	ret

0000074e <main>:

#include "ADC.h"


int main(void)
{
 74e:	df 93       	push	r29
 750:	cf 93       	push	r28
 752:	00 d0       	rcall	.+0      	; 0x754 <main+0x6>
 754:	00 d0       	rcall	.+0      	; 0x756 <main+0x8>
 756:	cd b7       	in	r28, 0x3d	; 61
 758:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPortDirection(PORTD,HIGH);
 75a:	83 e0       	ldi	r24, 0x03	; 3
 75c:	61 e0       	ldi	r22, 0x01	; 1
 75e:	0e 94 25 03 	call	0x64a	; 0x64a <DIO_SetPortDirection>
	DIO_SetPortDirection(PORTB,HIGH);
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	61 e0       	ldi	r22, 0x01	; 1
 766:	0e 94 25 03 	call	0x64a	; 0x64a <DIO_SetPortDirection>
	DIO_SetPortDirection(PORTC,HIGH);
 76a:	82 e0       	ldi	r24, 0x02	; 2
 76c:	61 e0       	ldi	r22, 0x01	; 1
 76e:	0e 94 25 03 	call	0x64a	; 0x64a <DIO_SetPortDirection>
	DIO_SetPortDirection(PORTA,LOW);
 772:	80 e0       	ldi	r24, 0x00	; 0
 774:	60 e0       	ldi	r22, 0x00	; 0
 776:	0e 94 25 03 	call	0x64a	; 0x64a <DIO_SetPortDirection>

	ADC_Init();
 77a:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_Init>



	while(1)
	{
		int val = ADC_Read(0);
 77e:	80 e0       	ldi	r24, 0x00	; 0
 780:	0e 94 67 00 	call	0xce	; 0xce <ADC_Read>
 784:	88 2f       	mov	r24, r24
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	9c 83       	std	Y+4, r25	; 0x04
 78a:	8b 83       	std	Y+3, r24	; 0x03

		int ADC = (val * 5)/250;
 78c:	2b 81       	ldd	r18, Y+3	; 0x03
 78e:	3c 81       	ldd	r19, Y+4	; 0x04
 790:	c9 01       	movw	r24, r18
 792:	88 0f       	add	r24, r24
 794:	99 1f       	adc	r25, r25
 796:	88 0f       	add	r24, r24
 798:	99 1f       	adc	r25, r25
 79a:	82 0f       	add	r24, r18
 79c:	93 1f       	adc	r25, r19
 79e:	2a ef       	ldi	r18, 0xFA	; 250
 7a0:	30 e0       	ldi	r19, 0x00	; 0
 7a2:	b9 01       	movw	r22, r18
 7a4:	0e 94 cf 04 	call	0x99e	; 0x99e <__divmodhi4>
 7a8:	cb 01       	movw	r24, r22
 7aa:	9a 83       	std	Y+2, r25	; 0x02
 7ac:	89 83       	std	Y+1, r24	; 0x01

		if ( ADC > 3 )
 7ae:	89 81       	ldd	r24, Y+1	; 0x01
 7b0:	9a 81       	ldd	r25, Y+2	; 0x02
 7b2:	84 30       	cpi	r24, 0x04	; 4
 7b4:	91 05       	cpc	r25, r1
 7b6:	0c f4       	brge	.+2      	; 0x7ba <main+0x6c>
 7b8:	79 c0       	rjmp	.+242    	; 0x8ac <__stack+0x4d>
		{

			DIO_SetPinValue(PORTB,PIN0,LOW);
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	60 e0       	ldi	r22, 0x00	; 0
 7be:	40 e0       	ldi	r20, 0x00	; 0
 7c0:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTB,PIN1,LOW);
 7c4:	81 e0       	ldi	r24, 0x01	; 1
 7c6:	61 e0       	ldi	r22, 0x01	; 1
 7c8:	40 e0       	ldi	r20, 0x00	; 0
 7ca:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTB,PIN2,HIGH);
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	62 e0       	ldi	r22, 0x02	; 2
 7d2:	41 e0       	ldi	r20, 0x01	; 1
 7d4:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTB,PIN3,HIGH);
 7d8:	81 e0       	ldi	r24, 0x01	; 1
 7da:	63 e0       	ldi	r22, 0x03	; 3
 7dc:	41 e0       	ldi	r20, 0x01	; 1
 7de:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTB,PIN4,HIGH);
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	64 e0       	ldi	r22, 0x04	; 4
 7e6:	41 e0       	ldi	r20, 0x01	; 1
 7e8:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTB,PIN5,HIGH);
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	65 e0       	ldi	r22, 0x05	; 5
 7f0:	41 e0       	ldi	r20, 0x01	; 1
 7f2:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTB,PIN6,HIGH);
 7f6:	81 e0       	ldi	r24, 0x01	; 1
 7f8:	66 e0       	ldi	r22, 0x06	; 6
 7fa:	41 e0       	ldi	r20, 0x01	; 1
 7fc:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTB,PIN7,HIGH);
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	67 e0       	ldi	r22, 0x07	; 7
 804:	41 e0       	ldi	r20, 0x01	; 1
 806:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>

			DIO_SetPinValue(PORTC,PIN0,LOW);
 80a:	82 e0       	ldi	r24, 0x02	; 2
 80c:	60 e0       	ldi	r22, 0x00	; 0
 80e:	40 e0       	ldi	r20, 0x00	; 0
 810:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTC,PIN1,HIGH);
 814:	82 e0       	ldi	r24, 0x02	; 2
 816:	61 e0       	ldi	r22, 0x01	; 1
 818:	41 e0       	ldi	r20, 0x01	; 1
 81a:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTC,PIN2,HIGH);
 81e:	82 e0       	ldi	r24, 0x02	; 2
 820:	62 e0       	ldi	r22, 0x02	; 2
 822:	41 e0       	ldi	r20, 0x01	; 1
 824:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTC,PIN3,HIGH);
 828:	82 e0       	ldi	r24, 0x02	; 2
 82a:	63 e0       	ldi	r22, 0x03	; 3
 82c:	41 e0       	ldi	r20, 0x01	; 1
 82e:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTC,PIN4,LOW);
 832:	82 e0       	ldi	r24, 0x02	; 2
 834:	64 e0       	ldi	r22, 0x04	; 4
 836:	40 e0       	ldi	r20, 0x00	; 0
 838:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTC,PIN5,LOW);
 83c:	82 e0       	ldi	r24, 0x02	; 2
 83e:	65 e0       	ldi	r22, 0x05	; 5
 840:	40 e0       	ldi	r20, 0x00	; 0
 842:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTC,PIN6,LOW);
 846:	82 e0       	ldi	r24, 0x02	; 2
 848:	66 e0       	ldi	r22, 0x06	; 6
 84a:	40 e0       	ldi	r20, 0x00	; 0
 84c:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTC,PIN7,HIGH);
 850:	82 e0       	ldi	r24, 0x02	; 2
 852:	67 e0       	ldi	r22, 0x07	; 7
 854:	41 e0       	ldi	r20, 0x01	; 1
 856:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>

			DIO_SetPinValue(PORTD,PIN0,LOW);
 85a:	83 e0       	ldi	r24, 0x03	; 3
 85c:	60 e0       	ldi	r22, 0x00	; 0
 85e:	40 e0       	ldi	r20, 0x00	; 0
 860:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTD,PIN1,HIGH);
 864:	83 e0       	ldi	r24, 0x03	; 3
 866:	61 e0       	ldi	r22, 0x01	; 1
 868:	41 e0       	ldi	r20, 0x01	; 1
 86a:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTD,PIN2,HIGH);
 86e:	83 e0       	ldi	r24, 0x03	; 3
 870:	62 e0       	ldi	r22, 0x02	; 2
 872:	41 e0       	ldi	r20, 0x01	; 1
 874:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTD,PIN3,HIGH);
 878:	83 e0       	ldi	r24, 0x03	; 3
 87a:	63 e0       	ldi	r22, 0x03	; 3
 87c:	41 e0       	ldi	r20, 0x01	; 1
 87e:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTD,PIN4,LOW);
 882:	83 e0       	ldi	r24, 0x03	; 3
 884:	64 e0       	ldi	r22, 0x04	; 4
 886:	40 e0       	ldi	r20, 0x00	; 0
 888:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTD,PIN5,LOW);
 88c:	83 e0       	ldi	r24, 0x03	; 3
 88e:	65 e0       	ldi	r22, 0x05	; 5
 890:	40 e0       	ldi	r20, 0x00	; 0
 892:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTD,PIN6,LOW);
 896:	83 e0       	ldi	r24, 0x03	; 3
 898:	66 e0       	ldi	r22, 0x06	; 6
 89a:	40 e0       	ldi	r20, 0x00	; 0
 89c:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTD,PIN7,HIGH);
 8a0:	83 e0       	ldi	r24, 0x03	; 3
 8a2:	67 e0       	ldi	r22, 0x07	; 7
 8a4:	41 e0       	ldi	r20, 0x01	; 1
 8a6:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
 8aa:	69 cf       	rjmp	.-302    	; 0x77e <main+0x30>
		}
		else
		{


			DIO_SetPinValue(PORTB,PIN0,LOW);
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	60 e0       	ldi	r22, 0x00	; 0
 8b0:	40 e0       	ldi	r20, 0x00	; 0
 8b2:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTB,PIN1,LOW);
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	61 e0       	ldi	r22, 0x01	; 1
 8ba:	40 e0       	ldi	r20, 0x00	; 0
 8bc:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTB,PIN2,HIGH);
 8c0:	81 e0       	ldi	r24, 0x01	; 1
 8c2:	62 e0       	ldi	r22, 0x02	; 2
 8c4:	41 e0       	ldi	r20, 0x01	; 1
 8c6:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTB,PIN3,HIGH);
 8ca:	81 e0       	ldi	r24, 0x01	; 1
 8cc:	63 e0       	ldi	r22, 0x03	; 3
 8ce:	41 e0       	ldi	r20, 0x01	; 1
 8d0:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTB,PIN4,HIGH);
 8d4:	81 e0       	ldi	r24, 0x01	; 1
 8d6:	64 e0       	ldi	r22, 0x04	; 4
 8d8:	41 e0       	ldi	r20, 0x01	; 1
 8da:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTB,PIN5,HIGH);
 8de:	81 e0       	ldi	r24, 0x01	; 1
 8e0:	65 e0       	ldi	r22, 0x05	; 5
 8e2:	41 e0       	ldi	r20, 0x01	; 1
 8e4:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTB,PIN6,HIGH);
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	66 e0       	ldi	r22, 0x06	; 6
 8ec:	41 e0       	ldi	r20, 0x01	; 1
 8ee:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTB,PIN7,HIGH);
 8f2:	81 e0       	ldi	r24, 0x01	; 1
 8f4:	67 e0       	ldi	r22, 0x07	; 7
 8f6:	41 e0       	ldi	r20, 0x01	; 1
 8f8:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>

			DIO_SetPinValue(PORTC,PIN0,LOW);
 8fc:	82 e0       	ldi	r24, 0x02	; 2
 8fe:	60 e0       	ldi	r22, 0x00	; 0
 900:	40 e0       	ldi	r20, 0x00	; 0
 902:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTC,PIN1,HIGH);
 906:	82 e0       	ldi	r24, 0x02	; 2
 908:	61 e0       	ldi	r22, 0x01	; 1
 90a:	41 e0       	ldi	r20, 0x01	; 1
 90c:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTC,PIN2,LOW);
 910:	82 e0       	ldi	r24, 0x02	; 2
 912:	62 e0       	ldi	r22, 0x02	; 2
 914:	40 e0       	ldi	r20, 0x00	; 0
 916:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTC,PIN3,HIGH);
 91a:	82 e0       	ldi	r24, 0x02	; 2
 91c:	63 e0       	ldi	r22, 0x03	; 3
 91e:	41 e0       	ldi	r20, 0x01	; 1
 920:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTC,PIN4,LOW);
 924:	82 e0       	ldi	r24, 0x02	; 2
 926:	64 e0       	ldi	r22, 0x04	; 4
 928:	40 e0       	ldi	r20, 0x00	; 0
 92a:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTC,PIN5,HIGH);
 92e:	82 e0       	ldi	r24, 0x02	; 2
 930:	65 e0       	ldi	r22, 0x05	; 5
 932:	41 e0       	ldi	r20, 0x01	; 1
 934:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTC,PIN6,LOW);
 938:	82 e0       	ldi	r24, 0x02	; 2
 93a:	66 e0       	ldi	r22, 0x06	; 6
 93c:	40 e0       	ldi	r20, 0x00	; 0
 93e:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTC,PIN7,LOW);
 942:	82 e0       	ldi	r24, 0x02	; 2
 944:	67 e0       	ldi	r22, 0x07	; 7
 946:	40 e0       	ldi	r20, 0x00	; 0
 948:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>

			DIO_SetPinValue(PORTD,PIN0,LOW);
 94c:	83 e0       	ldi	r24, 0x03	; 3
 94e:	60 e0       	ldi	r22, 0x00	; 0
 950:	40 e0       	ldi	r20, 0x00	; 0
 952:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTD,PIN1,LOW);
 956:	83 e0       	ldi	r24, 0x03	; 3
 958:	61 e0       	ldi	r22, 0x01	; 1
 95a:	40 e0       	ldi	r20, 0x00	; 0
 95c:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTD,PIN2,LOW);
 960:	83 e0       	ldi	r24, 0x03	; 3
 962:	62 e0       	ldi	r22, 0x02	; 2
 964:	40 e0       	ldi	r20, 0x00	; 0
 966:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTD,PIN3,LOW);
 96a:	83 e0       	ldi	r24, 0x03	; 3
 96c:	63 e0       	ldi	r22, 0x03	; 3
 96e:	40 e0       	ldi	r20, 0x00	; 0
 970:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTD,PIN4,LOW);
 974:	83 e0       	ldi	r24, 0x03	; 3
 976:	64 e0       	ldi	r22, 0x04	; 4
 978:	40 e0       	ldi	r20, 0x00	; 0
 97a:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTD,PIN5,LOW);
 97e:	83 e0       	ldi	r24, 0x03	; 3
 980:	65 e0       	ldi	r22, 0x05	; 5
 982:	40 e0       	ldi	r20, 0x00	; 0
 984:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTD,PIN6,LOW);
 988:	83 e0       	ldi	r24, 0x03	; 3
 98a:	66 e0       	ldi	r22, 0x06	; 6
 98c:	40 e0       	ldi	r20, 0x00	; 0
 98e:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
			DIO_SetPinValue(PORTD,PIN7,LOW);
 992:	83 e0       	ldi	r24, 0x03	; 3
 994:	67 e0       	ldi	r22, 0x07	; 7
 996:	40 e0       	ldi	r20, 0x00	; 0
 998:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SetPinValue>
 99c:	f0 ce       	rjmp	.-544    	; 0x77e <main+0x30>

0000099e <__divmodhi4>:
 99e:	97 fb       	bst	r25, 7
 9a0:	09 2e       	mov	r0, r25
 9a2:	07 26       	eor	r0, r23
 9a4:	0a d0       	rcall	.+20     	; 0x9ba <__divmodhi4_neg1>
 9a6:	77 fd       	sbrc	r23, 7
 9a8:	04 d0       	rcall	.+8      	; 0x9b2 <__divmodhi4_neg2>
 9aa:	0c d0       	rcall	.+24     	; 0x9c4 <__udivmodhi4>
 9ac:	06 d0       	rcall	.+12     	; 0x9ba <__divmodhi4_neg1>
 9ae:	00 20       	and	r0, r0
 9b0:	1a f4       	brpl	.+6      	; 0x9b8 <__divmodhi4_exit>

000009b2 <__divmodhi4_neg2>:
 9b2:	70 95       	com	r23
 9b4:	61 95       	neg	r22
 9b6:	7f 4f       	sbci	r23, 0xFF	; 255

000009b8 <__divmodhi4_exit>:
 9b8:	08 95       	ret

000009ba <__divmodhi4_neg1>:
 9ba:	f6 f7       	brtc	.-4      	; 0x9b8 <__divmodhi4_exit>
 9bc:	90 95       	com	r25
 9be:	81 95       	neg	r24
 9c0:	9f 4f       	sbci	r25, 0xFF	; 255
 9c2:	08 95       	ret

000009c4 <__udivmodhi4>:
 9c4:	aa 1b       	sub	r26, r26
 9c6:	bb 1b       	sub	r27, r27
 9c8:	51 e1       	ldi	r21, 0x11	; 17
 9ca:	07 c0       	rjmp	.+14     	; 0x9da <__udivmodhi4_ep>

000009cc <__udivmodhi4_loop>:
 9cc:	aa 1f       	adc	r26, r26
 9ce:	bb 1f       	adc	r27, r27
 9d0:	a6 17       	cp	r26, r22
 9d2:	b7 07       	cpc	r27, r23
 9d4:	10 f0       	brcs	.+4      	; 0x9da <__udivmodhi4_ep>
 9d6:	a6 1b       	sub	r26, r22
 9d8:	b7 0b       	sbc	r27, r23

000009da <__udivmodhi4_ep>:
 9da:	88 1f       	adc	r24, r24
 9dc:	99 1f       	adc	r25, r25
 9de:	5a 95       	dec	r21
 9e0:	a9 f7       	brne	.-22     	; 0x9cc <__udivmodhi4_loop>
 9e2:	80 95       	com	r24
 9e4:	90 95       	com	r25
 9e6:	bc 01       	movw	r22, r24
 9e8:	cd 01       	movw	r24, r26
 9ea:	08 95       	ret

000009ec <_exit>:
 9ec:	f8 94       	cli

000009ee <__stop_program>:
 9ee:	ff cf       	rjmp	.-2      	; 0x9ee <__stop_program>
