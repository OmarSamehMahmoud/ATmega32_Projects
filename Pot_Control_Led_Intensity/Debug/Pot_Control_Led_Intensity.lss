
Pot_Control_Led_Intensity.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000022ba  0000232e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000018fc  00000000  00000000  00002340  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b23  00000000  00000000  00003c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000475f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000489f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006658  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007543  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000082f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008450  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000086dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008eab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 28 00 	jmp	0x50	; 0x50 <__ctors_end>
       4:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
       8:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
       c:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
      10:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
      14:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
      18:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
      1c:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
      20:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
      24:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
      28:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
      2c:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
      30:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
      34:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
      38:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
      3c:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
      40:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
      44:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
      48:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
      4c:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>

00000050 <__ctors_end>:
      50:	11 24       	eor	r1, r1
      52:	1f be       	out	0x3f, r1	; 63
      54:	cf e5       	ldi	r28, 0x5F	; 95
      56:	d8 e0       	ldi	r29, 0x08	; 8
      58:	de bf       	out	0x3e, r29	; 62
      5a:	cd bf       	out	0x3d, r28	; 61

0000005c <__do_copy_data>:
      5c:	10 e0       	ldi	r17, 0x00	; 0
      5e:	a0 e6       	ldi	r26, 0x60	; 96
      60:	b0 e0       	ldi	r27, 0x00	; 0
      62:	ea eb       	ldi	r30, 0xBA	; 186
      64:	f2 e2       	ldi	r31, 0x22	; 34
      66:	02 c0       	rjmp	.+4      	; 0x6c <.do_copy_data_start>

00000068 <.do_copy_data_loop>:
      68:	05 90       	lpm	r0, Z+
      6a:	0d 92       	st	X+, r0

0000006c <.do_copy_data_start>:
      6c:	a2 37       	cpi	r26, 0x72	; 114
      6e:	b1 07       	cpc	r27, r17
      70:	d9 f7       	brne	.-10     	; 0x68 <.do_copy_data_loop>
      72:	0e 94 78 10 	call	0x20f0	; 0x20f0 <main>
      76:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <_exit>

0000007a <__bad_interrupt>:
      7a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007e <__fixunssfsi>:
      7e:	ef 92       	push	r14
      80:	ff 92       	push	r15
      82:	0f 93       	push	r16
      84:	1f 93       	push	r17
      86:	7b 01       	movw	r14, r22
      88:	8c 01       	movw	r16, r24
      8a:	20 e0       	ldi	r18, 0x00	; 0
      8c:	30 e0       	ldi	r19, 0x00	; 0
      8e:	40 e0       	ldi	r20, 0x00	; 0
      90:	5f e4       	ldi	r21, 0x4F	; 79
      92:	0e 94 3f 03 	call	0x67e	; 0x67e <__gesf2>
      96:	88 23       	and	r24, r24
      98:	8c f0       	brlt	.+34     	; 0xbc <__fixunssfsi+0x3e>
      9a:	c8 01       	movw	r24, r16
      9c:	b7 01       	movw	r22, r14
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 b7 01 	call	0x36e	; 0x36e <__subsf3>
      aa:	0e 94 9f 03 	call	0x73e	; 0x73e <__fixsfsi>
      ae:	9b 01       	movw	r18, r22
      b0:	ac 01       	movw	r20, r24
      b2:	20 50       	subi	r18, 0x00	; 0
      b4:	30 40       	sbci	r19, 0x00	; 0
      b6:	40 40       	sbci	r20, 0x00	; 0
      b8:	50 48       	sbci	r21, 0x80	; 128
      ba:	06 c0       	rjmp	.+12     	; 0xc8 <__fixunssfsi+0x4a>
      bc:	c8 01       	movw	r24, r16
      be:	b7 01       	movw	r22, r14
      c0:	0e 94 9f 03 	call	0x73e	; 0x73e <__fixsfsi>
      c4:	9b 01       	movw	r18, r22
      c6:	ac 01       	movw	r20, r24
      c8:	b9 01       	movw	r22, r18
      ca:	ca 01       	movw	r24, r20
      cc:	1f 91       	pop	r17
      ce:	0f 91       	pop	r16
      d0:	ff 90       	pop	r15
      d2:	ef 90       	pop	r14
      d4:	08 95       	ret

000000d6 <_fpadd_parts>:
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b0 e0       	ldi	r27, 0x00	; 0
      da:	e1 e7       	ldi	r30, 0x71	; 113
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__prologue_saves__>
      e2:	dc 01       	movw	r26, r24
      e4:	2b 01       	movw	r4, r22
      e6:	fa 01       	movw	r30, r20
      e8:	9c 91       	ld	r25, X
      ea:	92 30       	cpi	r25, 0x02	; 2
      ec:	08 f4       	brcc	.+2      	; 0xf0 <_fpadd_parts+0x1a>
      ee:	39 c1       	rjmp	.+626    	; 0x362 <_fpadd_parts+0x28c>
      f0:	eb 01       	movw	r28, r22
      f2:	88 81       	ld	r24, Y
      f4:	82 30       	cpi	r24, 0x02	; 2
      f6:	08 f4       	brcc	.+2      	; 0xfa <_fpadd_parts+0x24>
      f8:	33 c1       	rjmp	.+614    	; 0x360 <_fpadd_parts+0x28a>
      fa:	94 30       	cpi	r25, 0x04	; 4
      fc:	69 f4       	brne	.+26     	; 0x118 <_fpadd_parts+0x42>
      fe:	84 30       	cpi	r24, 0x04	; 4
     100:	09 f0       	breq	.+2      	; 0x104 <_fpadd_parts+0x2e>
     102:	2f c1       	rjmp	.+606    	; 0x362 <_fpadd_parts+0x28c>
     104:	11 96       	adiw	r26, 0x01	; 1
     106:	9c 91       	ld	r25, X
     108:	11 97       	sbiw	r26, 0x01	; 1
     10a:	89 81       	ldd	r24, Y+1	; 0x01
     10c:	98 17       	cp	r25, r24
     10e:	09 f4       	brne	.+2      	; 0x112 <_fpadd_parts+0x3c>
     110:	28 c1       	rjmp	.+592    	; 0x362 <_fpadd_parts+0x28c>
     112:	a0 e6       	ldi	r26, 0x60	; 96
     114:	b0 e0       	ldi	r27, 0x00	; 0
     116:	25 c1       	rjmp	.+586    	; 0x362 <_fpadd_parts+0x28c>
     118:	84 30       	cpi	r24, 0x04	; 4
     11a:	09 f4       	brne	.+2      	; 0x11e <_fpadd_parts+0x48>
     11c:	21 c1       	rjmp	.+578    	; 0x360 <_fpadd_parts+0x28a>
     11e:	82 30       	cpi	r24, 0x02	; 2
     120:	a9 f4       	brne	.+42     	; 0x14c <_fpadd_parts+0x76>
     122:	92 30       	cpi	r25, 0x02	; 2
     124:	09 f0       	breq	.+2      	; 0x128 <_fpadd_parts+0x52>
     126:	1d c1       	rjmp	.+570    	; 0x362 <_fpadd_parts+0x28c>
     128:	9a 01       	movw	r18, r20
     12a:	ad 01       	movw	r20, r26
     12c:	88 e0       	ldi	r24, 0x08	; 8
     12e:	ea 01       	movw	r28, r20
     130:	09 90       	ld	r0, Y+
     132:	ae 01       	movw	r20, r28
     134:	e9 01       	movw	r28, r18
     136:	09 92       	st	Y+, r0
     138:	9e 01       	movw	r18, r28
     13a:	81 50       	subi	r24, 0x01	; 1
     13c:	c1 f7       	brne	.-16     	; 0x12e <_fpadd_parts+0x58>
     13e:	e2 01       	movw	r28, r4
     140:	89 81       	ldd	r24, Y+1	; 0x01
     142:	11 96       	adiw	r26, 0x01	; 1
     144:	9c 91       	ld	r25, X
     146:	89 23       	and	r24, r25
     148:	81 83       	std	Z+1, r24	; 0x01
     14a:	08 c1       	rjmp	.+528    	; 0x35c <_fpadd_parts+0x286>
     14c:	92 30       	cpi	r25, 0x02	; 2
     14e:	09 f4       	brne	.+2      	; 0x152 <_fpadd_parts+0x7c>
     150:	07 c1       	rjmp	.+526    	; 0x360 <_fpadd_parts+0x28a>
     152:	12 96       	adiw	r26, 0x02	; 2
     154:	2d 90       	ld	r2, X+
     156:	3c 90       	ld	r3, X
     158:	13 97       	sbiw	r26, 0x03	; 3
     15a:	eb 01       	movw	r28, r22
     15c:	8a 81       	ldd	r24, Y+2	; 0x02
     15e:	9b 81       	ldd	r25, Y+3	; 0x03
     160:	14 96       	adiw	r26, 0x04	; 4
     162:	ad 90       	ld	r10, X+
     164:	bd 90       	ld	r11, X+
     166:	cd 90       	ld	r12, X+
     168:	dc 90       	ld	r13, X
     16a:	17 97       	sbiw	r26, 0x07	; 7
     16c:	ec 80       	ldd	r14, Y+4	; 0x04
     16e:	fd 80       	ldd	r15, Y+5	; 0x05
     170:	0e 81       	ldd	r16, Y+6	; 0x06
     172:	1f 81       	ldd	r17, Y+7	; 0x07
     174:	91 01       	movw	r18, r2
     176:	28 1b       	sub	r18, r24
     178:	39 0b       	sbc	r19, r25
     17a:	b9 01       	movw	r22, r18
     17c:	37 ff       	sbrs	r19, 7
     17e:	04 c0       	rjmp	.+8      	; 0x188 <_fpadd_parts+0xb2>
     180:	66 27       	eor	r22, r22
     182:	77 27       	eor	r23, r23
     184:	62 1b       	sub	r22, r18
     186:	73 0b       	sbc	r23, r19
     188:	60 32       	cpi	r22, 0x20	; 32
     18a:	71 05       	cpc	r23, r1
     18c:	0c f0       	brlt	.+2      	; 0x190 <_fpadd_parts+0xba>
     18e:	61 c0       	rjmp	.+194    	; 0x252 <_fpadd_parts+0x17c>
     190:	12 16       	cp	r1, r18
     192:	13 06       	cpc	r1, r19
     194:	6c f5       	brge	.+90     	; 0x1f0 <_fpadd_parts+0x11a>
     196:	37 01       	movw	r6, r14
     198:	48 01       	movw	r8, r16
     19a:	06 2e       	mov	r0, r22
     19c:	04 c0       	rjmp	.+8      	; 0x1a6 <_fpadd_parts+0xd0>
     19e:	96 94       	lsr	r9
     1a0:	87 94       	ror	r8
     1a2:	77 94       	ror	r7
     1a4:	67 94       	ror	r6
     1a6:	0a 94       	dec	r0
     1a8:	d2 f7       	brpl	.-12     	; 0x19e <_fpadd_parts+0xc8>
     1aa:	21 e0       	ldi	r18, 0x01	; 1
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	40 e0       	ldi	r20, 0x00	; 0
     1b0:	50 e0       	ldi	r21, 0x00	; 0
     1b2:	04 c0       	rjmp	.+8      	; 0x1bc <_fpadd_parts+0xe6>
     1b4:	22 0f       	add	r18, r18
     1b6:	33 1f       	adc	r19, r19
     1b8:	44 1f       	adc	r20, r20
     1ba:	55 1f       	adc	r21, r21
     1bc:	6a 95       	dec	r22
     1be:	d2 f7       	brpl	.-12     	; 0x1b4 <_fpadd_parts+0xde>
     1c0:	21 50       	subi	r18, 0x01	; 1
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 40       	sbci	r21, 0x00	; 0
     1c8:	2e 21       	and	r18, r14
     1ca:	3f 21       	and	r19, r15
     1cc:	40 23       	and	r20, r16
     1ce:	51 23       	and	r21, r17
     1d0:	21 15       	cp	r18, r1
     1d2:	31 05       	cpc	r19, r1
     1d4:	41 05       	cpc	r20, r1
     1d6:	51 05       	cpc	r21, r1
     1d8:	21 f0       	breq	.+8      	; 0x1e2 <_fpadd_parts+0x10c>
     1da:	21 e0       	ldi	r18, 0x01	; 1
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	40 e0       	ldi	r20, 0x00	; 0
     1e0:	50 e0       	ldi	r21, 0x00	; 0
     1e2:	79 01       	movw	r14, r18
     1e4:	8a 01       	movw	r16, r20
     1e6:	e6 28       	or	r14, r6
     1e8:	f7 28       	or	r15, r7
     1ea:	08 29       	or	r16, r8
     1ec:	19 29       	or	r17, r9
     1ee:	3c c0       	rjmp	.+120    	; 0x268 <_fpadd_parts+0x192>
     1f0:	23 2b       	or	r18, r19
     1f2:	d1 f1       	breq	.+116    	; 0x268 <_fpadd_parts+0x192>
     1f4:	26 0e       	add	r2, r22
     1f6:	37 1e       	adc	r3, r23
     1f8:	35 01       	movw	r6, r10
     1fa:	46 01       	movw	r8, r12
     1fc:	06 2e       	mov	r0, r22
     1fe:	04 c0       	rjmp	.+8      	; 0x208 <_fpadd_parts+0x132>
     200:	96 94       	lsr	r9
     202:	87 94       	ror	r8
     204:	77 94       	ror	r7
     206:	67 94       	ror	r6
     208:	0a 94       	dec	r0
     20a:	d2 f7       	brpl	.-12     	; 0x200 <_fpadd_parts+0x12a>
     20c:	21 e0       	ldi	r18, 0x01	; 1
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	40 e0       	ldi	r20, 0x00	; 0
     212:	50 e0       	ldi	r21, 0x00	; 0
     214:	04 c0       	rjmp	.+8      	; 0x21e <_fpadd_parts+0x148>
     216:	22 0f       	add	r18, r18
     218:	33 1f       	adc	r19, r19
     21a:	44 1f       	adc	r20, r20
     21c:	55 1f       	adc	r21, r21
     21e:	6a 95       	dec	r22
     220:	d2 f7       	brpl	.-12     	; 0x216 <_fpadd_parts+0x140>
     222:	21 50       	subi	r18, 0x01	; 1
     224:	30 40       	sbci	r19, 0x00	; 0
     226:	40 40       	sbci	r20, 0x00	; 0
     228:	50 40       	sbci	r21, 0x00	; 0
     22a:	2a 21       	and	r18, r10
     22c:	3b 21       	and	r19, r11
     22e:	4c 21       	and	r20, r12
     230:	5d 21       	and	r21, r13
     232:	21 15       	cp	r18, r1
     234:	31 05       	cpc	r19, r1
     236:	41 05       	cpc	r20, r1
     238:	51 05       	cpc	r21, r1
     23a:	21 f0       	breq	.+8      	; 0x244 <_fpadd_parts+0x16e>
     23c:	21 e0       	ldi	r18, 0x01	; 1
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	40 e0       	ldi	r20, 0x00	; 0
     242:	50 e0       	ldi	r21, 0x00	; 0
     244:	59 01       	movw	r10, r18
     246:	6a 01       	movw	r12, r20
     248:	a6 28       	or	r10, r6
     24a:	b7 28       	or	r11, r7
     24c:	c8 28       	or	r12, r8
     24e:	d9 28       	or	r13, r9
     250:	0b c0       	rjmp	.+22     	; 0x268 <_fpadd_parts+0x192>
     252:	82 15       	cp	r24, r2
     254:	93 05       	cpc	r25, r3
     256:	2c f0       	brlt	.+10     	; 0x262 <_fpadd_parts+0x18c>
     258:	1c 01       	movw	r2, r24
     25a:	aa 24       	eor	r10, r10
     25c:	bb 24       	eor	r11, r11
     25e:	65 01       	movw	r12, r10
     260:	03 c0       	rjmp	.+6      	; 0x268 <_fpadd_parts+0x192>
     262:	ee 24       	eor	r14, r14
     264:	ff 24       	eor	r15, r15
     266:	87 01       	movw	r16, r14
     268:	11 96       	adiw	r26, 0x01	; 1
     26a:	9c 91       	ld	r25, X
     26c:	d2 01       	movw	r26, r4
     26e:	11 96       	adiw	r26, 0x01	; 1
     270:	8c 91       	ld	r24, X
     272:	98 17       	cp	r25, r24
     274:	09 f4       	brne	.+2      	; 0x278 <_fpadd_parts+0x1a2>
     276:	45 c0       	rjmp	.+138    	; 0x302 <_fpadd_parts+0x22c>
     278:	99 23       	and	r25, r25
     27a:	39 f0       	breq	.+14     	; 0x28a <_fpadd_parts+0x1b4>
     27c:	a8 01       	movw	r20, r16
     27e:	97 01       	movw	r18, r14
     280:	2a 19       	sub	r18, r10
     282:	3b 09       	sbc	r19, r11
     284:	4c 09       	sbc	r20, r12
     286:	5d 09       	sbc	r21, r13
     288:	06 c0       	rjmp	.+12     	; 0x296 <_fpadd_parts+0x1c0>
     28a:	a6 01       	movw	r20, r12
     28c:	95 01       	movw	r18, r10
     28e:	2e 19       	sub	r18, r14
     290:	3f 09       	sbc	r19, r15
     292:	40 0b       	sbc	r20, r16
     294:	51 0b       	sbc	r21, r17
     296:	57 fd       	sbrc	r21, 7
     298:	08 c0       	rjmp	.+16     	; 0x2aa <_fpadd_parts+0x1d4>
     29a:	11 82       	std	Z+1, r1	; 0x01
     29c:	33 82       	std	Z+3, r3	; 0x03
     29e:	22 82       	std	Z+2, r2	; 0x02
     2a0:	24 83       	std	Z+4, r18	; 0x04
     2a2:	35 83       	std	Z+5, r19	; 0x05
     2a4:	46 83       	std	Z+6, r20	; 0x06
     2a6:	57 83       	std	Z+7, r21	; 0x07
     2a8:	1d c0       	rjmp	.+58     	; 0x2e4 <_fpadd_parts+0x20e>
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	81 83       	std	Z+1, r24	; 0x01
     2ae:	33 82       	std	Z+3, r3	; 0x03
     2b0:	22 82       	std	Z+2, r2	; 0x02
     2b2:	88 27       	eor	r24, r24
     2b4:	99 27       	eor	r25, r25
     2b6:	dc 01       	movw	r26, r24
     2b8:	82 1b       	sub	r24, r18
     2ba:	93 0b       	sbc	r25, r19
     2bc:	a4 0b       	sbc	r26, r20
     2be:	b5 0b       	sbc	r27, r21
     2c0:	84 83       	std	Z+4, r24	; 0x04
     2c2:	95 83       	std	Z+5, r25	; 0x05
     2c4:	a6 83       	std	Z+6, r26	; 0x06
     2c6:	b7 83       	std	Z+7, r27	; 0x07
     2c8:	0d c0       	rjmp	.+26     	; 0x2e4 <_fpadd_parts+0x20e>
     2ca:	22 0f       	add	r18, r18
     2cc:	33 1f       	adc	r19, r19
     2ce:	44 1f       	adc	r20, r20
     2d0:	55 1f       	adc	r21, r21
     2d2:	24 83       	std	Z+4, r18	; 0x04
     2d4:	35 83       	std	Z+5, r19	; 0x05
     2d6:	46 83       	std	Z+6, r20	; 0x06
     2d8:	57 83       	std	Z+7, r21	; 0x07
     2da:	82 81       	ldd	r24, Z+2	; 0x02
     2dc:	93 81       	ldd	r25, Z+3	; 0x03
     2de:	01 97       	sbiw	r24, 0x01	; 1
     2e0:	93 83       	std	Z+3, r25	; 0x03
     2e2:	82 83       	std	Z+2, r24	; 0x02
     2e4:	24 81       	ldd	r18, Z+4	; 0x04
     2e6:	35 81       	ldd	r19, Z+5	; 0x05
     2e8:	46 81       	ldd	r20, Z+6	; 0x06
     2ea:	57 81       	ldd	r21, Z+7	; 0x07
     2ec:	da 01       	movw	r26, r20
     2ee:	c9 01       	movw	r24, r18
     2f0:	01 97       	sbiw	r24, 0x01	; 1
     2f2:	a1 09       	sbc	r26, r1
     2f4:	b1 09       	sbc	r27, r1
     2f6:	8f 5f       	subi	r24, 0xFF	; 255
     2f8:	9f 4f       	sbci	r25, 0xFF	; 255
     2fa:	af 4f       	sbci	r26, 0xFF	; 255
     2fc:	bf 43       	sbci	r27, 0x3F	; 63
     2fe:	28 f3       	brcs	.-54     	; 0x2ca <_fpadd_parts+0x1f4>
     300:	0b c0       	rjmp	.+22     	; 0x318 <_fpadd_parts+0x242>
     302:	91 83       	std	Z+1, r25	; 0x01
     304:	33 82       	std	Z+3, r3	; 0x03
     306:	22 82       	std	Z+2, r2	; 0x02
     308:	ea 0c       	add	r14, r10
     30a:	fb 1c       	adc	r15, r11
     30c:	0c 1d       	adc	r16, r12
     30e:	1d 1d       	adc	r17, r13
     310:	e4 82       	std	Z+4, r14	; 0x04
     312:	f5 82       	std	Z+5, r15	; 0x05
     314:	06 83       	std	Z+6, r16	; 0x06
     316:	17 83       	std	Z+7, r17	; 0x07
     318:	83 e0       	ldi	r24, 0x03	; 3
     31a:	80 83       	st	Z, r24
     31c:	24 81       	ldd	r18, Z+4	; 0x04
     31e:	35 81       	ldd	r19, Z+5	; 0x05
     320:	46 81       	ldd	r20, Z+6	; 0x06
     322:	57 81       	ldd	r21, Z+7	; 0x07
     324:	57 ff       	sbrs	r21, 7
     326:	1a c0       	rjmp	.+52     	; 0x35c <_fpadd_parts+0x286>
     328:	c9 01       	movw	r24, r18
     32a:	aa 27       	eor	r26, r26
     32c:	97 fd       	sbrc	r25, 7
     32e:	a0 95       	com	r26
     330:	ba 2f       	mov	r27, r26
     332:	81 70       	andi	r24, 0x01	; 1
     334:	90 70       	andi	r25, 0x00	; 0
     336:	a0 70       	andi	r26, 0x00	; 0
     338:	b0 70       	andi	r27, 0x00	; 0
     33a:	56 95       	lsr	r21
     33c:	47 95       	ror	r20
     33e:	37 95       	ror	r19
     340:	27 95       	ror	r18
     342:	82 2b       	or	r24, r18
     344:	93 2b       	or	r25, r19
     346:	a4 2b       	or	r26, r20
     348:	b5 2b       	or	r27, r21
     34a:	84 83       	std	Z+4, r24	; 0x04
     34c:	95 83       	std	Z+5, r25	; 0x05
     34e:	a6 83       	std	Z+6, r26	; 0x06
     350:	b7 83       	std	Z+7, r27	; 0x07
     352:	82 81       	ldd	r24, Z+2	; 0x02
     354:	93 81       	ldd	r25, Z+3	; 0x03
     356:	01 96       	adiw	r24, 0x01	; 1
     358:	93 83       	std	Z+3, r25	; 0x03
     35a:	82 83       	std	Z+2, r24	; 0x02
     35c:	df 01       	movw	r26, r30
     35e:	01 c0       	rjmp	.+2      	; 0x362 <_fpadd_parts+0x28c>
     360:	d2 01       	movw	r26, r4
     362:	cd 01       	movw	r24, r26
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
     368:	e2 e1       	ldi	r30, 0x12	; 18
     36a:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__epilogue_restores__>

0000036e <__subsf3>:
     36e:	a0 e2       	ldi	r26, 0x20	; 32
     370:	b0 e0       	ldi	r27, 0x00	; 0
     372:	ed eb       	ldi	r30, 0xBD	; 189
     374:	f1 e0       	ldi	r31, 0x01	; 1
     376:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__prologue_saves__+0x18>
     37a:	69 83       	std	Y+1, r22	; 0x01
     37c:	7a 83       	std	Y+2, r23	; 0x02
     37e:	8b 83       	std	Y+3, r24	; 0x03
     380:	9c 83       	std	Y+4, r25	; 0x04
     382:	2d 83       	std	Y+5, r18	; 0x05
     384:	3e 83       	std	Y+6, r19	; 0x06
     386:	4f 83       	std	Y+7, r20	; 0x07
     388:	58 87       	std	Y+8, r21	; 0x08
     38a:	e9 e0       	ldi	r30, 0x09	; 9
     38c:	ee 2e       	mov	r14, r30
     38e:	f1 2c       	mov	r15, r1
     390:	ec 0e       	add	r14, r28
     392:	fd 1e       	adc	r15, r29
     394:	ce 01       	movw	r24, r28
     396:	01 96       	adiw	r24, 0x01	; 1
     398:	b7 01       	movw	r22, r14
     39a:	0e 94 c8 04 	call	0x990	; 0x990 <__unpack_f>
     39e:	8e 01       	movw	r16, r28
     3a0:	0f 5e       	subi	r16, 0xEF	; 239
     3a2:	1f 4f       	sbci	r17, 0xFF	; 255
     3a4:	ce 01       	movw	r24, r28
     3a6:	05 96       	adiw	r24, 0x05	; 5
     3a8:	b8 01       	movw	r22, r16
     3aa:	0e 94 c8 04 	call	0x990	; 0x990 <__unpack_f>
     3ae:	8a 89       	ldd	r24, Y+18	; 0x12
     3b0:	91 e0       	ldi	r25, 0x01	; 1
     3b2:	89 27       	eor	r24, r25
     3b4:	8a 8b       	std	Y+18, r24	; 0x12
     3b6:	c7 01       	movw	r24, r14
     3b8:	b8 01       	movw	r22, r16
     3ba:	ae 01       	movw	r20, r28
     3bc:	47 5e       	subi	r20, 0xE7	; 231
     3be:	5f 4f       	sbci	r21, 0xFF	; 255
     3c0:	0e 94 6b 00 	call	0xd6	; 0xd6 <_fpadd_parts>
     3c4:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__pack_f>
     3c8:	a0 96       	adiw	r28, 0x20	; 32
     3ca:	e6 e0       	ldi	r30, 0x06	; 6
     3cc:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__epilogue_restores__+0x18>

000003d0 <__addsf3>:
     3d0:	a0 e2       	ldi	r26, 0x20	; 32
     3d2:	b0 e0       	ldi	r27, 0x00	; 0
     3d4:	ee ee       	ldi	r30, 0xEE	; 238
     3d6:	f1 e0       	ldi	r31, 0x01	; 1
     3d8:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__prologue_saves__+0x18>
     3dc:	69 83       	std	Y+1, r22	; 0x01
     3de:	7a 83       	std	Y+2, r23	; 0x02
     3e0:	8b 83       	std	Y+3, r24	; 0x03
     3e2:	9c 83       	std	Y+4, r25	; 0x04
     3e4:	2d 83       	std	Y+5, r18	; 0x05
     3e6:	3e 83       	std	Y+6, r19	; 0x06
     3e8:	4f 83       	std	Y+7, r20	; 0x07
     3ea:	58 87       	std	Y+8, r21	; 0x08
     3ec:	f9 e0       	ldi	r31, 0x09	; 9
     3ee:	ef 2e       	mov	r14, r31
     3f0:	f1 2c       	mov	r15, r1
     3f2:	ec 0e       	add	r14, r28
     3f4:	fd 1e       	adc	r15, r29
     3f6:	ce 01       	movw	r24, r28
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	b7 01       	movw	r22, r14
     3fc:	0e 94 c8 04 	call	0x990	; 0x990 <__unpack_f>
     400:	8e 01       	movw	r16, r28
     402:	0f 5e       	subi	r16, 0xEF	; 239
     404:	1f 4f       	sbci	r17, 0xFF	; 255
     406:	ce 01       	movw	r24, r28
     408:	05 96       	adiw	r24, 0x05	; 5
     40a:	b8 01       	movw	r22, r16
     40c:	0e 94 c8 04 	call	0x990	; 0x990 <__unpack_f>
     410:	c7 01       	movw	r24, r14
     412:	b8 01       	movw	r22, r16
     414:	ae 01       	movw	r20, r28
     416:	47 5e       	subi	r20, 0xE7	; 231
     418:	5f 4f       	sbci	r21, 0xFF	; 255
     41a:	0e 94 6b 00 	call	0xd6	; 0xd6 <_fpadd_parts>
     41e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__pack_f>
     422:	a0 96       	adiw	r28, 0x20	; 32
     424:	e6 e0       	ldi	r30, 0x06	; 6
     426:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__epilogue_restores__+0x18>

0000042a <__mulsf3>:
     42a:	a0 e2       	ldi	r26, 0x20	; 32
     42c:	b0 e0       	ldi	r27, 0x00	; 0
     42e:	eb e1       	ldi	r30, 0x1B	; 27
     430:	f2 e0       	ldi	r31, 0x02	; 2
     432:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__prologue_saves__>
     436:	69 83       	std	Y+1, r22	; 0x01
     438:	7a 83       	std	Y+2, r23	; 0x02
     43a:	8b 83       	std	Y+3, r24	; 0x03
     43c:	9c 83       	std	Y+4, r25	; 0x04
     43e:	2d 83       	std	Y+5, r18	; 0x05
     440:	3e 83       	std	Y+6, r19	; 0x06
     442:	4f 83       	std	Y+7, r20	; 0x07
     444:	58 87       	std	Y+8, r21	; 0x08
     446:	ce 01       	movw	r24, r28
     448:	01 96       	adiw	r24, 0x01	; 1
     44a:	be 01       	movw	r22, r28
     44c:	67 5f       	subi	r22, 0xF7	; 247
     44e:	7f 4f       	sbci	r23, 0xFF	; 255
     450:	0e 94 c8 04 	call	0x990	; 0x990 <__unpack_f>
     454:	ce 01       	movw	r24, r28
     456:	05 96       	adiw	r24, 0x05	; 5
     458:	be 01       	movw	r22, r28
     45a:	6f 5e       	subi	r22, 0xEF	; 239
     45c:	7f 4f       	sbci	r23, 0xFF	; 255
     45e:	0e 94 c8 04 	call	0x990	; 0x990 <__unpack_f>
     462:	99 85       	ldd	r25, Y+9	; 0x09
     464:	92 30       	cpi	r25, 0x02	; 2
     466:	88 f0       	brcs	.+34     	; 0x48a <__mulsf3+0x60>
     468:	89 89       	ldd	r24, Y+17	; 0x11
     46a:	82 30       	cpi	r24, 0x02	; 2
     46c:	c8 f0       	brcs	.+50     	; 0x4a0 <__mulsf3+0x76>
     46e:	94 30       	cpi	r25, 0x04	; 4
     470:	19 f4       	brne	.+6      	; 0x478 <__mulsf3+0x4e>
     472:	82 30       	cpi	r24, 0x02	; 2
     474:	51 f4       	brne	.+20     	; 0x48a <__mulsf3+0x60>
     476:	04 c0       	rjmp	.+8      	; 0x480 <__mulsf3+0x56>
     478:	84 30       	cpi	r24, 0x04	; 4
     47a:	29 f4       	brne	.+10     	; 0x486 <__mulsf3+0x5c>
     47c:	92 30       	cpi	r25, 0x02	; 2
     47e:	81 f4       	brne	.+32     	; 0x4a0 <__mulsf3+0x76>
     480:	80 e6       	ldi	r24, 0x60	; 96
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	c6 c0       	rjmp	.+396    	; 0x612 <__mulsf3+0x1e8>
     486:	92 30       	cpi	r25, 0x02	; 2
     488:	49 f4       	brne	.+18     	; 0x49c <__mulsf3+0x72>
     48a:	20 e0       	ldi	r18, 0x00	; 0
     48c:	9a 85       	ldd	r25, Y+10	; 0x0a
     48e:	8a 89       	ldd	r24, Y+18	; 0x12
     490:	98 13       	cpse	r25, r24
     492:	21 e0       	ldi	r18, 0x01	; 1
     494:	2a 87       	std	Y+10, r18	; 0x0a
     496:	ce 01       	movw	r24, r28
     498:	09 96       	adiw	r24, 0x09	; 9
     49a:	bb c0       	rjmp	.+374    	; 0x612 <__mulsf3+0x1e8>
     49c:	82 30       	cpi	r24, 0x02	; 2
     49e:	49 f4       	brne	.+18     	; 0x4b2 <__mulsf3+0x88>
     4a0:	20 e0       	ldi	r18, 0x00	; 0
     4a2:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a4:	8a 89       	ldd	r24, Y+18	; 0x12
     4a6:	98 13       	cpse	r25, r24
     4a8:	21 e0       	ldi	r18, 0x01	; 1
     4aa:	2a 8b       	std	Y+18, r18	; 0x12
     4ac:	ce 01       	movw	r24, r28
     4ae:	41 96       	adiw	r24, 0x11	; 17
     4b0:	b0 c0       	rjmp	.+352    	; 0x612 <__mulsf3+0x1e8>
     4b2:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b4:	3e 84       	ldd	r3, Y+14	; 0x0e
     4b6:	4f 84       	ldd	r4, Y+15	; 0x0f
     4b8:	58 88       	ldd	r5, Y+16	; 0x10
     4ba:	6d 88       	ldd	r6, Y+21	; 0x15
     4bc:	7e 88       	ldd	r7, Y+22	; 0x16
     4be:	8f 88       	ldd	r8, Y+23	; 0x17
     4c0:	98 8c       	ldd	r9, Y+24	; 0x18
     4c2:	ee 24       	eor	r14, r14
     4c4:	ff 24       	eor	r15, r15
     4c6:	87 01       	movw	r16, r14
     4c8:	aa 24       	eor	r10, r10
     4ca:	bb 24       	eor	r11, r11
     4cc:	65 01       	movw	r12, r10
     4ce:	40 e0       	ldi	r20, 0x00	; 0
     4d0:	50 e0       	ldi	r21, 0x00	; 0
     4d2:	60 e0       	ldi	r22, 0x00	; 0
     4d4:	70 e0       	ldi	r23, 0x00	; 0
     4d6:	e0 e0       	ldi	r30, 0x00	; 0
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	c1 01       	movw	r24, r2
     4dc:	81 70       	andi	r24, 0x01	; 1
     4de:	90 70       	andi	r25, 0x00	; 0
     4e0:	89 2b       	or	r24, r25
     4e2:	e9 f0       	breq	.+58     	; 0x51e <__mulsf3+0xf4>
     4e4:	e6 0c       	add	r14, r6
     4e6:	f7 1c       	adc	r15, r7
     4e8:	08 1d       	adc	r16, r8
     4ea:	19 1d       	adc	r17, r9
     4ec:	9a 01       	movw	r18, r20
     4ee:	ab 01       	movw	r20, r22
     4f0:	2a 0d       	add	r18, r10
     4f2:	3b 1d       	adc	r19, r11
     4f4:	4c 1d       	adc	r20, r12
     4f6:	5d 1d       	adc	r21, r13
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	a0 e0       	ldi	r26, 0x00	; 0
     4fe:	b0 e0       	ldi	r27, 0x00	; 0
     500:	e6 14       	cp	r14, r6
     502:	f7 04       	cpc	r15, r7
     504:	08 05       	cpc	r16, r8
     506:	19 05       	cpc	r17, r9
     508:	20 f4       	brcc	.+8      	; 0x512 <__mulsf3+0xe8>
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	a0 e0       	ldi	r26, 0x00	; 0
     510:	b0 e0       	ldi	r27, 0x00	; 0
     512:	ba 01       	movw	r22, r20
     514:	a9 01       	movw	r20, r18
     516:	48 0f       	add	r20, r24
     518:	59 1f       	adc	r21, r25
     51a:	6a 1f       	adc	r22, r26
     51c:	7b 1f       	adc	r23, r27
     51e:	aa 0c       	add	r10, r10
     520:	bb 1c       	adc	r11, r11
     522:	cc 1c       	adc	r12, r12
     524:	dd 1c       	adc	r13, r13
     526:	97 fe       	sbrs	r9, 7
     528:	08 c0       	rjmp	.+16     	; 0x53a <__mulsf3+0x110>
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	a0 e0       	ldi	r26, 0x00	; 0
     530:	b0 e0       	ldi	r27, 0x00	; 0
     532:	a8 2a       	or	r10, r24
     534:	b9 2a       	or	r11, r25
     536:	ca 2a       	or	r12, r26
     538:	db 2a       	or	r13, r27
     53a:	31 96       	adiw	r30, 0x01	; 1
     53c:	e0 32       	cpi	r30, 0x20	; 32
     53e:	f1 05       	cpc	r31, r1
     540:	49 f0       	breq	.+18     	; 0x554 <__mulsf3+0x12a>
     542:	66 0c       	add	r6, r6
     544:	77 1c       	adc	r7, r7
     546:	88 1c       	adc	r8, r8
     548:	99 1c       	adc	r9, r9
     54a:	56 94       	lsr	r5
     54c:	47 94       	ror	r4
     54e:	37 94       	ror	r3
     550:	27 94       	ror	r2
     552:	c3 cf       	rjmp	.-122    	; 0x4da <__mulsf3+0xb0>
     554:	fa 85       	ldd	r31, Y+10	; 0x0a
     556:	ea 89       	ldd	r30, Y+18	; 0x12
     558:	2b 89       	ldd	r18, Y+19	; 0x13
     55a:	3c 89       	ldd	r19, Y+20	; 0x14
     55c:	8b 85       	ldd	r24, Y+11	; 0x0b
     55e:	9c 85       	ldd	r25, Y+12	; 0x0c
     560:	28 0f       	add	r18, r24
     562:	39 1f       	adc	r19, r25
     564:	2e 5f       	subi	r18, 0xFE	; 254
     566:	3f 4f       	sbci	r19, 0xFF	; 255
     568:	17 c0       	rjmp	.+46     	; 0x598 <__mulsf3+0x16e>
     56a:	ca 01       	movw	r24, r20
     56c:	81 70       	andi	r24, 0x01	; 1
     56e:	90 70       	andi	r25, 0x00	; 0
     570:	89 2b       	or	r24, r25
     572:	61 f0       	breq	.+24     	; 0x58c <__mulsf3+0x162>
     574:	16 95       	lsr	r17
     576:	07 95       	ror	r16
     578:	f7 94       	ror	r15
     57a:	e7 94       	ror	r14
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	a0 e0       	ldi	r26, 0x00	; 0
     582:	b0 e8       	ldi	r27, 0x80	; 128
     584:	e8 2a       	or	r14, r24
     586:	f9 2a       	or	r15, r25
     588:	0a 2b       	or	r16, r26
     58a:	1b 2b       	or	r17, r27
     58c:	76 95       	lsr	r23
     58e:	67 95       	ror	r22
     590:	57 95       	ror	r21
     592:	47 95       	ror	r20
     594:	2f 5f       	subi	r18, 0xFF	; 255
     596:	3f 4f       	sbci	r19, 0xFF	; 255
     598:	77 fd       	sbrc	r23, 7
     59a:	e7 cf       	rjmp	.-50     	; 0x56a <__mulsf3+0x140>
     59c:	0c c0       	rjmp	.+24     	; 0x5b6 <__mulsf3+0x18c>
     59e:	44 0f       	add	r20, r20
     5a0:	55 1f       	adc	r21, r21
     5a2:	66 1f       	adc	r22, r22
     5a4:	77 1f       	adc	r23, r23
     5a6:	17 fd       	sbrc	r17, 7
     5a8:	41 60       	ori	r20, 0x01	; 1
     5aa:	ee 0c       	add	r14, r14
     5ac:	ff 1c       	adc	r15, r15
     5ae:	00 1f       	adc	r16, r16
     5b0:	11 1f       	adc	r17, r17
     5b2:	21 50       	subi	r18, 0x01	; 1
     5b4:	30 40       	sbci	r19, 0x00	; 0
     5b6:	40 30       	cpi	r20, 0x00	; 0
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	59 07       	cpc	r21, r25
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	69 07       	cpc	r22, r25
     5c0:	90 e4       	ldi	r25, 0x40	; 64
     5c2:	79 07       	cpc	r23, r25
     5c4:	60 f3       	brcs	.-40     	; 0x59e <__mulsf3+0x174>
     5c6:	2b 8f       	std	Y+27, r18	; 0x1b
     5c8:	3c 8f       	std	Y+28, r19	; 0x1c
     5ca:	db 01       	movw	r26, r22
     5cc:	ca 01       	movw	r24, r20
     5ce:	8f 77       	andi	r24, 0x7F	; 127
     5d0:	90 70       	andi	r25, 0x00	; 0
     5d2:	a0 70       	andi	r26, 0x00	; 0
     5d4:	b0 70       	andi	r27, 0x00	; 0
     5d6:	80 34       	cpi	r24, 0x40	; 64
     5d8:	91 05       	cpc	r25, r1
     5da:	a1 05       	cpc	r26, r1
     5dc:	b1 05       	cpc	r27, r1
     5de:	61 f4       	brne	.+24     	; 0x5f8 <__mulsf3+0x1ce>
     5e0:	47 fd       	sbrc	r20, 7
     5e2:	0a c0       	rjmp	.+20     	; 0x5f8 <__mulsf3+0x1ce>
     5e4:	e1 14       	cp	r14, r1
     5e6:	f1 04       	cpc	r15, r1
     5e8:	01 05       	cpc	r16, r1
     5ea:	11 05       	cpc	r17, r1
     5ec:	29 f0       	breq	.+10     	; 0x5f8 <__mulsf3+0x1ce>
     5ee:	40 5c       	subi	r20, 0xC0	; 192
     5f0:	5f 4f       	sbci	r21, 0xFF	; 255
     5f2:	6f 4f       	sbci	r22, 0xFF	; 255
     5f4:	7f 4f       	sbci	r23, 0xFF	; 255
     5f6:	40 78       	andi	r20, 0x80	; 128
     5f8:	1a 8e       	std	Y+26, r1	; 0x1a
     5fa:	fe 17       	cp	r31, r30
     5fc:	11 f0       	breq	.+4      	; 0x602 <__mulsf3+0x1d8>
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	8a 8f       	std	Y+26, r24	; 0x1a
     602:	4d 8f       	std	Y+29, r20	; 0x1d
     604:	5e 8f       	std	Y+30, r21	; 0x1e
     606:	6f 8f       	std	Y+31, r22	; 0x1f
     608:	78 a3       	std	Y+32, r23	; 0x20
     60a:	83 e0       	ldi	r24, 0x03	; 3
     60c:	89 8f       	std	Y+25, r24	; 0x19
     60e:	ce 01       	movw	r24, r28
     610:	49 96       	adiw	r24, 0x19	; 25
     612:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__pack_f>
     616:	a0 96       	adiw	r28, 0x20	; 32
     618:	e2 e1       	ldi	r30, 0x12	; 18
     61a:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__epilogue_restores__>

0000061e <__gtsf2>:
     61e:	a8 e1       	ldi	r26, 0x18	; 24
     620:	b0 e0       	ldi	r27, 0x00	; 0
     622:	e5 e1       	ldi	r30, 0x15	; 21
     624:	f3 e0       	ldi	r31, 0x03	; 3
     626:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__prologue_saves__+0x18>
     62a:	69 83       	std	Y+1, r22	; 0x01
     62c:	7a 83       	std	Y+2, r23	; 0x02
     62e:	8b 83       	std	Y+3, r24	; 0x03
     630:	9c 83       	std	Y+4, r25	; 0x04
     632:	2d 83       	std	Y+5, r18	; 0x05
     634:	3e 83       	std	Y+6, r19	; 0x06
     636:	4f 83       	std	Y+7, r20	; 0x07
     638:	58 87       	std	Y+8, r21	; 0x08
     63a:	89 e0       	ldi	r24, 0x09	; 9
     63c:	e8 2e       	mov	r14, r24
     63e:	f1 2c       	mov	r15, r1
     640:	ec 0e       	add	r14, r28
     642:	fd 1e       	adc	r15, r29
     644:	ce 01       	movw	r24, r28
     646:	01 96       	adiw	r24, 0x01	; 1
     648:	b7 01       	movw	r22, r14
     64a:	0e 94 c8 04 	call	0x990	; 0x990 <__unpack_f>
     64e:	8e 01       	movw	r16, r28
     650:	0f 5e       	subi	r16, 0xEF	; 239
     652:	1f 4f       	sbci	r17, 0xFF	; 255
     654:	ce 01       	movw	r24, r28
     656:	05 96       	adiw	r24, 0x05	; 5
     658:	b8 01       	movw	r22, r16
     65a:	0e 94 c8 04 	call	0x990	; 0x990 <__unpack_f>
     65e:	89 85       	ldd	r24, Y+9	; 0x09
     660:	82 30       	cpi	r24, 0x02	; 2
     662:	40 f0       	brcs	.+16     	; 0x674 <__gtsf2+0x56>
     664:	89 89       	ldd	r24, Y+17	; 0x11
     666:	82 30       	cpi	r24, 0x02	; 2
     668:	28 f0       	brcs	.+10     	; 0x674 <__gtsf2+0x56>
     66a:	c7 01       	movw	r24, r14
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 40 05 	call	0xa80	; 0xa80 <__fpcmp_parts_f>
     672:	01 c0       	rjmp	.+2      	; 0x676 <__gtsf2+0x58>
     674:	8f ef       	ldi	r24, 0xFF	; 255
     676:	68 96       	adiw	r28, 0x18	; 24
     678:	e6 e0       	ldi	r30, 0x06	; 6
     67a:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__epilogue_restores__+0x18>

0000067e <__gesf2>:
     67e:	a8 e1       	ldi	r26, 0x18	; 24
     680:	b0 e0       	ldi	r27, 0x00	; 0
     682:	e5 e4       	ldi	r30, 0x45	; 69
     684:	f3 e0       	ldi	r31, 0x03	; 3
     686:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__prologue_saves__+0x18>
     68a:	69 83       	std	Y+1, r22	; 0x01
     68c:	7a 83       	std	Y+2, r23	; 0x02
     68e:	8b 83       	std	Y+3, r24	; 0x03
     690:	9c 83       	std	Y+4, r25	; 0x04
     692:	2d 83       	std	Y+5, r18	; 0x05
     694:	3e 83       	std	Y+6, r19	; 0x06
     696:	4f 83       	std	Y+7, r20	; 0x07
     698:	58 87       	std	Y+8, r21	; 0x08
     69a:	89 e0       	ldi	r24, 0x09	; 9
     69c:	e8 2e       	mov	r14, r24
     69e:	f1 2c       	mov	r15, r1
     6a0:	ec 0e       	add	r14, r28
     6a2:	fd 1e       	adc	r15, r29
     6a4:	ce 01       	movw	r24, r28
     6a6:	01 96       	adiw	r24, 0x01	; 1
     6a8:	b7 01       	movw	r22, r14
     6aa:	0e 94 c8 04 	call	0x990	; 0x990 <__unpack_f>
     6ae:	8e 01       	movw	r16, r28
     6b0:	0f 5e       	subi	r16, 0xEF	; 239
     6b2:	1f 4f       	sbci	r17, 0xFF	; 255
     6b4:	ce 01       	movw	r24, r28
     6b6:	05 96       	adiw	r24, 0x05	; 5
     6b8:	b8 01       	movw	r22, r16
     6ba:	0e 94 c8 04 	call	0x990	; 0x990 <__unpack_f>
     6be:	89 85       	ldd	r24, Y+9	; 0x09
     6c0:	82 30       	cpi	r24, 0x02	; 2
     6c2:	40 f0       	brcs	.+16     	; 0x6d4 <__gesf2+0x56>
     6c4:	89 89       	ldd	r24, Y+17	; 0x11
     6c6:	82 30       	cpi	r24, 0x02	; 2
     6c8:	28 f0       	brcs	.+10     	; 0x6d4 <__gesf2+0x56>
     6ca:	c7 01       	movw	r24, r14
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 40 05 	call	0xa80	; 0xa80 <__fpcmp_parts_f>
     6d2:	01 c0       	rjmp	.+2      	; 0x6d6 <__gesf2+0x58>
     6d4:	8f ef       	ldi	r24, 0xFF	; 255
     6d6:	68 96       	adiw	r28, 0x18	; 24
     6d8:	e6 e0       	ldi	r30, 0x06	; 6
     6da:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__epilogue_restores__+0x18>

000006de <__ltsf2>:
     6de:	a8 e1       	ldi	r26, 0x18	; 24
     6e0:	b0 e0       	ldi	r27, 0x00	; 0
     6e2:	e5 e7       	ldi	r30, 0x75	; 117
     6e4:	f3 e0       	ldi	r31, 0x03	; 3
     6e6:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__prologue_saves__+0x18>
     6ea:	69 83       	std	Y+1, r22	; 0x01
     6ec:	7a 83       	std	Y+2, r23	; 0x02
     6ee:	8b 83       	std	Y+3, r24	; 0x03
     6f0:	9c 83       	std	Y+4, r25	; 0x04
     6f2:	2d 83       	std	Y+5, r18	; 0x05
     6f4:	3e 83       	std	Y+6, r19	; 0x06
     6f6:	4f 83       	std	Y+7, r20	; 0x07
     6f8:	58 87       	std	Y+8, r21	; 0x08
     6fa:	89 e0       	ldi	r24, 0x09	; 9
     6fc:	e8 2e       	mov	r14, r24
     6fe:	f1 2c       	mov	r15, r1
     700:	ec 0e       	add	r14, r28
     702:	fd 1e       	adc	r15, r29
     704:	ce 01       	movw	r24, r28
     706:	01 96       	adiw	r24, 0x01	; 1
     708:	b7 01       	movw	r22, r14
     70a:	0e 94 c8 04 	call	0x990	; 0x990 <__unpack_f>
     70e:	8e 01       	movw	r16, r28
     710:	0f 5e       	subi	r16, 0xEF	; 239
     712:	1f 4f       	sbci	r17, 0xFF	; 255
     714:	ce 01       	movw	r24, r28
     716:	05 96       	adiw	r24, 0x05	; 5
     718:	b8 01       	movw	r22, r16
     71a:	0e 94 c8 04 	call	0x990	; 0x990 <__unpack_f>
     71e:	89 85       	ldd	r24, Y+9	; 0x09
     720:	82 30       	cpi	r24, 0x02	; 2
     722:	40 f0       	brcs	.+16     	; 0x734 <__ltsf2+0x56>
     724:	89 89       	ldd	r24, Y+17	; 0x11
     726:	82 30       	cpi	r24, 0x02	; 2
     728:	28 f0       	brcs	.+10     	; 0x734 <__ltsf2+0x56>
     72a:	c7 01       	movw	r24, r14
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 40 05 	call	0xa80	; 0xa80 <__fpcmp_parts_f>
     732:	01 c0       	rjmp	.+2      	; 0x736 <__ltsf2+0x58>
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	68 96       	adiw	r28, 0x18	; 24
     738:	e6 e0       	ldi	r30, 0x06	; 6
     73a:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__epilogue_restores__+0x18>

0000073e <__fixsfsi>:
     73e:	ac e0       	ldi	r26, 0x0C	; 12
     740:	b0 e0       	ldi	r27, 0x00	; 0
     742:	e5 ea       	ldi	r30, 0xA5	; 165
     744:	f3 e0       	ldi	r31, 0x03	; 3
     746:	0c 94 34 11 	jmp	0x2268	; 0x2268 <__prologue_saves__+0x20>
     74a:	69 83       	std	Y+1, r22	; 0x01
     74c:	7a 83       	std	Y+2, r23	; 0x02
     74e:	8b 83       	std	Y+3, r24	; 0x03
     750:	9c 83       	std	Y+4, r25	; 0x04
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	be 01       	movw	r22, r28
     758:	6b 5f       	subi	r22, 0xFB	; 251
     75a:	7f 4f       	sbci	r23, 0xFF	; 255
     75c:	0e 94 c8 04 	call	0x990	; 0x990 <__unpack_f>
     760:	8d 81       	ldd	r24, Y+5	; 0x05
     762:	82 30       	cpi	r24, 0x02	; 2
     764:	61 f1       	breq	.+88     	; 0x7be <__fixsfsi+0x80>
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	50 f1       	brcs	.+84     	; 0x7be <__fixsfsi+0x80>
     76a:	84 30       	cpi	r24, 0x04	; 4
     76c:	21 f4       	brne	.+8      	; 0x776 <__fixsfsi+0x38>
     76e:	8e 81       	ldd	r24, Y+6	; 0x06
     770:	88 23       	and	r24, r24
     772:	51 f1       	breq	.+84     	; 0x7c8 <__fixsfsi+0x8a>
     774:	2e c0       	rjmp	.+92     	; 0x7d2 <__fixsfsi+0x94>
     776:	2f 81       	ldd	r18, Y+7	; 0x07
     778:	38 85       	ldd	r19, Y+8	; 0x08
     77a:	37 fd       	sbrc	r19, 7
     77c:	20 c0       	rjmp	.+64     	; 0x7be <__fixsfsi+0x80>
     77e:	6e 81       	ldd	r22, Y+6	; 0x06
     780:	2f 31       	cpi	r18, 0x1F	; 31
     782:	31 05       	cpc	r19, r1
     784:	1c f0       	brlt	.+6      	; 0x78c <__fixsfsi+0x4e>
     786:	66 23       	and	r22, r22
     788:	f9 f0       	breq	.+62     	; 0x7c8 <__fixsfsi+0x8a>
     78a:	23 c0       	rjmp	.+70     	; 0x7d2 <__fixsfsi+0x94>
     78c:	8e e1       	ldi	r24, 0x1E	; 30
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	82 1b       	sub	r24, r18
     792:	93 0b       	sbc	r25, r19
     794:	29 85       	ldd	r18, Y+9	; 0x09
     796:	3a 85       	ldd	r19, Y+10	; 0x0a
     798:	4b 85       	ldd	r20, Y+11	; 0x0b
     79a:	5c 85       	ldd	r21, Y+12	; 0x0c
     79c:	04 c0       	rjmp	.+8      	; 0x7a6 <__fixsfsi+0x68>
     79e:	56 95       	lsr	r21
     7a0:	47 95       	ror	r20
     7a2:	37 95       	ror	r19
     7a4:	27 95       	ror	r18
     7a6:	8a 95       	dec	r24
     7a8:	d2 f7       	brpl	.-12     	; 0x79e <__fixsfsi+0x60>
     7aa:	66 23       	and	r22, r22
     7ac:	b1 f0       	breq	.+44     	; 0x7da <__fixsfsi+0x9c>
     7ae:	50 95       	com	r21
     7b0:	40 95       	com	r20
     7b2:	30 95       	com	r19
     7b4:	21 95       	neg	r18
     7b6:	3f 4f       	sbci	r19, 0xFF	; 255
     7b8:	4f 4f       	sbci	r20, 0xFF	; 255
     7ba:	5f 4f       	sbci	r21, 0xFF	; 255
     7bc:	0e c0       	rjmp	.+28     	; 0x7da <__fixsfsi+0x9c>
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	40 e0       	ldi	r20, 0x00	; 0
     7c4:	50 e0       	ldi	r21, 0x00	; 0
     7c6:	09 c0       	rjmp	.+18     	; 0x7da <__fixsfsi+0x9c>
     7c8:	2f ef       	ldi	r18, 0xFF	; 255
     7ca:	3f ef       	ldi	r19, 0xFF	; 255
     7cc:	4f ef       	ldi	r20, 0xFF	; 255
     7ce:	5f e7       	ldi	r21, 0x7F	; 127
     7d0:	04 c0       	rjmp	.+8      	; 0x7da <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e8       	ldi	r21, 0x80	; 128
     7da:	b9 01       	movw	r22, r18
     7dc:	ca 01       	movw	r24, r20
     7de:	2c 96       	adiw	r28, 0x0c	; 12
     7e0:	e2 e0       	ldi	r30, 0x02	; 2
     7e2:	0c 94 50 11 	jmp	0x22a0	; 0x22a0 <__epilogue_restores__+0x20>

000007e6 <__pack_f>:
     7e6:	df 92       	push	r13
     7e8:	ef 92       	push	r14
     7ea:	ff 92       	push	r15
     7ec:	0f 93       	push	r16
     7ee:	1f 93       	push	r17
     7f0:	fc 01       	movw	r30, r24
     7f2:	e4 80       	ldd	r14, Z+4	; 0x04
     7f4:	f5 80       	ldd	r15, Z+5	; 0x05
     7f6:	06 81       	ldd	r16, Z+6	; 0x06
     7f8:	17 81       	ldd	r17, Z+7	; 0x07
     7fa:	d1 80       	ldd	r13, Z+1	; 0x01
     7fc:	80 81       	ld	r24, Z
     7fe:	82 30       	cpi	r24, 0x02	; 2
     800:	48 f4       	brcc	.+18     	; 0x814 <__pack_f+0x2e>
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	a0 e1       	ldi	r26, 0x10	; 16
     808:	b0 e0       	ldi	r27, 0x00	; 0
     80a:	e8 2a       	or	r14, r24
     80c:	f9 2a       	or	r15, r25
     80e:	0a 2b       	or	r16, r26
     810:	1b 2b       	or	r17, r27
     812:	a5 c0       	rjmp	.+330    	; 0x95e <__stack+0xff>
     814:	84 30       	cpi	r24, 0x04	; 4
     816:	09 f4       	brne	.+2      	; 0x81a <__pack_f+0x34>
     818:	9f c0       	rjmp	.+318    	; 0x958 <__stack+0xf9>
     81a:	82 30       	cpi	r24, 0x02	; 2
     81c:	21 f4       	brne	.+8      	; 0x826 <__pack_f+0x40>
     81e:	ee 24       	eor	r14, r14
     820:	ff 24       	eor	r15, r15
     822:	87 01       	movw	r16, r14
     824:	05 c0       	rjmp	.+10     	; 0x830 <__pack_f+0x4a>
     826:	e1 14       	cp	r14, r1
     828:	f1 04       	cpc	r15, r1
     82a:	01 05       	cpc	r16, r1
     82c:	11 05       	cpc	r17, r1
     82e:	19 f4       	brne	.+6      	; 0x836 <__pack_f+0x50>
     830:	e0 e0       	ldi	r30, 0x00	; 0
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	96 c0       	rjmp	.+300    	; 0x962 <__stack+0x103>
     836:	62 81       	ldd	r22, Z+2	; 0x02
     838:	73 81       	ldd	r23, Z+3	; 0x03
     83a:	9f ef       	ldi	r25, 0xFF	; 255
     83c:	62 38       	cpi	r22, 0x82	; 130
     83e:	79 07       	cpc	r23, r25
     840:	0c f0       	brlt	.+2      	; 0x844 <__pack_f+0x5e>
     842:	5b c0       	rjmp	.+182    	; 0x8fa <__stack+0x9b>
     844:	22 e8       	ldi	r18, 0x82	; 130
     846:	3f ef       	ldi	r19, 0xFF	; 255
     848:	26 1b       	sub	r18, r22
     84a:	37 0b       	sbc	r19, r23
     84c:	2a 31       	cpi	r18, 0x1A	; 26
     84e:	31 05       	cpc	r19, r1
     850:	2c f0       	brlt	.+10     	; 0x85c <__pack_f+0x76>
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	40 e0       	ldi	r20, 0x00	; 0
     858:	50 e0       	ldi	r21, 0x00	; 0
     85a:	2a c0       	rjmp	.+84     	; 0x8b0 <__stack+0x51>
     85c:	b8 01       	movw	r22, r16
     85e:	a7 01       	movw	r20, r14
     860:	02 2e       	mov	r0, r18
     862:	04 c0       	rjmp	.+8      	; 0x86c <__stack+0xd>
     864:	76 95       	lsr	r23
     866:	67 95       	ror	r22
     868:	57 95       	ror	r21
     86a:	47 95       	ror	r20
     86c:	0a 94       	dec	r0
     86e:	d2 f7       	brpl	.-12     	; 0x864 <__stack+0x5>
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	a0 e0       	ldi	r26, 0x00	; 0
     876:	b0 e0       	ldi	r27, 0x00	; 0
     878:	04 c0       	rjmp	.+8      	; 0x882 <__stack+0x23>
     87a:	88 0f       	add	r24, r24
     87c:	99 1f       	adc	r25, r25
     87e:	aa 1f       	adc	r26, r26
     880:	bb 1f       	adc	r27, r27
     882:	2a 95       	dec	r18
     884:	d2 f7       	brpl	.-12     	; 0x87a <__stack+0x1b>
     886:	01 97       	sbiw	r24, 0x01	; 1
     888:	a1 09       	sbc	r26, r1
     88a:	b1 09       	sbc	r27, r1
     88c:	8e 21       	and	r24, r14
     88e:	9f 21       	and	r25, r15
     890:	a0 23       	and	r26, r16
     892:	b1 23       	and	r27, r17
     894:	00 97       	sbiw	r24, 0x00	; 0
     896:	a1 05       	cpc	r26, r1
     898:	b1 05       	cpc	r27, r1
     89a:	21 f0       	breq	.+8      	; 0x8a4 <__stack+0x45>
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	a0 e0       	ldi	r26, 0x00	; 0
     8a2:	b0 e0       	ldi	r27, 0x00	; 0
     8a4:	9a 01       	movw	r18, r20
     8a6:	ab 01       	movw	r20, r22
     8a8:	28 2b       	or	r18, r24
     8aa:	39 2b       	or	r19, r25
     8ac:	4a 2b       	or	r20, r26
     8ae:	5b 2b       	or	r21, r27
     8b0:	da 01       	movw	r26, r20
     8b2:	c9 01       	movw	r24, r18
     8b4:	8f 77       	andi	r24, 0x7F	; 127
     8b6:	90 70       	andi	r25, 0x00	; 0
     8b8:	a0 70       	andi	r26, 0x00	; 0
     8ba:	b0 70       	andi	r27, 0x00	; 0
     8bc:	80 34       	cpi	r24, 0x40	; 64
     8be:	91 05       	cpc	r25, r1
     8c0:	a1 05       	cpc	r26, r1
     8c2:	b1 05       	cpc	r27, r1
     8c4:	39 f4       	brne	.+14     	; 0x8d4 <__stack+0x75>
     8c6:	27 ff       	sbrs	r18, 7
     8c8:	09 c0       	rjmp	.+18     	; 0x8dc <__stack+0x7d>
     8ca:	20 5c       	subi	r18, 0xC0	; 192
     8cc:	3f 4f       	sbci	r19, 0xFF	; 255
     8ce:	4f 4f       	sbci	r20, 0xFF	; 255
     8d0:	5f 4f       	sbci	r21, 0xFF	; 255
     8d2:	04 c0       	rjmp	.+8      	; 0x8dc <__stack+0x7d>
     8d4:	21 5c       	subi	r18, 0xC1	; 193
     8d6:	3f 4f       	sbci	r19, 0xFF	; 255
     8d8:	4f 4f       	sbci	r20, 0xFF	; 255
     8da:	5f 4f       	sbci	r21, 0xFF	; 255
     8dc:	e0 e0       	ldi	r30, 0x00	; 0
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	20 30       	cpi	r18, 0x00	; 0
     8e2:	a0 e0       	ldi	r26, 0x00	; 0
     8e4:	3a 07       	cpc	r19, r26
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	4a 07       	cpc	r20, r26
     8ea:	a0 e4       	ldi	r26, 0x40	; 64
     8ec:	5a 07       	cpc	r21, r26
     8ee:	10 f0       	brcs	.+4      	; 0x8f4 <__stack+0x95>
     8f0:	e1 e0       	ldi	r30, 0x01	; 1
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	79 01       	movw	r14, r18
     8f6:	8a 01       	movw	r16, r20
     8f8:	27 c0       	rjmp	.+78     	; 0x948 <__stack+0xe9>
     8fa:	60 38       	cpi	r22, 0x80	; 128
     8fc:	71 05       	cpc	r23, r1
     8fe:	64 f5       	brge	.+88     	; 0x958 <__stack+0xf9>
     900:	fb 01       	movw	r30, r22
     902:	e1 58       	subi	r30, 0x81	; 129
     904:	ff 4f       	sbci	r31, 0xFF	; 255
     906:	d8 01       	movw	r26, r16
     908:	c7 01       	movw	r24, r14
     90a:	8f 77       	andi	r24, 0x7F	; 127
     90c:	90 70       	andi	r25, 0x00	; 0
     90e:	a0 70       	andi	r26, 0x00	; 0
     910:	b0 70       	andi	r27, 0x00	; 0
     912:	80 34       	cpi	r24, 0x40	; 64
     914:	91 05       	cpc	r25, r1
     916:	a1 05       	cpc	r26, r1
     918:	b1 05       	cpc	r27, r1
     91a:	39 f4       	brne	.+14     	; 0x92a <__stack+0xcb>
     91c:	e7 fe       	sbrs	r14, 7
     91e:	0d c0       	rjmp	.+26     	; 0x93a <__stack+0xdb>
     920:	80 e4       	ldi	r24, 0x40	; 64
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	a0 e0       	ldi	r26, 0x00	; 0
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	04 c0       	rjmp	.+8      	; 0x932 <__stack+0xd3>
     92a:	8f e3       	ldi	r24, 0x3F	; 63
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	a0 e0       	ldi	r26, 0x00	; 0
     930:	b0 e0       	ldi	r27, 0x00	; 0
     932:	e8 0e       	add	r14, r24
     934:	f9 1e       	adc	r15, r25
     936:	0a 1f       	adc	r16, r26
     938:	1b 1f       	adc	r17, r27
     93a:	17 ff       	sbrs	r17, 7
     93c:	05 c0       	rjmp	.+10     	; 0x948 <__stack+0xe9>
     93e:	16 95       	lsr	r17
     940:	07 95       	ror	r16
     942:	f7 94       	ror	r15
     944:	e7 94       	ror	r14
     946:	31 96       	adiw	r30, 0x01	; 1
     948:	87 e0       	ldi	r24, 0x07	; 7
     94a:	16 95       	lsr	r17
     94c:	07 95       	ror	r16
     94e:	f7 94       	ror	r15
     950:	e7 94       	ror	r14
     952:	8a 95       	dec	r24
     954:	d1 f7       	brne	.-12     	; 0x94a <__stack+0xeb>
     956:	05 c0       	rjmp	.+10     	; 0x962 <__stack+0x103>
     958:	ee 24       	eor	r14, r14
     95a:	ff 24       	eor	r15, r15
     95c:	87 01       	movw	r16, r14
     95e:	ef ef       	ldi	r30, 0xFF	; 255
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	6e 2f       	mov	r22, r30
     964:	67 95       	ror	r22
     966:	66 27       	eor	r22, r22
     968:	67 95       	ror	r22
     96a:	90 2f       	mov	r25, r16
     96c:	9f 77       	andi	r25, 0x7F	; 127
     96e:	d7 94       	ror	r13
     970:	dd 24       	eor	r13, r13
     972:	d7 94       	ror	r13
     974:	8e 2f       	mov	r24, r30
     976:	86 95       	lsr	r24
     978:	49 2f       	mov	r20, r25
     97a:	46 2b       	or	r20, r22
     97c:	58 2f       	mov	r21, r24
     97e:	5d 29       	or	r21, r13
     980:	b7 01       	movw	r22, r14
     982:	ca 01       	movw	r24, r20
     984:	1f 91       	pop	r17
     986:	0f 91       	pop	r16
     988:	ff 90       	pop	r15
     98a:	ef 90       	pop	r14
     98c:	df 90       	pop	r13
     98e:	08 95       	ret

00000990 <__unpack_f>:
     990:	fc 01       	movw	r30, r24
     992:	db 01       	movw	r26, r22
     994:	40 81       	ld	r20, Z
     996:	51 81       	ldd	r21, Z+1	; 0x01
     998:	22 81       	ldd	r18, Z+2	; 0x02
     99a:	62 2f       	mov	r22, r18
     99c:	6f 77       	andi	r22, 0x7F	; 127
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	22 1f       	adc	r18, r18
     9a2:	22 27       	eor	r18, r18
     9a4:	22 1f       	adc	r18, r18
     9a6:	93 81       	ldd	r25, Z+3	; 0x03
     9a8:	89 2f       	mov	r24, r25
     9aa:	88 0f       	add	r24, r24
     9ac:	82 2b       	or	r24, r18
     9ae:	28 2f       	mov	r18, r24
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	99 1f       	adc	r25, r25
     9b4:	99 27       	eor	r25, r25
     9b6:	99 1f       	adc	r25, r25
     9b8:	11 96       	adiw	r26, 0x01	; 1
     9ba:	9c 93       	st	X, r25
     9bc:	11 97       	sbiw	r26, 0x01	; 1
     9be:	21 15       	cp	r18, r1
     9c0:	31 05       	cpc	r19, r1
     9c2:	a9 f5       	brne	.+106    	; 0xa2e <__unpack_f+0x9e>
     9c4:	41 15       	cp	r20, r1
     9c6:	51 05       	cpc	r21, r1
     9c8:	61 05       	cpc	r22, r1
     9ca:	71 05       	cpc	r23, r1
     9cc:	11 f4       	brne	.+4      	; 0x9d2 <__unpack_f+0x42>
     9ce:	82 e0       	ldi	r24, 0x02	; 2
     9d0:	37 c0       	rjmp	.+110    	; 0xa40 <__unpack_f+0xb0>
     9d2:	82 e8       	ldi	r24, 0x82	; 130
     9d4:	9f ef       	ldi	r25, 0xFF	; 255
     9d6:	13 96       	adiw	r26, 0x03	; 3
     9d8:	9c 93       	st	X, r25
     9da:	8e 93       	st	-X, r24
     9dc:	12 97       	sbiw	r26, 0x02	; 2
     9de:	9a 01       	movw	r18, r20
     9e0:	ab 01       	movw	r20, r22
     9e2:	67 e0       	ldi	r22, 0x07	; 7
     9e4:	22 0f       	add	r18, r18
     9e6:	33 1f       	adc	r19, r19
     9e8:	44 1f       	adc	r20, r20
     9ea:	55 1f       	adc	r21, r21
     9ec:	6a 95       	dec	r22
     9ee:	d1 f7       	brne	.-12     	; 0x9e4 <__unpack_f+0x54>
     9f0:	83 e0       	ldi	r24, 0x03	; 3
     9f2:	8c 93       	st	X, r24
     9f4:	0d c0       	rjmp	.+26     	; 0xa10 <__unpack_f+0x80>
     9f6:	22 0f       	add	r18, r18
     9f8:	33 1f       	adc	r19, r19
     9fa:	44 1f       	adc	r20, r20
     9fc:	55 1f       	adc	r21, r21
     9fe:	12 96       	adiw	r26, 0x02	; 2
     a00:	8d 91       	ld	r24, X+
     a02:	9c 91       	ld	r25, X
     a04:	13 97       	sbiw	r26, 0x03	; 3
     a06:	01 97       	sbiw	r24, 0x01	; 1
     a08:	13 96       	adiw	r26, 0x03	; 3
     a0a:	9c 93       	st	X, r25
     a0c:	8e 93       	st	-X, r24
     a0e:	12 97       	sbiw	r26, 0x02	; 2
     a10:	20 30       	cpi	r18, 0x00	; 0
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	38 07       	cpc	r19, r24
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	48 07       	cpc	r20, r24
     a1a:	80 e4       	ldi	r24, 0x40	; 64
     a1c:	58 07       	cpc	r21, r24
     a1e:	58 f3       	brcs	.-42     	; 0x9f6 <__unpack_f+0x66>
     a20:	14 96       	adiw	r26, 0x04	; 4
     a22:	2d 93       	st	X+, r18
     a24:	3d 93       	st	X+, r19
     a26:	4d 93       	st	X+, r20
     a28:	5c 93       	st	X, r21
     a2a:	17 97       	sbiw	r26, 0x07	; 7
     a2c:	08 95       	ret
     a2e:	2f 3f       	cpi	r18, 0xFF	; 255
     a30:	31 05       	cpc	r19, r1
     a32:	79 f4       	brne	.+30     	; 0xa52 <__unpack_f+0xc2>
     a34:	41 15       	cp	r20, r1
     a36:	51 05       	cpc	r21, r1
     a38:	61 05       	cpc	r22, r1
     a3a:	71 05       	cpc	r23, r1
     a3c:	19 f4       	brne	.+6      	; 0xa44 <__unpack_f+0xb4>
     a3e:	84 e0       	ldi	r24, 0x04	; 4
     a40:	8c 93       	st	X, r24
     a42:	08 95       	ret
     a44:	64 ff       	sbrs	r22, 4
     a46:	03 c0       	rjmp	.+6      	; 0xa4e <__unpack_f+0xbe>
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	8c 93       	st	X, r24
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__unpack_f+0xe2>
     a4e:	1c 92       	st	X, r1
     a50:	10 c0       	rjmp	.+32     	; 0xa72 <__unpack_f+0xe2>
     a52:	2f 57       	subi	r18, 0x7F	; 127
     a54:	30 40       	sbci	r19, 0x00	; 0
     a56:	13 96       	adiw	r26, 0x03	; 3
     a58:	3c 93       	st	X, r19
     a5a:	2e 93       	st	-X, r18
     a5c:	12 97       	sbiw	r26, 0x02	; 2
     a5e:	83 e0       	ldi	r24, 0x03	; 3
     a60:	8c 93       	st	X, r24
     a62:	87 e0       	ldi	r24, 0x07	; 7
     a64:	44 0f       	add	r20, r20
     a66:	55 1f       	adc	r21, r21
     a68:	66 1f       	adc	r22, r22
     a6a:	77 1f       	adc	r23, r23
     a6c:	8a 95       	dec	r24
     a6e:	d1 f7       	brne	.-12     	; 0xa64 <__unpack_f+0xd4>
     a70:	70 64       	ori	r23, 0x40	; 64
     a72:	14 96       	adiw	r26, 0x04	; 4
     a74:	4d 93       	st	X+, r20
     a76:	5d 93       	st	X+, r21
     a78:	6d 93       	st	X+, r22
     a7a:	7c 93       	st	X, r23
     a7c:	17 97       	sbiw	r26, 0x07	; 7
     a7e:	08 95       	ret

00000a80 <__fpcmp_parts_f>:
     a80:	1f 93       	push	r17
     a82:	dc 01       	movw	r26, r24
     a84:	fb 01       	movw	r30, r22
     a86:	9c 91       	ld	r25, X
     a88:	92 30       	cpi	r25, 0x02	; 2
     a8a:	08 f4       	brcc	.+2      	; 0xa8e <__fpcmp_parts_f+0xe>
     a8c:	47 c0       	rjmp	.+142    	; 0xb1c <__fpcmp_parts_f+0x9c>
     a8e:	80 81       	ld	r24, Z
     a90:	82 30       	cpi	r24, 0x02	; 2
     a92:	08 f4       	brcc	.+2      	; 0xa96 <__fpcmp_parts_f+0x16>
     a94:	43 c0       	rjmp	.+134    	; 0xb1c <__fpcmp_parts_f+0x9c>
     a96:	94 30       	cpi	r25, 0x04	; 4
     a98:	51 f4       	brne	.+20     	; 0xaae <__fpcmp_parts_f+0x2e>
     a9a:	11 96       	adiw	r26, 0x01	; 1
     a9c:	1c 91       	ld	r17, X
     a9e:	84 30       	cpi	r24, 0x04	; 4
     aa0:	99 f5       	brne	.+102    	; 0xb08 <__fpcmp_parts_f+0x88>
     aa2:	81 81       	ldd	r24, Z+1	; 0x01
     aa4:	68 2f       	mov	r22, r24
     aa6:	70 e0       	ldi	r23, 0x00	; 0
     aa8:	61 1b       	sub	r22, r17
     aaa:	71 09       	sbc	r23, r1
     aac:	3f c0       	rjmp	.+126    	; 0xb2c <__fpcmp_parts_f+0xac>
     aae:	84 30       	cpi	r24, 0x04	; 4
     ab0:	21 f0       	breq	.+8      	; 0xaba <__fpcmp_parts_f+0x3a>
     ab2:	92 30       	cpi	r25, 0x02	; 2
     ab4:	31 f4       	brne	.+12     	; 0xac2 <__fpcmp_parts_f+0x42>
     ab6:	82 30       	cpi	r24, 0x02	; 2
     ab8:	b9 f1       	breq	.+110    	; 0xb28 <__fpcmp_parts_f+0xa8>
     aba:	81 81       	ldd	r24, Z+1	; 0x01
     abc:	88 23       	and	r24, r24
     abe:	89 f1       	breq	.+98     	; 0xb22 <__fpcmp_parts_f+0xa2>
     ac0:	2d c0       	rjmp	.+90     	; 0xb1c <__fpcmp_parts_f+0x9c>
     ac2:	11 96       	adiw	r26, 0x01	; 1
     ac4:	1c 91       	ld	r17, X
     ac6:	11 97       	sbiw	r26, 0x01	; 1
     ac8:	82 30       	cpi	r24, 0x02	; 2
     aca:	f1 f0       	breq	.+60     	; 0xb08 <__fpcmp_parts_f+0x88>
     acc:	81 81       	ldd	r24, Z+1	; 0x01
     ace:	18 17       	cp	r17, r24
     ad0:	d9 f4       	brne	.+54     	; 0xb08 <__fpcmp_parts_f+0x88>
     ad2:	12 96       	adiw	r26, 0x02	; 2
     ad4:	2d 91       	ld	r18, X+
     ad6:	3c 91       	ld	r19, X
     ad8:	13 97       	sbiw	r26, 0x03	; 3
     ada:	82 81       	ldd	r24, Z+2	; 0x02
     adc:	93 81       	ldd	r25, Z+3	; 0x03
     ade:	82 17       	cp	r24, r18
     ae0:	93 07       	cpc	r25, r19
     ae2:	94 f0       	brlt	.+36     	; 0xb08 <__fpcmp_parts_f+0x88>
     ae4:	28 17       	cp	r18, r24
     ae6:	39 07       	cpc	r19, r25
     ae8:	bc f0       	brlt	.+46     	; 0xb18 <__fpcmp_parts_f+0x98>
     aea:	14 96       	adiw	r26, 0x04	; 4
     aec:	8d 91       	ld	r24, X+
     aee:	9d 91       	ld	r25, X+
     af0:	0d 90       	ld	r0, X+
     af2:	bc 91       	ld	r27, X
     af4:	a0 2d       	mov	r26, r0
     af6:	24 81       	ldd	r18, Z+4	; 0x04
     af8:	35 81       	ldd	r19, Z+5	; 0x05
     afa:	46 81       	ldd	r20, Z+6	; 0x06
     afc:	57 81       	ldd	r21, Z+7	; 0x07
     afe:	28 17       	cp	r18, r24
     b00:	39 07       	cpc	r19, r25
     b02:	4a 07       	cpc	r20, r26
     b04:	5b 07       	cpc	r21, r27
     b06:	18 f4       	brcc	.+6      	; 0xb0e <__fpcmp_parts_f+0x8e>
     b08:	11 23       	and	r17, r17
     b0a:	41 f0       	breq	.+16     	; 0xb1c <__fpcmp_parts_f+0x9c>
     b0c:	0a c0       	rjmp	.+20     	; 0xb22 <__fpcmp_parts_f+0xa2>
     b0e:	82 17       	cp	r24, r18
     b10:	93 07       	cpc	r25, r19
     b12:	a4 07       	cpc	r26, r20
     b14:	b5 07       	cpc	r27, r21
     b16:	40 f4       	brcc	.+16     	; 0xb28 <__fpcmp_parts_f+0xa8>
     b18:	11 23       	and	r17, r17
     b1a:	19 f0       	breq	.+6      	; 0xb22 <__fpcmp_parts_f+0xa2>
     b1c:	61 e0       	ldi	r22, 0x01	; 1
     b1e:	70 e0       	ldi	r23, 0x00	; 0
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__fpcmp_parts_f+0xac>
     b22:	6f ef       	ldi	r22, 0xFF	; 255
     b24:	7f ef       	ldi	r23, 0xFF	; 255
     b26:	02 c0       	rjmp	.+4      	; 0xb2c <__fpcmp_parts_f+0xac>
     b28:	60 e0       	ldi	r22, 0x00	; 0
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	cb 01       	movw	r24, r22
     b2e:	1f 91       	pop	r17
     b30:	08 95       	ret

00000b32 <ADC_Init>:

#include <avr/io.h>
#include "ADC.h"

extern void ADC_Init(void)
{
     b32:	df 93       	push	r29
     b34:	cf 93       	push	r28
     b36:	cd b7       	in	r28, 0x3d	; 61
     b38:	de b7       	in	r29, 0x3e	; 62
	// Enable ADC On AVR
		SET_BIT(ADCSRA_Reg,7);
     b3a:	a6 e2       	ldi	r26, 0x26	; 38
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	e6 e2       	ldi	r30, 0x26	; 38
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	80 81       	ld	r24, Z
     b44:	80 68       	ori	r24, 0x80	; 128
     b46:	8c 93       	st	X, r24

	// Select Conversion Speed
		SET_BIT(ADCSRA_Reg,0);
     b48:	a6 e2       	ldi	r26, 0x26	; 38
     b4a:	b0 e0       	ldi	r27, 0x00	; 0
     b4c:	e6 e2       	ldi	r30, 0x26	; 38
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	80 81       	ld	r24, Z
     b52:	81 60       	ori	r24, 0x01	; 1
     b54:	8c 93       	st	X, r24
		SET_BIT(ADCSRA_Reg,1);
     b56:	a6 e2       	ldi	r26, 0x26	; 38
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	e6 e2       	ldi	r30, 0x26	; 38
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	82 60       	ori	r24, 0x02	; 2
     b62:	8c 93       	st	X, r24
		SET_BIT(ADCSRA_Reg,2);
     b64:	a6 e2       	ldi	r26, 0x26	; 38
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	e6 e2       	ldi	r30, 0x26	; 38
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	84 60       	ori	r24, 0x04	; 4
     b70:	8c 93       	st	X, r24


	// ADC Data Rgith Adjustment
		SET_BIT(ADMUX_Reg,5);
     b72:	a7 e2       	ldi	r26, 0x27	; 39
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	e7 e2       	ldi	r30, 0x27	; 39
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	80 62       	ori	r24, 0x20	; 32
     b7e:	8c 93       	st	X, r24
}
     b80:	cf 91       	pop	r28
     b82:	df 91       	pop	r29
     b84:	08 95       	ret

00000b86 <ADC_Read>:

u8 ADC_Read (u8 channel)
{
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	0f 92       	push	r0
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	89 83       	std	Y+1, r24	; 0x01
	// Select Voltage Reference
	// Select ADC Channel
	ADMUX_Reg = 0x40 | (channel & 0b00000111);
     b92:	e7 e2       	ldi	r30, 0x27	; 39
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	87 70       	andi	r24, 0x07	; 7
     b9a:	80 64       	ori	r24, 0x40	; 64
     b9c:	80 83       	st	Z, r24

	// Start ADC Conversion
	SET_BIT(ADCSRA_Reg,6);
     b9e:	a6 e2       	ldi	r26, 0x26	; 38
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e6 e2       	ldi	r30, 0x26	; 38
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	80 64       	ori	r24, 0x40	; 64
     baa:	8c 93       	st	X, r24

	//Wait for the conversion
	while(!(ADCSRA_Reg & (1<<4)));
     bac:	e6 e2       	ldi	r30, 0x26	; 38
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	88 2f       	mov	r24, r24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	80 71       	andi	r24, 0x10	; 16
     bb8:	90 70       	andi	r25, 0x00	; 0
     bba:	00 97       	sbiw	r24, 0x00	; 0
     bbc:	b9 f3       	breq	.-18     	; 0xbac <ADC_Read+0x26>


	SET_BIT(ADCSRA_Reg,4);
     bbe:	a6 e2       	ldi	r26, 0x26	; 38
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e6 e2       	ldi	r30, 0x26	; 38
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	80 61       	ori	r24, 0x10	; 16
     bca:	8c 93       	st	X, r24

	return ADC;
     bcc:	e4 e2       	ldi	r30, 0x24	; 36
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	91 81       	ldd	r25, Z+1	; 0x01

}
     bd4:	0f 90       	pop	r0
     bd6:	cf 91       	pop	r28
     bd8:	df 91       	pop	r29
     bda:	08 95       	ret

00000bdc <DIO_SetPinValue>:
#include "DIO_int.h"
#include "DIO_reg.h"

/* IO Pins */
void DIO_SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy)
{
     bdc:	df 93       	push	r29
     bde:	cf 93       	push	r28
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	27 97       	sbiw	r28, 0x07	; 7
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	f8 94       	cli
     bea:	de bf       	out	0x3e, r29	; 62
     bec:	0f be       	out	0x3f, r0	; 63
     bee:	cd bf       	out	0x3d, r28	; 61
     bf0:	89 83       	std	Y+1, r24	; 0x01
     bf2:	6a 83       	std	Y+2, r22	; 0x02
     bf4:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	84 30       	cpi	r24, 0x04	; 4
     bfa:	08 f0       	brcs	.+2      	; 0xbfe <DIO_SetPinValue+0x22>
     bfc:	ee c0       	rjmp	.+476    	; 0xdda <DIO_SetPinValue+0x1fe>
     bfe:	8a 81       	ldd	r24, Y+2	; 0x02
     c00:	88 30       	cpi	r24, 0x08	; 8
     c02:	08 f0       	brcs	.+2      	; 0xc06 <DIO_SetPinValue+0x2a>
     c04:	ea c0       	rjmp	.+468    	; 0xdda <DIO_SetPinValue+0x1fe>
	{
		if (u8PinValCopy == HIGH)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	09 f0       	breq	.+2      	; 0xc0e <DIO_SetPinValue+0x32>
     c0c:	6f c0       	rjmp	.+222    	; 0xcec <DIO_SetPinValue+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
     c10:	28 2f       	mov	r18, r24
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	3f 83       	std	Y+7, r19	; 0x07
     c16:	2e 83       	std	Y+6, r18	; 0x06
     c18:	8e 81       	ldd	r24, Y+6	; 0x06
     c1a:	9f 81       	ldd	r25, Y+7	; 0x07
     c1c:	81 30       	cpi	r24, 0x01	; 1
     c1e:	91 05       	cpc	r25, r1
     c20:	49 f1       	breq	.+82     	; 0xc74 <DIO_SetPinValue+0x98>
     c22:	2e 81       	ldd	r18, Y+6	; 0x06
     c24:	3f 81       	ldd	r19, Y+7	; 0x07
     c26:	22 30       	cpi	r18, 0x02	; 2
     c28:	31 05       	cpc	r19, r1
     c2a:	2c f4       	brge	.+10     	; 0xc36 <DIO_SetPinValue+0x5a>
     c2c:	8e 81       	ldd	r24, Y+6	; 0x06
     c2e:	9f 81       	ldd	r25, Y+7	; 0x07
     c30:	00 97       	sbiw	r24, 0x00	; 0
     c32:	61 f0       	breq	.+24     	; 0xc4c <DIO_SetPinValue+0x70>
     c34:	d2 c0       	rjmp	.+420    	; 0xdda <DIO_SetPinValue+0x1fe>
     c36:	2e 81       	ldd	r18, Y+6	; 0x06
     c38:	3f 81       	ldd	r19, Y+7	; 0x07
     c3a:	22 30       	cpi	r18, 0x02	; 2
     c3c:	31 05       	cpc	r19, r1
     c3e:	71 f1       	breq	.+92     	; 0xc9c <DIO_SetPinValue+0xc0>
     c40:	8e 81       	ldd	r24, Y+6	; 0x06
     c42:	9f 81       	ldd	r25, Y+7	; 0x07
     c44:	83 30       	cpi	r24, 0x03	; 3
     c46:	91 05       	cpc	r25, r1
     c48:	e9 f1       	breq	.+122    	; 0xcc4 <DIO_SetPinValue+0xe8>
     c4a:	c7 c0       	rjmp	.+398    	; 0xdda <DIO_SetPinValue+0x1fe>
			{
				case PORTA: SET_BIT(PORTA_Register,u8PinIdCopy); break;
     c4c:	ab e3       	ldi	r26, 0x3B	; 59
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	eb e3       	ldi	r30, 0x3B	; 59
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	48 2f       	mov	r20, r24
     c58:	8a 81       	ldd	r24, Y+2	; 0x02
     c5a:	28 2f       	mov	r18, r24
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	02 2e       	mov	r0, r18
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <DIO_SetPinValue+0x8e>
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	0a 94       	dec	r0
     c6c:	e2 f7       	brpl	.-8      	; 0xc66 <DIO_SetPinValue+0x8a>
     c6e:	84 2b       	or	r24, r20
     c70:	8c 93       	st	X, r24
     c72:	b3 c0       	rjmp	.+358    	; 0xdda <DIO_SetPinValue+0x1fe>
				case PORTB: SET_BIT(PORTB_Register,u8PinIdCopy); break;
     c74:	a8 e3       	ldi	r26, 0x38	; 56
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e8 e3       	ldi	r30, 0x38	; 56
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	48 2f       	mov	r20, r24
     c80:	8a 81       	ldd	r24, Y+2	; 0x02
     c82:	28 2f       	mov	r18, r24
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	02 2e       	mov	r0, r18
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <DIO_SetPinValue+0xb6>
     c8e:	88 0f       	add	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	0a 94       	dec	r0
     c94:	e2 f7       	brpl	.-8      	; 0xc8e <DIO_SetPinValue+0xb2>
     c96:	84 2b       	or	r24, r20
     c98:	8c 93       	st	X, r24
     c9a:	9f c0       	rjmp	.+318    	; 0xdda <DIO_SetPinValue+0x1fe>
				case PORTC: SET_BIT(PORTC_Register,u8PinIdCopy); break;
     c9c:	a5 e3       	ldi	r26, 0x35	; 53
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e5 e3       	ldi	r30, 0x35	; 53
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	48 2f       	mov	r20, r24
     ca8:	8a 81       	ldd	r24, Y+2	; 0x02
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	02 2e       	mov	r0, r18
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <DIO_SetPinValue+0xde>
     cb6:	88 0f       	add	r24, r24
     cb8:	99 1f       	adc	r25, r25
     cba:	0a 94       	dec	r0
     cbc:	e2 f7       	brpl	.-8      	; 0xcb6 <DIO_SetPinValue+0xda>
     cbe:	84 2b       	or	r24, r20
     cc0:	8c 93       	st	X, r24
     cc2:	8b c0       	rjmp	.+278    	; 0xdda <DIO_SetPinValue+0x1fe>
				case PORTD: SET_BIT(PORTD_Register,u8PinIdCopy); break;
     cc4:	a2 e3       	ldi	r26, 0x32	; 50
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e2 e3       	ldi	r30, 0x32	; 50
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	48 2f       	mov	r20, r24
     cd0:	8a 81       	ldd	r24, Y+2	; 0x02
     cd2:	28 2f       	mov	r18, r24
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	02 2e       	mov	r0, r18
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <DIO_SetPinValue+0x106>
     cde:	88 0f       	add	r24, r24
     ce0:	99 1f       	adc	r25, r25
     ce2:	0a 94       	dec	r0
     ce4:	e2 f7       	brpl	.-8      	; 0xcde <DIO_SetPinValue+0x102>
     ce6:	84 2b       	or	r24, r20
     ce8:	8c 93       	st	X, r24
     cea:	77 c0       	rjmp	.+238    	; 0xdda <DIO_SetPinValue+0x1fe>
			}

		}

		else if (u8PinValCopy == LOW)
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	88 23       	and	r24, r24
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <DIO_SetPinValue+0x118>
     cf2:	73 c0       	rjmp	.+230    	; 0xdda <DIO_SetPinValue+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	28 2f       	mov	r18, r24
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	3d 83       	std	Y+5, r19	; 0x05
     cfc:	2c 83       	std	Y+4, r18	; 0x04
     cfe:	8c 81       	ldd	r24, Y+4	; 0x04
     d00:	9d 81       	ldd	r25, Y+5	; 0x05
     d02:	81 30       	cpi	r24, 0x01	; 1
     d04:	91 05       	cpc	r25, r1
     d06:	59 f1       	breq	.+86     	; 0xd5e <DIO_SetPinValue+0x182>
     d08:	2c 81       	ldd	r18, Y+4	; 0x04
     d0a:	3d 81       	ldd	r19, Y+5	; 0x05
     d0c:	22 30       	cpi	r18, 0x02	; 2
     d0e:	31 05       	cpc	r19, r1
     d10:	2c f4       	brge	.+10     	; 0xd1c <DIO_SetPinValue+0x140>
     d12:	8c 81       	ldd	r24, Y+4	; 0x04
     d14:	9d 81       	ldd	r25, Y+5	; 0x05
     d16:	00 97       	sbiw	r24, 0x00	; 0
     d18:	69 f0       	breq	.+26     	; 0xd34 <DIO_SetPinValue+0x158>
     d1a:	5f c0       	rjmp	.+190    	; 0xdda <DIO_SetPinValue+0x1fe>
     d1c:	2c 81       	ldd	r18, Y+4	; 0x04
     d1e:	3d 81       	ldd	r19, Y+5	; 0x05
     d20:	22 30       	cpi	r18, 0x02	; 2
     d22:	31 05       	cpc	r19, r1
     d24:	89 f1       	breq	.+98     	; 0xd88 <DIO_SetPinValue+0x1ac>
     d26:	8c 81       	ldd	r24, Y+4	; 0x04
     d28:	9d 81       	ldd	r25, Y+5	; 0x05
     d2a:	83 30       	cpi	r24, 0x03	; 3
     d2c:	91 05       	cpc	r25, r1
     d2e:	09 f4       	brne	.+2      	; 0xd32 <DIO_SetPinValue+0x156>
     d30:	40 c0       	rjmp	.+128    	; 0xdb2 <DIO_SetPinValue+0x1d6>
     d32:	53 c0       	rjmp	.+166    	; 0xdda <DIO_SetPinValue+0x1fe>
			{
				case PORTA: CLR_BIT(PORTA_Register,u8PinIdCopy); break;
     d34:	ab e3       	ldi	r26, 0x3B	; 59
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	eb e3       	ldi	r30, 0x3B	; 59
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	48 2f       	mov	r20, r24
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	02 2e       	mov	r0, r18
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <DIO_SetPinValue+0x176>
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	0a 94       	dec	r0
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <DIO_SetPinValue+0x172>
     d56:	80 95       	com	r24
     d58:	84 23       	and	r24, r20
     d5a:	8c 93       	st	X, r24
     d5c:	3e c0       	rjmp	.+124    	; 0xdda <DIO_SetPinValue+0x1fe>
				case PORTB: CLR_BIT(PORTB_Register,u8PinIdCopy); break;
     d5e:	a8 e3       	ldi	r26, 0x38	; 56
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e8 e3       	ldi	r30, 0x38	; 56
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	48 2f       	mov	r20, r24
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	02 2e       	mov	r0, r18
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <DIO_SetPinValue+0x1a0>
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	0a 94       	dec	r0
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <DIO_SetPinValue+0x19c>
     d80:	80 95       	com	r24
     d82:	84 23       	and	r24, r20
     d84:	8c 93       	st	X, r24
     d86:	29 c0       	rjmp	.+82     	; 0xdda <DIO_SetPinValue+0x1fe>
				case PORTC: CLR_BIT(PORTC_Register,u8PinIdCopy); break;
     d88:	a5 e3       	ldi	r26, 0x35	; 53
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	e5 e3       	ldi	r30, 0x35	; 53
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	48 2f       	mov	r20, r24
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	02 2e       	mov	r0, r18
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <DIO_SetPinValue+0x1ca>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	0a 94       	dec	r0
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <DIO_SetPinValue+0x1c6>
     daa:	80 95       	com	r24
     dac:	84 23       	and	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	14 c0       	rjmp	.+40     	; 0xdda <DIO_SetPinValue+0x1fe>
				case PORTD: CLR_BIT(PORTD_Register,u8PinIdCopy); break;
     db2:	a2 e3       	ldi	r26, 0x32	; 50
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	e2 e3       	ldi	r30, 0x32	; 50
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <DIO_SetPinValue+0x1f4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <DIO_SetPinValue+0x1f0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24

	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
     dda:	27 96       	adiw	r28, 0x07	; 7
     ddc:	0f b6       	in	r0, 0x3f	; 63
     dde:	f8 94       	cli
     de0:	de bf       	out	0x3e, r29	; 62
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	cd bf       	out	0x3d, r28	; 61
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	08 95       	ret

00000dec <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy)
{
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	00 d0       	rcall	.+0      	; 0xdf2 <DIO_GetPinValue+0x6>
     df2:	00 d0       	rcall	.+0      	; 0xdf4 <DIO_GetPinValue+0x8>
     df4:	0f 92       	push	r0
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	8a 83       	std	Y+2, r24	; 0x02
     dfc:	6b 83       	std	Y+3, r22	; 0x03
	/* Define Local Variable to get the BIT Value */
	u8 u8ResultLocal;
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	84 30       	cpi	r24, 0x04	; 4
     e02:	08 f0       	brcs	.+2      	; 0xe06 <DIO_GetPinValue+0x1a>
     e04:	6c c0       	rjmp	.+216    	; 0xede <DIO_GetPinValue+0xf2>
     e06:	8b 81       	ldd	r24, Y+3	; 0x03
     e08:	88 30       	cpi	r24, 0x08	; 8
     e0a:	08 f0       	brcs	.+2      	; 0xe0e <DIO_GetPinValue+0x22>
     e0c:	68 c0       	rjmp	.+208    	; 0xede <DIO_GetPinValue+0xf2>
	{
		/* Check on the Required PORT Number */
		switch (u8PortIdCopy)
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	3d 83       	std	Y+5, r19	; 0x05
     e16:	2c 83       	std	Y+4, r18	; 0x04
     e18:	4c 81       	ldd	r20, Y+4	; 0x04
     e1a:	5d 81       	ldd	r21, Y+5	; 0x05
     e1c:	41 30       	cpi	r20, 0x01	; 1
     e1e:	51 05       	cpc	r21, r1
     e20:	41 f1       	breq	.+80     	; 0xe72 <DIO_GetPinValue+0x86>
     e22:	8c 81       	ldd	r24, Y+4	; 0x04
     e24:	9d 81       	ldd	r25, Y+5	; 0x05
     e26:	82 30       	cpi	r24, 0x02	; 2
     e28:	91 05       	cpc	r25, r1
     e2a:	34 f4       	brge	.+12     	; 0xe38 <DIO_GetPinValue+0x4c>
     e2c:	2c 81       	ldd	r18, Y+4	; 0x04
     e2e:	3d 81       	ldd	r19, Y+5	; 0x05
     e30:	21 15       	cp	r18, r1
     e32:	31 05       	cpc	r19, r1
     e34:	61 f0       	breq	.+24     	; 0xe4e <DIO_GetPinValue+0x62>
     e36:	55 c0       	rjmp	.+170    	; 0xee2 <DIO_GetPinValue+0xf6>
     e38:	4c 81       	ldd	r20, Y+4	; 0x04
     e3a:	5d 81       	ldd	r21, Y+5	; 0x05
     e3c:	42 30       	cpi	r20, 0x02	; 2
     e3e:	51 05       	cpc	r21, r1
     e40:	51 f1       	breq	.+84     	; 0xe96 <DIO_GetPinValue+0xaa>
     e42:	8c 81       	ldd	r24, Y+4	; 0x04
     e44:	9d 81       	ldd	r25, Y+5	; 0x05
     e46:	83 30       	cpi	r24, 0x03	; 3
     e48:	91 05       	cpc	r25, r1
     e4a:	b9 f1       	breq	.+110    	; 0xeba <DIO_GetPinValue+0xce>
     e4c:	4a c0       	rjmp	.+148    	; 0xee2 <DIO_GetPinValue+0xf6>
		{
			case PORTA: u8ResultLocal= GET_BIT(PINA_Register,u8PinIdCopy); break;
     e4e:	e9 e3       	ldi	r30, 0x39	; 57
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	88 2f       	mov	r24, r24
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	a9 01       	movw	r20, r18
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <DIO_GetPinValue+0x7a>
     e62:	55 95       	asr	r21
     e64:	47 95       	ror	r20
     e66:	8a 95       	dec	r24
     e68:	e2 f7       	brpl	.-8      	; 0xe62 <DIO_GetPinValue+0x76>
     e6a:	ca 01       	movw	r24, r20
     e6c:	81 70       	andi	r24, 0x01	; 1
     e6e:	89 83       	std	Y+1, r24	; 0x01
     e70:	38 c0       	rjmp	.+112    	; 0xee2 <DIO_GetPinValue+0xf6>
			case PORTB: u8ResultLocal= GET_BIT(PINB_Register,u8PinIdCopy); break;
     e72:	e6 e3       	ldi	r30, 0x36	; 54
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	88 2f       	mov	r24, r24
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	a9 01       	movw	r20, r18
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <DIO_GetPinValue+0x9e>
     e86:	55 95       	asr	r21
     e88:	47 95       	ror	r20
     e8a:	8a 95       	dec	r24
     e8c:	e2 f7       	brpl	.-8      	; 0xe86 <DIO_GetPinValue+0x9a>
     e8e:	ca 01       	movw	r24, r20
     e90:	81 70       	andi	r24, 0x01	; 1
     e92:	89 83       	std	Y+1, r24	; 0x01
     e94:	26 c0       	rjmp	.+76     	; 0xee2 <DIO_GetPinValue+0xf6>
			case PORTC: u8ResultLocal= GET_BIT(PINC_Register,u8PinIdCopy); break;
     e96:	e3 e3       	ldi	r30, 0x33	; 51
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	88 2f       	mov	r24, r24
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	a9 01       	movw	r20, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <DIO_GetPinValue+0xc2>
     eaa:	55 95       	asr	r21
     eac:	47 95       	ror	r20
     eae:	8a 95       	dec	r24
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <DIO_GetPinValue+0xbe>
     eb2:	ca 01       	movw	r24, r20
     eb4:	81 70       	andi	r24, 0x01	; 1
     eb6:	89 83       	std	Y+1, r24	; 0x01
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <DIO_GetPinValue+0xf6>
			case PORTD: u8ResultLocal= GET_BIT(PIND_Register,u8PinIdCopy); break;
     eba:	e0 e3       	ldi	r30, 0x30	; 48
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	28 2f       	mov	r18, r24
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	88 2f       	mov	r24, r24
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	a9 01       	movw	r20, r18
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <DIO_GetPinValue+0xe6>
     ece:	55 95       	asr	r21
     ed0:	47 95       	ror	r20
     ed2:	8a 95       	dec	r24
     ed4:	e2 f7       	brpl	.-8      	; 0xece <DIO_GetPinValue+0xe2>
     ed6:	ca 01       	movw	r24, r20
     ed8:	81 70       	andi	r24, 0x01	; 1
     eda:	89 83       	std	Y+1, r24	; 0x01
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <DIO_GetPinValue+0xf6>
	}

	else
	{
		/* return 0xff in case of error in the Pin ID or PORT ID */
		u8ResultLocal = 0xFF;
     ede:	8f ef       	ldi	r24, 0xFF	; 255
     ee0:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ResultLocal;
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	08 95       	ret

00000ef4 <DIO_SetPinDirection>:

void DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
     ef4:	df 93       	push	r29
     ef6:	cf 93       	push	r28
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
     efc:	27 97       	sbiw	r28, 0x07	; 7
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	f8 94       	cli
     f02:	de bf       	out	0x3e, r29	; 62
     f04:	0f be       	out	0x3f, r0	; 63
     f06:	cd bf       	out	0x3d, r28	; 61
     f08:	89 83       	std	Y+1, r24	; 0x01
     f0a:	6a 83       	std	Y+2, r22	; 0x02
     f0c:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <DIO_SetPinDirection+0x22>
     f14:	ee c0       	rjmp	.+476    	; 0x10f2 <DIO_SetPinDirection+0x1fe>
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	88 30       	cpi	r24, 0x08	; 8
     f1a:	08 f0       	brcs	.+2      	; 0xf1e <DIO_SetPinDirection+0x2a>
     f1c:	ea c0       	rjmp	.+468    	; 0x10f2 <DIO_SetPinDirection+0x1fe>
	{
		if ( u8PinDirCopy == OUTPUT )
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	09 f0       	breq	.+2      	; 0xf26 <DIO_SetPinDirection+0x32>
     f24:	6f c0       	rjmp	.+222    	; 0x1004 <DIO_SetPinDirection+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	3f 83       	std	Y+7, r19	; 0x07
     f2e:	2e 83       	std	Y+6, r18	; 0x06
     f30:	8e 81       	ldd	r24, Y+6	; 0x06
     f32:	9f 81       	ldd	r25, Y+7	; 0x07
     f34:	81 30       	cpi	r24, 0x01	; 1
     f36:	91 05       	cpc	r25, r1
     f38:	49 f1       	breq	.+82     	; 0xf8c <DIO_SetPinDirection+0x98>
     f3a:	2e 81       	ldd	r18, Y+6	; 0x06
     f3c:	3f 81       	ldd	r19, Y+7	; 0x07
     f3e:	22 30       	cpi	r18, 0x02	; 2
     f40:	31 05       	cpc	r19, r1
     f42:	2c f4       	brge	.+10     	; 0xf4e <DIO_SetPinDirection+0x5a>
     f44:	8e 81       	ldd	r24, Y+6	; 0x06
     f46:	9f 81       	ldd	r25, Y+7	; 0x07
     f48:	00 97       	sbiw	r24, 0x00	; 0
     f4a:	61 f0       	breq	.+24     	; 0xf64 <DIO_SetPinDirection+0x70>
     f4c:	d2 c0       	rjmp	.+420    	; 0x10f2 <DIO_SetPinDirection+0x1fe>
     f4e:	2e 81       	ldd	r18, Y+6	; 0x06
     f50:	3f 81       	ldd	r19, Y+7	; 0x07
     f52:	22 30       	cpi	r18, 0x02	; 2
     f54:	31 05       	cpc	r19, r1
     f56:	71 f1       	breq	.+92     	; 0xfb4 <DIO_SetPinDirection+0xc0>
     f58:	8e 81       	ldd	r24, Y+6	; 0x06
     f5a:	9f 81       	ldd	r25, Y+7	; 0x07
     f5c:	83 30       	cpi	r24, 0x03	; 3
     f5e:	91 05       	cpc	r25, r1
     f60:	e9 f1       	breq	.+122    	; 0xfdc <DIO_SetPinDirection+0xe8>
     f62:	c7 c0       	rjmp	.+398    	; 0x10f2 <DIO_SetPinDirection+0x1fe>
			{
				case PORTA: SET_BIT(DDRA_Register,u8PinIdCopy); break;
     f64:	aa e3       	ldi	r26, 0x3A	; 58
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	ea e3       	ldi	r30, 0x3A	; 58
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 2e       	mov	r0, r18
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <DIO_SetPinDirection+0x8e>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	0a 94       	dec	r0
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <DIO_SetPinDirection+0x8a>
     f86:	84 2b       	or	r24, r20
     f88:	8c 93       	st	X, r24
     f8a:	b3 c0       	rjmp	.+358    	; 0x10f2 <DIO_SetPinDirection+0x1fe>
				case PORTB: SET_BIT(DDRB_Register,u8PinIdCopy); break;
     f8c:	a7 e3       	ldi	r26, 0x37	; 55
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e7 e3       	ldi	r30, 0x37	; 55
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	48 2f       	mov	r20, r24
     f98:	8a 81       	ldd	r24, Y+2	; 0x02
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 2e       	mov	r0, r18
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <DIO_SetPinDirection+0xb6>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	0a 94       	dec	r0
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <DIO_SetPinDirection+0xb2>
     fae:	84 2b       	or	r24, r20
     fb0:	8c 93       	st	X, r24
     fb2:	9f c0       	rjmp	.+318    	; 0x10f2 <DIO_SetPinDirection+0x1fe>
				case PORTC: SET_BIT(DDRC_Register,u8PinIdCopy); break;
     fb4:	a4 e3       	ldi	r26, 0x34	; 52
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e4 e3       	ldi	r30, 0x34	; 52
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	48 2f       	mov	r20, r24
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 2e       	mov	r0, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <DIO_SetPinDirection+0xde>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	0a 94       	dec	r0
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <DIO_SetPinDirection+0xda>
     fd6:	84 2b       	or	r24, r20
     fd8:	8c 93       	st	X, r24
     fda:	8b c0       	rjmp	.+278    	; 0x10f2 <DIO_SetPinDirection+0x1fe>
				case PORTD: SET_BIT(DDRD_Register,u8PinIdCopy); break;
     fdc:	a1 e3       	ldi	r26, 0x31	; 49
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e1 e3       	ldi	r30, 0x31	; 49
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	8a 81       	ldd	r24, Y+2	; 0x02
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 2e       	mov	r0, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <DIO_SetPinDirection+0x106>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	0a 94       	dec	r0
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <DIO_SetPinDirection+0x102>
     ffe:	84 2b       	or	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	77 c0       	rjmp	.+238    	; 0x10f2 <DIO_SetPinDirection+0x1fe>
			}
		}

		else if ( u8PinDirCopy == INPUT )
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	88 23       	and	r24, r24
    1008:	09 f0       	breq	.+2      	; 0x100c <DIO_SetPinDirection+0x118>
    100a:	73 c0       	rjmp	.+230    	; 0x10f2 <DIO_SetPinDirection+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	3d 83       	std	Y+5, r19	; 0x05
    1014:	2c 83       	std	Y+4, r18	; 0x04
    1016:	8c 81       	ldd	r24, Y+4	; 0x04
    1018:	9d 81       	ldd	r25, Y+5	; 0x05
    101a:	81 30       	cpi	r24, 0x01	; 1
    101c:	91 05       	cpc	r25, r1
    101e:	59 f1       	breq	.+86     	; 0x1076 <DIO_SetPinDirection+0x182>
    1020:	2c 81       	ldd	r18, Y+4	; 0x04
    1022:	3d 81       	ldd	r19, Y+5	; 0x05
    1024:	22 30       	cpi	r18, 0x02	; 2
    1026:	31 05       	cpc	r19, r1
    1028:	2c f4       	brge	.+10     	; 0x1034 <DIO_SetPinDirection+0x140>
    102a:	8c 81       	ldd	r24, Y+4	; 0x04
    102c:	9d 81       	ldd	r25, Y+5	; 0x05
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	69 f0       	breq	.+26     	; 0x104c <DIO_SetPinDirection+0x158>
    1032:	5f c0       	rjmp	.+190    	; 0x10f2 <DIO_SetPinDirection+0x1fe>
    1034:	2c 81       	ldd	r18, Y+4	; 0x04
    1036:	3d 81       	ldd	r19, Y+5	; 0x05
    1038:	22 30       	cpi	r18, 0x02	; 2
    103a:	31 05       	cpc	r19, r1
    103c:	89 f1       	breq	.+98     	; 0x10a0 <DIO_SetPinDirection+0x1ac>
    103e:	8c 81       	ldd	r24, Y+4	; 0x04
    1040:	9d 81       	ldd	r25, Y+5	; 0x05
    1042:	83 30       	cpi	r24, 0x03	; 3
    1044:	91 05       	cpc	r25, r1
    1046:	09 f4       	brne	.+2      	; 0x104a <DIO_SetPinDirection+0x156>
    1048:	40 c0       	rjmp	.+128    	; 0x10ca <DIO_SetPinDirection+0x1d6>
    104a:	53 c0       	rjmp	.+166    	; 0x10f2 <DIO_SetPinDirection+0x1fe>
			{
				case PORTA: CLR_BIT(DDRA_Register,u8PinIdCopy); break;
    104c:	aa e3       	ldi	r26, 0x3A	; 58
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	ea e3       	ldi	r30, 0x3A	; 58
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	48 2f       	mov	r20, r24
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 2e       	mov	r0, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DIO_SetPinDirection+0x176>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	0a 94       	dec	r0
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <DIO_SetPinDirection+0x172>
    106e:	80 95       	com	r24
    1070:	84 23       	and	r24, r20
    1072:	8c 93       	st	X, r24
    1074:	3e c0       	rjmp	.+124    	; 0x10f2 <DIO_SetPinDirection+0x1fe>
				case PORTB: CLR_BIT(DDRB_Register,u8PinIdCopy); break;
    1076:	a7 e3       	ldi	r26, 0x37	; 55
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e7 e3       	ldi	r30, 0x37	; 55
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	48 2f       	mov	r20, r24
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	02 2e       	mov	r0, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <DIO_SetPinDirection+0x1a0>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	0a 94       	dec	r0
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <DIO_SetPinDirection+0x19c>
    1098:	80 95       	com	r24
    109a:	84 23       	and	r24, r20
    109c:	8c 93       	st	X, r24
    109e:	29 c0       	rjmp	.+82     	; 0x10f2 <DIO_SetPinDirection+0x1fe>
				case PORTC: CLR_BIT(DDRC_Register,u8PinIdCopy); break;
    10a0:	a4 e3       	ldi	r26, 0x34	; 52
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e4 e3       	ldi	r30, 0x34	; 52
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	48 2f       	mov	r20, r24
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	02 2e       	mov	r0, r18
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <DIO_SetPinDirection+0x1ca>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	0a 94       	dec	r0
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <DIO_SetPinDirection+0x1c6>
    10c2:	80 95       	com	r24
    10c4:	84 23       	and	r24, r20
    10c6:	8c 93       	st	X, r24
    10c8:	14 c0       	rjmp	.+40     	; 0x10f2 <DIO_SetPinDirection+0x1fe>
				case PORTD: CLR_BIT(DDRD_Register,u8PinIdCopy); break;
    10ca:	a1 e3       	ldi	r26, 0x31	; 49
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e1 e3       	ldi	r30, 0x31	; 49
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	48 2f       	mov	r20, r24
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	02 2e       	mov	r0, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <DIO_SetPinDirection+0x1f4>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	0a 94       	dec	r0
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <DIO_SetPinDirection+0x1f0>
    10ec:	80 95       	com	r24
    10ee:	84 23       	and	r24, r20
    10f0:	8c 93       	st	X, r24

	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
    10f2:	27 96       	adiw	r28, 0x07	; 7
    10f4:	0f b6       	in	r0, 0x3f	; 63
    10f6:	f8 94       	cli
    10f8:	de bf       	out	0x3e, r29	; 62
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	cd bf       	out	0x3d, r28	; 61
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	08 95       	ret

00001104 <DIO_SetPortDirection>:


/* IO Ports */
void DIO_SetPortDirection (u8 u8PortId, u8 u8PortDir)
{
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	00 d0       	rcall	.+0      	; 0x110a <DIO_SetPortDirection+0x6>
    110a:	00 d0       	rcall	.+0      	; 0x110c <DIO_SetPortDirection+0x8>
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
    1110:	89 83       	std	Y+1, r24	; 0x01
    1112:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	3c 83       	std	Y+4, r19	; 0x04
    111c:	2b 83       	std	Y+3, r18	; 0x03
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	9c 81       	ldd	r25, Y+4	; 0x04
    1122:	81 30       	cpi	r24, 0x01	; 1
    1124:	91 05       	cpc	r25, r1
    1126:	d1 f0       	breq	.+52     	; 0x115c <DIO_SetPortDirection+0x58>
    1128:	2b 81       	ldd	r18, Y+3	; 0x03
    112a:	3c 81       	ldd	r19, Y+4	; 0x04
    112c:	22 30       	cpi	r18, 0x02	; 2
    112e:	31 05       	cpc	r19, r1
    1130:	2c f4       	brge	.+10     	; 0x113c <DIO_SetPortDirection+0x38>
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	9c 81       	ldd	r25, Y+4	; 0x04
    1136:	00 97       	sbiw	r24, 0x00	; 0
    1138:	61 f0       	breq	.+24     	; 0x1152 <DIO_SetPortDirection+0x4e>
    113a:	1e c0       	rjmp	.+60     	; 0x1178 <DIO_SetPortDirection+0x74>
    113c:	2b 81       	ldd	r18, Y+3	; 0x03
    113e:	3c 81       	ldd	r19, Y+4	; 0x04
    1140:	22 30       	cpi	r18, 0x02	; 2
    1142:	31 05       	cpc	r19, r1
    1144:	81 f0       	breq	.+32     	; 0x1166 <DIO_SetPortDirection+0x62>
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	9c 81       	ldd	r25, Y+4	; 0x04
    114a:	83 30       	cpi	r24, 0x03	; 3
    114c:	91 05       	cpc	r25, r1
    114e:	81 f0       	breq	.+32     	; 0x1170 <DIO_SetPortDirection+0x6c>
    1150:	13 c0       	rjmp	.+38     	; 0x1178 <DIO_SetPortDirection+0x74>
	{
		case     PORTA: DDRA_Register = u8PortDir; break;
    1152:	ea e3       	ldi	r30, 0x3A	; 58
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	80 83       	st	Z, r24
    115a:	0e c0       	rjmp	.+28     	; 0x1178 <DIO_SetPortDirection+0x74>
		case     PORTB: DDRB_Register = u8PortDir; break;
    115c:	e7 e3       	ldi	r30, 0x37	; 55
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	80 83       	st	Z, r24
    1164:	09 c0       	rjmp	.+18     	; 0x1178 <DIO_SetPortDirection+0x74>
		case     PORTC: DDRC_Register = u8PortDir; break;
    1166:	e4 e3       	ldi	r30, 0x34	; 52
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	80 83       	st	Z, r24
    116e:	04 c0       	rjmp	.+8      	; 0x1178 <DIO_SetPortDirection+0x74>
		case     PORTD: DDRD_Register = u8PortDir; break;
    1170:	e1 e3       	ldi	r30, 0x31	; 49
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	80 83       	st	Z, r24
		default: /* Wrong Port ID */       break;
	}
}
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	08 95       	ret

00001186 <DIO_SetPortValue>:

void DIO_SetPortValue (u8 u8PortId, u8 u8PortVal)
{
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	00 d0       	rcall	.+0      	; 0x118c <DIO_SetPortValue+0x6>
    118c:	00 d0       	rcall	.+0      	; 0x118e <DIO_SetPortValue+0x8>
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	3c 83       	std	Y+4, r19	; 0x04
    119e:	2b 83       	std	Y+3, r18	; 0x03
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	9c 81       	ldd	r25, Y+4	; 0x04
    11a4:	81 30       	cpi	r24, 0x01	; 1
    11a6:	91 05       	cpc	r25, r1
    11a8:	d1 f0       	breq	.+52     	; 0x11de <DIO_SetPortValue+0x58>
    11aa:	2b 81       	ldd	r18, Y+3	; 0x03
    11ac:	3c 81       	ldd	r19, Y+4	; 0x04
    11ae:	22 30       	cpi	r18, 0x02	; 2
    11b0:	31 05       	cpc	r19, r1
    11b2:	2c f4       	brge	.+10     	; 0x11be <DIO_SetPortValue+0x38>
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	9c 81       	ldd	r25, Y+4	; 0x04
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	61 f0       	breq	.+24     	; 0x11d4 <DIO_SetPortValue+0x4e>
    11bc:	1e c0       	rjmp	.+60     	; 0x11fa <DIO_SetPortValue+0x74>
    11be:	2b 81       	ldd	r18, Y+3	; 0x03
    11c0:	3c 81       	ldd	r19, Y+4	; 0x04
    11c2:	22 30       	cpi	r18, 0x02	; 2
    11c4:	31 05       	cpc	r19, r1
    11c6:	81 f0       	breq	.+32     	; 0x11e8 <DIO_SetPortValue+0x62>
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	83 30       	cpi	r24, 0x03	; 3
    11ce:	91 05       	cpc	r25, r1
    11d0:	81 f0       	breq	.+32     	; 0x11f2 <DIO_SetPortValue+0x6c>
    11d2:	13 c0       	rjmp	.+38     	; 0x11fa <DIO_SetPortValue+0x74>
	{
		case     PORTA: PORTA_Register = u8PortVal; break;
    11d4:	eb e3       	ldi	r30, 0x3B	; 59
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	80 83       	st	Z, r24
    11dc:	0e c0       	rjmp	.+28     	; 0x11fa <DIO_SetPortValue+0x74>
		case     PORTB: PORTB_Register = u8PortVal; break;
    11de:	e8 e3       	ldi	r30, 0x38	; 56
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	80 83       	st	Z, r24
    11e6:	09 c0       	rjmp	.+18     	; 0x11fa <DIO_SetPortValue+0x74>
		case     PORTC: PORTC_Register = u8PortVal; break;
    11e8:	e5 e3       	ldi	r30, 0x35	; 53
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	80 83       	st	Z, r24
    11f0:	04 c0       	rjmp	.+8      	; 0x11fa <DIO_SetPortValue+0x74>
		case     PORTD: PORTD_Register = u8PortVal; break;
    11f2:	e2 e3       	ldi	r30, 0x32	; 50
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	80 83       	st	Z, r24
		default: /* Wrong Port ID */        break;
	}
}
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	08 95       	ret

00001208 <LCD_vidInit>:
/* Description! Apply initialization sequence for LCD module                           */
/* Input      ! Nothing                                                                */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_vidInit(void)
{
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	c4 55       	subi	r28, 0x54	; 84
    1216:	d0 40       	sbci	r29, 0x00	; 0
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	de bf       	out	0x3e, r29	; 62
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	cd bf       	out	0x3d, r28	; 61
    1222:	fe 01       	movw	r30, r28
    1224:	ef 5a       	subi	r30, 0xAF	; 175
    1226:	ff 4f       	sbci	r31, 0xFF	; 255
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	a0 ef       	ldi	r26, 0xF0	; 240
    122e:	b1 e4       	ldi	r27, 0x41	; 65
    1230:	80 83       	st	Z, r24
    1232:	91 83       	std	Z+1, r25	; 0x01
    1234:	a2 83       	std	Z+2, r26	; 0x02
    1236:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1238:	8e 01       	movw	r16, r28
    123a:	03 5b       	subi	r16, 0xB3	; 179
    123c:	1f 4f       	sbci	r17, 0xFF	; 255
    123e:	fe 01       	movw	r30, r28
    1240:	ef 5a       	subi	r30, 0xAF	; 175
    1242:	ff 4f       	sbci	r31, 0xFF	; 255
    1244:	60 81       	ld	r22, Z
    1246:	71 81       	ldd	r23, Z+1	; 0x01
    1248:	82 81       	ldd	r24, Z+2	; 0x02
    124a:	93 81       	ldd	r25, Z+3	; 0x03
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	4a ef       	ldi	r20, 0xFA	; 250
    1252:	54 e4       	ldi	r21, 0x44	; 68
    1254:	0e 94 15 02 	call	0x42a	; 0x42a <__mulsf3>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	f8 01       	movw	r30, r16
    125e:	80 83       	st	Z, r24
    1260:	91 83       	std	Z+1, r25	; 0x01
    1262:	a2 83       	std	Z+2, r26	; 0x02
    1264:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1266:	fe 01       	movw	r30, r28
    1268:	e3 5b       	subi	r30, 0xB3	; 179
    126a:	ff 4f       	sbci	r31, 0xFF	; 255
    126c:	60 81       	ld	r22, Z
    126e:	71 81       	ldd	r23, Z+1	; 0x01
    1270:	82 81       	ldd	r24, Z+2	; 0x02
    1272:	93 81       	ldd	r25, Z+3	; 0x03
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	40 e8       	ldi	r20, 0x80	; 128
    127a:	5f e3       	ldi	r21, 0x3F	; 63
    127c:	0e 94 6f 03 	call	0x6de	; 0x6de <__ltsf2>
    1280:	88 23       	and	r24, r24
    1282:	44 f4       	brge	.+16     	; 0x1294 <LCD_vidInit+0x8c>
		__ticks = 1;
    1284:	fe 01       	movw	r30, r28
    1286:	e5 5b       	subi	r30, 0xB5	; 181
    1288:	ff 4f       	sbci	r31, 0xFF	; 255
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	91 83       	std	Z+1, r25	; 0x01
    1290:	80 83       	st	Z, r24
    1292:	64 c0       	rjmp	.+200    	; 0x135c <LCD_vidInit+0x154>
	else if (__tmp > 65535)
    1294:	fe 01       	movw	r30, r28
    1296:	e3 5b       	subi	r30, 0xB3	; 179
    1298:	ff 4f       	sbci	r31, 0xFF	; 255
    129a:	60 81       	ld	r22, Z
    129c:	71 81       	ldd	r23, Z+1	; 0x01
    129e:	82 81       	ldd	r24, Z+2	; 0x02
    12a0:	93 81       	ldd	r25, Z+3	; 0x03
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	3f ef       	ldi	r19, 0xFF	; 255
    12a6:	4f e7       	ldi	r20, 0x7F	; 127
    12a8:	57 e4       	ldi	r21, 0x47	; 71
    12aa:	0e 94 0f 03 	call	0x61e	; 0x61e <__gtsf2>
    12ae:	18 16       	cp	r1, r24
    12b0:	0c f0       	brlt	.+2      	; 0x12b4 <LCD_vidInit+0xac>
    12b2:	43 c0       	rjmp	.+134    	; 0x133a <LCD_vidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12b4:	fe 01       	movw	r30, r28
    12b6:	ef 5a       	subi	r30, 0xAF	; 175
    12b8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ba:	60 81       	ld	r22, Z
    12bc:	71 81       	ldd	r23, Z+1	; 0x01
    12be:	82 81       	ldd	r24, Z+2	; 0x02
    12c0:	93 81       	ldd	r25, Z+3	; 0x03
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	40 e2       	ldi	r20, 0x20	; 32
    12c8:	51 e4       	ldi	r21, 0x41	; 65
    12ca:	0e 94 15 02 	call	0x42a	; 0x42a <__mulsf3>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	8e 01       	movw	r16, r28
    12d4:	05 5b       	subi	r16, 0xB5	; 181
    12d6:	1f 4f       	sbci	r17, 0xFF	; 255
    12d8:	bc 01       	movw	r22, r24
    12da:	cd 01       	movw	r24, r26
    12dc:	0e 94 3f 00 	call	0x7e	; 0x7e <__fixunssfsi>
    12e0:	dc 01       	movw	r26, r24
    12e2:	cb 01       	movw	r24, r22
    12e4:	f8 01       	movw	r30, r16
    12e6:	91 83       	std	Z+1, r25	; 0x01
    12e8:	80 83       	st	Z, r24
    12ea:	1f c0       	rjmp	.+62     	; 0x132a <LCD_vidInit+0x122>
    12ec:	fe 01       	movw	r30, r28
    12ee:	e7 5b       	subi	r30, 0xB7	; 183
    12f0:	ff 4f       	sbci	r31, 0xFF	; 255
    12f2:	88 ec       	ldi	r24, 0xC8	; 200
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	91 83       	std	Z+1, r25	; 0x01
    12f8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12fa:	fe 01       	movw	r30, r28
    12fc:	e7 5b       	subi	r30, 0xB7	; 183
    12fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1300:	80 81       	ld	r24, Z
    1302:	91 81       	ldd	r25, Z+1	; 0x01
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	f1 f7       	brne	.-4      	; 0x1304 <LCD_vidInit+0xfc>
    1308:	fe 01       	movw	r30, r28
    130a:	e7 5b       	subi	r30, 0xB7	; 183
    130c:	ff 4f       	sbci	r31, 0xFF	; 255
    130e:	91 83       	std	Z+1, r25	; 0x01
    1310:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1312:	de 01       	movw	r26, r28
    1314:	a5 5b       	subi	r26, 0xB5	; 181
    1316:	bf 4f       	sbci	r27, 0xFF	; 255
    1318:	fe 01       	movw	r30, r28
    131a:	e5 5b       	subi	r30, 0xB5	; 181
    131c:	ff 4f       	sbci	r31, 0xFF	; 255
    131e:	80 81       	ld	r24, Z
    1320:	91 81       	ldd	r25, Z+1	; 0x01
    1322:	01 97       	sbiw	r24, 0x01	; 1
    1324:	11 96       	adiw	r26, 0x01	; 1
    1326:	9c 93       	st	X, r25
    1328:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    132a:	fe 01       	movw	r30, r28
    132c:	e5 5b       	subi	r30, 0xB5	; 181
    132e:	ff 4f       	sbci	r31, 0xFF	; 255
    1330:	80 81       	ld	r24, Z
    1332:	91 81       	ldd	r25, Z+1	; 0x01
    1334:	00 97       	sbiw	r24, 0x00	; 0
    1336:	d1 f6       	brne	.-76     	; 0x12ec <LCD_vidInit+0xe4>
    1338:	27 c0       	rjmp	.+78     	; 0x1388 <LCD_vidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    133a:	8e 01       	movw	r16, r28
    133c:	05 5b       	subi	r16, 0xB5	; 181
    133e:	1f 4f       	sbci	r17, 0xFF	; 255
    1340:	fe 01       	movw	r30, r28
    1342:	e3 5b       	subi	r30, 0xB3	; 179
    1344:	ff 4f       	sbci	r31, 0xFF	; 255
    1346:	60 81       	ld	r22, Z
    1348:	71 81       	ldd	r23, Z+1	; 0x01
    134a:	82 81       	ldd	r24, Z+2	; 0x02
    134c:	93 81       	ldd	r25, Z+3	; 0x03
    134e:	0e 94 3f 00 	call	0x7e	; 0x7e <__fixunssfsi>
    1352:	dc 01       	movw	r26, r24
    1354:	cb 01       	movw	r24, r22
    1356:	f8 01       	movw	r30, r16
    1358:	91 83       	std	Z+1, r25	; 0x01
    135a:	80 83       	st	Z, r24
    135c:	de 01       	movw	r26, r28
    135e:	a9 5b       	subi	r26, 0xB9	; 185
    1360:	bf 4f       	sbci	r27, 0xFF	; 255
    1362:	fe 01       	movw	r30, r28
    1364:	e5 5b       	subi	r30, 0xB5	; 181
    1366:	ff 4f       	sbci	r31, 0xFF	; 255
    1368:	80 81       	ld	r24, Z
    136a:	91 81       	ldd	r25, Z+1	; 0x01
    136c:	8d 93       	st	X+, r24
    136e:	9c 93       	st	X, r25
    1370:	fe 01       	movw	r30, r28
    1372:	e9 5b       	subi	r30, 0xB9	; 185
    1374:	ff 4f       	sbci	r31, 0xFF	; 255
    1376:	80 81       	ld	r24, Z
    1378:	91 81       	ldd	r25, Z+1	; 0x01
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	f1 f7       	brne	.-4      	; 0x137a <LCD_vidInit+0x172>
    137e:	fe 01       	movw	r30, r28
    1380:	e9 5b       	subi	r30, 0xB9	; 185
    1382:	ff 4f       	sbci	r31, 0xFF	; 255
    1384:	91 83       	std	Z+1, r25	; 0x01
    1386:	80 83       	st	Z, r24
	/* Delay 30ms to ensure the initialization of the LCD driver */
	_delay_ms(30);

	/* Return Home  */
	LCD_vidSendCommand(lcd_Home);
    1388:	82 e0       	ldi	r24, 0x02	; 2
    138a:	0e 94 2c 0c 	call	0x1858	; 0x1858 <LCD_vidSendCommand>
    138e:	fe 01       	movw	r30, r28
    1390:	ed 5b       	subi	r30, 0xBD	; 189
    1392:	ff 4f       	sbci	r31, 0xFF	; 255
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	a0 e7       	ldi	r26, 0x70	; 112
    139a:	b1 e4       	ldi	r27, 0x41	; 65
    139c:	80 83       	st	Z, r24
    139e:	91 83       	std	Z+1, r25	; 0x01
    13a0:	a2 83       	std	Z+2, r26	; 0x02
    13a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13a4:	8e 01       	movw	r16, r28
    13a6:	01 5c       	subi	r16, 0xC1	; 193
    13a8:	1f 4f       	sbci	r17, 0xFF	; 255
    13aa:	fe 01       	movw	r30, r28
    13ac:	ed 5b       	subi	r30, 0xBD	; 189
    13ae:	ff 4f       	sbci	r31, 0xFF	; 255
    13b0:	60 81       	ld	r22, Z
    13b2:	71 81       	ldd	r23, Z+1	; 0x01
    13b4:	82 81       	ldd	r24, Z+2	; 0x02
    13b6:	93 81       	ldd	r25, Z+3	; 0x03
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	4a ef       	ldi	r20, 0xFA	; 250
    13be:	54 e4       	ldi	r21, 0x44	; 68
    13c0:	0e 94 15 02 	call	0x42a	; 0x42a <__mulsf3>
    13c4:	dc 01       	movw	r26, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	f8 01       	movw	r30, r16
    13ca:	80 83       	st	Z, r24
    13cc:	91 83       	std	Z+1, r25	; 0x01
    13ce:	a2 83       	std	Z+2, r26	; 0x02
    13d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13d2:	fe 01       	movw	r30, r28
    13d4:	ff 96       	adiw	r30, 0x3f	; 63
    13d6:	60 81       	ld	r22, Z
    13d8:	71 81       	ldd	r23, Z+1	; 0x01
    13da:	82 81       	ldd	r24, Z+2	; 0x02
    13dc:	93 81       	ldd	r25, Z+3	; 0x03
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	40 e8       	ldi	r20, 0x80	; 128
    13e4:	5f e3       	ldi	r21, 0x3F	; 63
    13e6:	0e 94 6f 03 	call	0x6de	; 0x6de <__ltsf2>
    13ea:	88 23       	and	r24, r24
    13ec:	2c f4       	brge	.+10     	; 0x13f8 <LCD_vidInit+0x1f0>
		__ticks = 1;
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	9e af       	std	Y+62, r25	; 0x3e
    13f4:	8d af       	std	Y+61, r24	; 0x3d
    13f6:	46 c0       	rjmp	.+140    	; 0x1484 <LCD_vidInit+0x27c>
	else if (__tmp > 65535)
    13f8:	fe 01       	movw	r30, r28
    13fa:	ff 96       	adiw	r30, 0x3f	; 63
    13fc:	60 81       	ld	r22, Z
    13fe:	71 81       	ldd	r23, Z+1	; 0x01
    1400:	82 81       	ldd	r24, Z+2	; 0x02
    1402:	93 81       	ldd	r25, Z+3	; 0x03
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	3f ef       	ldi	r19, 0xFF	; 255
    1408:	4f e7       	ldi	r20, 0x7F	; 127
    140a:	57 e4       	ldi	r21, 0x47	; 71
    140c:	0e 94 0f 03 	call	0x61e	; 0x61e <__gtsf2>
    1410:	18 16       	cp	r1, r24
    1412:	64 f5       	brge	.+88     	; 0x146c <LCD_vidInit+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1414:	fe 01       	movw	r30, r28
    1416:	ed 5b       	subi	r30, 0xBD	; 189
    1418:	ff 4f       	sbci	r31, 0xFF	; 255
    141a:	60 81       	ld	r22, Z
    141c:	71 81       	ldd	r23, Z+1	; 0x01
    141e:	82 81       	ldd	r24, Z+2	; 0x02
    1420:	93 81       	ldd	r25, Z+3	; 0x03
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	40 e2       	ldi	r20, 0x20	; 32
    1428:	51 e4       	ldi	r21, 0x41	; 65
    142a:	0e 94 15 02 	call	0x42a	; 0x42a <__mulsf3>
    142e:	dc 01       	movw	r26, r24
    1430:	cb 01       	movw	r24, r22
    1432:	bc 01       	movw	r22, r24
    1434:	cd 01       	movw	r24, r26
    1436:	0e 94 3f 00 	call	0x7e	; 0x7e <__fixunssfsi>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	9e af       	std	Y+62, r25	; 0x3e
    1440:	8d af       	std	Y+61, r24	; 0x3d
    1442:	0f c0       	rjmp	.+30     	; 0x1462 <LCD_vidInit+0x25a>
    1444:	88 ec       	ldi	r24, 0xC8	; 200
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	9c af       	std	Y+60, r25	; 0x3c
    144a:	8b af       	std	Y+59, r24	; 0x3b
    144c:	8b ad       	ldd	r24, Y+59	; 0x3b
    144e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1450:	01 97       	sbiw	r24, 0x01	; 1
    1452:	f1 f7       	brne	.-4      	; 0x1450 <LCD_vidInit+0x248>
    1454:	9c af       	std	Y+60, r25	; 0x3c
    1456:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1458:	8d ad       	ldd	r24, Y+61	; 0x3d
    145a:	9e ad       	ldd	r25, Y+62	; 0x3e
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	9e af       	std	Y+62, r25	; 0x3e
    1460:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1462:	8d ad       	ldd	r24, Y+61	; 0x3d
    1464:	9e ad       	ldd	r25, Y+62	; 0x3e
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	69 f7       	brne	.-38     	; 0x1444 <LCD_vidInit+0x23c>
    146a:	16 c0       	rjmp	.+44     	; 0x1498 <LCD_vidInit+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    146c:	fe 01       	movw	r30, r28
    146e:	ff 96       	adiw	r30, 0x3f	; 63
    1470:	60 81       	ld	r22, Z
    1472:	71 81       	ldd	r23, Z+1	; 0x01
    1474:	82 81       	ldd	r24, Z+2	; 0x02
    1476:	93 81       	ldd	r25, Z+3	; 0x03
    1478:	0e 94 3f 00 	call	0x7e	; 0x7e <__fixunssfsi>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	9e af       	std	Y+62, r25	; 0x3e
    1482:	8d af       	std	Y+61, r24	; 0x3d
    1484:	8d ad       	ldd	r24, Y+61	; 0x3d
    1486:	9e ad       	ldd	r25, Y+62	; 0x3e
    1488:	9a af       	std	Y+58, r25	; 0x3a
    148a:	89 af       	std	Y+57, r24	; 0x39
    148c:	89 ad       	ldd	r24, Y+57	; 0x39
    148e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	f1 f7       	brne	.-4      	; 0x1490 <LCD_vidInit+0x288>
    1494:	9a af       	std	Y+58, r25	; 0x3a
    1496:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(15);

	/* Function Set  */
	LCD_vidSendCommand(lcd_FunctionSet8bit);
    1498:	88 e3       	ldi	r24, 0x38	; 56
    149a:	0e 94 2c 0c 	call	0x1858	; 0x1858 <LCD_vidSendCommand>
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	a0 e8       	ldi	r26, 0x80	; 128
    14a4:	bf e3       	ldi	r27, 0x3F	; 63
    14a6:	8d ab       	std	Y+53, r24	; 0x35
    14a8:	9e ab       	std	Y+54, r25	; 0x36
    14aa:	af ab       	std	Y+55, r26	; 0x37
    14ac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ae:	6d a9       	ldd	r22, Y+53	; 0x35
    14b0:	7e a9       	ldd	r23, Y+54	; 0x36
    14b2:	8f a9       	ldd	r24, Y+55	; 0x37
    14b4:	98 ad       	ldd	r25, Y+56	; 0x38
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	4a ef       	ldi	r20, 0xFA	; 250
    14bc:	54 e4       	ldi	r21, 0x44	; 68
    14be:	0e 94 15 02 	call	0x42a	; 0x42a <__mulsf3>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	89 ab       	std	Y+49, r24	; 0x31
    14c8:	9a ab       	std	Y+50, r25	; 0x32
    14ca:	ab ab       	std	Y+51, r26	; 0x33
    14cc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14ce:	69 a9       	ldd	r22, Y+49	; 0x31
    14d0:	7a a9       	ldd	r23, Y+50	; 0x32
    14d2:	8b a9       	ldd	r24, Y+51	; 0x33
    14d4:	9c a9       	ldd	r25, Y+52	; 0x34
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	40 e8       	ldi	r20, 0x80	; 128
    14dc:	5f e3       	ldi	r21, 0x3F	; 63
    14de:	0e 94 6f 03 	call	0x6de	; 0x6de <__ltsf2>
    14e2:	88 23       	and	r24, r24
    14e4:	2c f4       	brge	.+10     	; 0x14f0 <LCD_vidInit+0x2e8>
		__ticks = 1;
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	98 ab       	std	Y+48, r25	; 0x30
    14ec:	8f a7       	std	Y+47, r24	; 0x2f
    14ee:	3f c0       	rjmp	.+126    	; 0x156e <LCD_vidInit+0x366>
	else if (__tmp > 65535)
    14f0:	69 a9       	ldd	r22, Y+49	; 0x31
    14f2:	7a a9       	ldd	r23, Y+50	; 0x32
    14f4:	8b a9       	ldd	r24, Y+51	; 0x33
    14f6:	9c a9       	ldd	r25, Y+52	; 0x34
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	3f ef       	ldi	r19, 0xFF	; 255
    14fc:	4f e7       	ldi	r20, 0x7F	; 127
    14fe:	57 e4       	ldi	r21, 0x47	; 71
    1500:	0e 94 0f 03 	call	0x61e	; 0x61e <__gtsf2>
    1504:	18 16       	cp	r1, r24
    1506:	4c f5       	brge	.+82     	; 0x155a <LCD_vidInit+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1508:	6d a9       	ldd	r22, Y+53	; 0x35
    150a:	7e a9       	ldd	r23, Y+54	; 0x36
    150c:	8f a9       	ldd	r24, Y+55	; 0x37
    150e:	98 ad       	ldd	r25, Y+56	; 0x38
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	40 e2       	ldi	r20, 0x20	; 32
    1516:	51 e4       	ldi	r21, 0x41	; 65
    1518:	0e 94 15 02 	call	0x42a	; 0x42a <__mulsf3>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	bc 01       	movw	r22, r24
    1522:	cd 01       	movw	r24, r26
    1524:	0e 94 3f 00 	call	0x7e	; 0x7e <__fixunssfsi>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	98 ab       	std	Y+48, r25	; 0x30
    152e:	8f a7       	std	Y+47, r24	; 0x2f
    1530:	0f c0       	rjmp	.+30     	; 0x1550 <LCD_vidInit+0x348>
    1532:	88 ec       	ldi	r24, 0xC8	; 200
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	9e a7       	std	Y+46, r25	; 0x2e
    1538:	8d a7       	std	Y+45, r24	; 0x2d
    153a:	8d a5       	ldd	r24, Y+45	; 0x2d
    153c:	9e a5       	ldd	r25, Y+46	; 0x2e
    153e:	01 97       	sbiw	r24, 0x01	; 1
    1540:	f1 f7       	brne	.-4      	; 0x153e <LCD_vidInit+0x336>
    1542:	9e a7       	std	Y+46, r25	; 0x2e
    1544:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1546:	8f a5       	ldd	r24, Y+47	; 0x2f
    1548:	98 a9       	ldd	r25, Y+48	; 0x30
    154a:	01 97       	sbiw	r24, 0x01	; 1
    154c:	98 ab       	std	Y+48, r25	; 0x30
    154e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1550:	8f a5       	ldd	r24, Y+47	; 0x2f
    1552:	98 a9       	ldd	r25, Y+48	; 0x30
    1554:	00 97       	sbiw	r24, 0x00	; 0
    1556:	69 f7       	brne	.-38     	; 0x1532 <LCD_vidInit+0x32a>
    1558:	14 c0       	rjmp	.+40     	; 0x1582 <LCD_vidInit+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    155a:	69 a9       	ldd	r22, Y+49	; 0x31
    155c:	7a a9       	ldd	r23, Y+50	; 0x32
    155e:	8b a9       	ldd	r24, Y+51	; 0x33
    1560:	9c a9       	ldd	r25, Y+52	; 0x34
    1562:	0e 94 3f 00 	call	0x7e	; 0x7e <__fixunssfsi>
    1566:	dc 01       	movw	r26, r24
    1568:	cb 01       	movw	r24, r22
    156a:	98 ab       	std	Y+48, r25	; 0x30
    156c:	8f a7       	std	Y+47, r24	; 0x2f
    156e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1570:	98 a9       	ldd	r25, Y+48	; 0x30
    1572:	9c a7       	std	Y+44, r25	; 0x2c
    1574:	8b a7       	std	Y+43, r24	; 0x2b
    1576:	8b a5       	ldd	r24, Y+43	; 0x2b
    1578:	9c a5       	ldd	r25, Y+44	; 0x2c
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	f1 f7       	brne	.-4      	; 0x157a <LCD_vidInit+0x372>
    157e:	9c a7       	std	Y+44, r25	; 0x2c
    1580:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/* Display ON OFF Control */
	LCD_vidSendCommand(lcd_DisplayOn);
    1582:	8c e0       	ldi	r24, 0x0C	; 12
    1584:	0e 94 2c 0c 	call	0x1858	; 0x1858 <LCD_vidSendCommand>
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	a0 e8       	ldi	r26, 0x80	; 128
    158e:	bf e3       	ldi	r27, 0x3F	; 63
    1590:	8f a3       	std	Y+39, r24	; 0x27
    1592:	98 a7       	std	Y+40, r25	; 0x28
    1594:	a9 a7       	std	Y+41, r26	; 0x29
    1596:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1598:	6f a1       	ldd	r22, Y+39	; 0x27
    159a:	78 a5       	ldd	r23, Y+40	; 0x28
    159c:	89 a5       	ldd	r24, Y+41	; 0x29
    159e:	9a a5       	ldd	r25, Y+42	; 0x2a
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	4a ef       	ldi	r20, 0xFA	; 250
    15a6:	54 e4       	ldi	r21, 0x44	; 68
    15a8:	0e 94 15 02 	call	0x42a	; 0x42a <__mulsf3>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	8b a3       	std	Y+35, r24	; 0x23
    15b2:	9c a3       	std	Y+36, r25	; 0x24
    15b4:	ad a3       	std	Y+37, r26	; 0x25
    15b6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15b8:	6b a1       	ldd	r22, Y+35	; 0x23
    15ba:	7c a1       	ldd	r23, Y+36	; 0x24
    15bc:	8d a1       	ldd	r24, Y+37	; 0x25
    15be:	9e a1       	ldd	r25, Y+38	; 0x26
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 e8       	ldi	r20, 0x80	; 128
    15c6:	5f e3       	ldi	r21, 0x3F	; 63
    15c8:	0e 94 6f 03 	call	0x6de	; 0x6de <__ltsf2>
    15cc:	88 23       	and	r24, r24
    15ce:	2c f4       	brge	.+10     	; 0x15da <LCD_vidInit+0x3d2>
		__ticks = 1;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	9a a3       	std	Y+34, r25	; 0x22
    15d6:	89 a3       	std	Y+33, r24	; 0x21
    15d8:	3f c0       	rjmp	.+126    	; 0x1658 <LCD_vidInit+0x450>
	else if (__tmp > 65535)
    15da:	6b a1       	ldd	r22, Y+35	; 0x23
    15dc:	7c a1       	ldd	r23, Y+36	; 0x24
    15de:	8d a1       	ldd	r24, Y+37	; 0x25
    15e0:	9e a1       	ldd	r25, Y+38	; 0x26
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	3f ef       	ldi	r19, 0xFF	; 255
    15e6:	4f e7       	ldi	r20, 0x7F	; 127
    15e8:	57 e4       	ldi	r21, 0x47	; 71
    15ea:	0e 94 0f 03 	call	0x61e	; 0x61e <__gtsf2>
    15ee:	18 16       	cp	r1, r24
    15f0:	4c f5       	brge	.+82     	; 0x1644 <LCD_vidInit+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f2:	6f a1       	ldd	r22, Y+39	; 0x27
    15f4:	78 a5       	ldd	r23, Y+40	; 0x28
    15f6:	89 a5       	ldd	r24, Y+41	; 0x29
    15f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	40 e2       	ldi	r20, 0x20	; 32
    1600:	51 e4       	ldi	r21, 0x41	; 65
    1602:	0e 94 15 02 	call	0x42a	; 0x42a <__mulsf3>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	bc 01       	movw	r22, r24
    160c:	cd 01       	movw	r24, r26
    160e:	0e 94 3f 00 	call	0x7e	; 0x7e <__fixunssfsi>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	9a a3       	std	Y+34, r25	; 0x22
    1618:	89 a3       	std	Y+33, r24	; 0x21
    161a:	0f c0       	rjmp	.+30     	; 0x163a <LCD_vidInit+0x432>
    161c:	88 ec       	ldi	r24, 0xC8	; 200
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	98 a3       	std	Y+32, r25	; 0x20
    1622:	8f 8f       	std	Y+31, r24	; 0x1f
    1624:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1626:	98 a1       	ldd	r25, Y+32	; 0x20
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	f1 f7       	brne	.-4      	; 0x1628 <LCD_vidInit+0x420>
    162c:	98 a3       	std	Y+32, r25	; 0x20
    162e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1630:	89 a1       	ldd	r24, Y+33	; 0x21
    1632:	9a a1       	ldd	r25, Y+34	; 0x22
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	9a a3       	std	Y+34, r25	; 0x22
    1638:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    163a:	89 a1       	ldd	r24, Y+33	; 0x21
    163c:	9a a1       	ldd	r25, Y+34	; 0x22
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	69 f7       	brne	.-38     	; 0x161c <LCD_vidInit+0x414>
    1642:	14 c0       	rjmp	.+40     	; 0x166c <LCD_vidInit+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1644:	6b a1       	ldd	r22, Y+35	; 0x23
    1646:	7c a1       	ldd	r23, Y+36	; 0x24
    1648:	8d a1       	ldd	r24, Y+37	; 0x25
    164a:	9e a1       	ldd	r25, Y+38	; 0x26
    164c:	0e 94 3f 00 	call	0x7e	; 0x7e <__fixunssfsi>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	9a a3       	std	Y+34, r25	; 0x22
    1656:	89 a3       	std	Y+33, r24	; 0x21
    1658:	89 a1       	ldd	r24, Y+33	; 0x21
    165a:	9a a1       	ldd	r25, Y+34	; 0x22
    165c:	9e 8f       	std	Y+30, r25	; 0x1e
    165e:	8d 8f       	std	Y+29, r24	; 0x1d
    1660:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1662:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	f1 f7       	brne	.-4      	; 0x1664 <LCD_vidInit+0x45c>
    1668:	9e 8f       	std	Y+30, r25	; 0x1e
    166a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/* Clear Display */
	LCD_vidSendCommand(lcd_Clear);
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	0e 94 2c 0c 	call	0x1858	; 0x1858 <LCD_vidSendCommand>
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	a0 e7       	ldi	r26, 0x70	; 112
    1678:	b1 e4       	ldi	r27, 0x41	; 65
    167a:	89 8f       	std	Y+25, r24	; 0x19
    167c:	9a 8f       	std	Y+26, r25	; 0x1a
    167e:	ab 8f       	std	Y+27, r26	; 0x1b
    1680:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1682:	69 8d       	ldd	r22, Y+25	; 0x19
    1684:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1686:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1688:	9c 8d       	ldd	r25, Y+28	; 0x1c
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	4a ef       	ldi	r20, 0xFA	; 250
    1690:	54 e4       	ldi	r21, 0x44	; 68
    1692:	0e 94 15 02 	call	0x42a	; 0x42a <__mulsf3>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	8d 8b       	std	Y+21, r24	; 0x15
    169c:	9e 8b       	std	Y+22, r25	; 0x16
    169e:	af 8b       	std	Y+23, r26	; 0x17
    16a0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16a2:	6d 89       	ldd	r22, Y+21	; 0x15
    16a4:	7e 89       	ldd	r23, Y+22	; 0x16
    16a6:	8f 89       	ldd	r24, Y+23	; 0x17
    16a8:	98 8d       	ldd	r25, Y+24	; 0x18
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	40 e8       	ldi	r20, 0x80	; 128
    16b0:	5f e3       	ldi	r21, 0x3F	; 63
    16b2:	0e 94 6f 03 	call	0x6de	; 0x6de <__ltsf2>
    16b6:	88 23       	and	r24, r24
    16b8:	2c f4       	brge	.+10     	; 0x16c4 <LCD_vidInit+0x4bc>
		__ticks = 1;
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	9c 8b       	std	Y+20, r25	; 0x14
    16c0:	8b 8b       	std	Y+19, r24	; 0x13
    16c2:	3f c0       	rjmp	.+126    	; 0x1742 <LCD_vidInit+0x53a>
	else if (__tmp > 65535)
    16c4:	6d 89       	ldd	r22, Y+21	; 0x15
    16c6:	7e 89       	ldd	r23, Y+22	; 0x16
    16c8:	8f 89       	ldd	r24, Y+23	; 0x17
    16ca:	98 8d       	ldd	r25, Y+24	; 0x18
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	3f ef       	ldi	r19, 0xFF	; 255
    16d0:	4f e7       	ldi	r20, 0x7F	; 127
    16d2:	57 e4       	ldi	r21, 0x47	; 71
    16d4:	0e 94 0f 03 	call	0x61e	; 0x61e <__gtsf2>
    16d8:	18 16       	cp	r1, r24
    16da:	4c f5       	brge	.+82     	; 0x172e <LCD_vidInit+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16dc:	69 8d       	ldd	r22, Y+25	; 0x19
    16de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	40 e2       	ldi	r20, 0x20	; 32
    16ea:	51 e4       	ldi	r21, 0x41	; 65
    16ec:	0e 94 15 02 	call	0x42a	; 0x42a <__mulsf3>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	bc 01       	movw	r22, r24
    16f6:	cd 01       	movw	r24, r26
    16f8:	0e 94 3f 00 	call	0x7e	; 0x7e <__fixunssfsi>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	9c 8b       	std	Y+20, r25	; 0x14
    1702:	8b 8b       	std	Y+19, r24	; 0x13
    1704:	0f c0       	rjmp	.+30     	; 0x1724 <LCD_vidInit+0x51c>
    1706:	88 ec       	ldi	r24, 0xC8	; 200
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	9a 8b       	std	Y+18, r25	; 0x12
    170c:	89 8b       	std	Y+17, r24	; 0x11
    170e:	89 89       	ldd	r24, Y+17	; 0x11
    1710:	9a 89       	ldd	r25, Y+18	; 0x12
    1712:	01 97       	sbiw	r24, 0x01	; 1
    1714:	f1 f7       	brne	.-4      	; 0x1712 <LCD_vidInit+0x50a>
    1716:	9a 8b       	std	Y+18, r25	; 0x12
    1718:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    171a:	8b 89       	ldd	r24, Y+19	; 0x13
    171c:	9c 89       	ldd	r25, Y+20	; 0x14
    171e:	01 97       	sbiw	r24, 0x01	; 1
    1720:	9c 8b       	std	Y+20, r25	; 0x14
    1722:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1724:	8b 89       	ldd	r24, Y+19	; 0x13
    1726:	9c 89       	ldd	r25, Y+20	; 0x14
    1728:	00 97       	sbiw	r24, 0x00	; 0
    172a:	69 f7       	brne	.-38     	; 0x1706 <LCD_vidInit+0x4fe>
    172c:	14 c0       	rjmp	.+40     	; 0x1756 <LCD_vidInit+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    172e:	6d 89       	ldd	r22, Y+21	; 0x15
    1730:	7e 89       	ldd	r23, Y+22	; 0x16
    1732:	8f 89       	ldd	r24, Y+23	; 0x17
    1734:	98 8d       	ldd	r25, Y+24	; 0x18
    1736:	0e 94 3f 00 	call	0x7e	; 0x7e <__fixunssfsi>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	9c 8b       	std	Y+20, r25	; 0x14
    1740:	8b 8b       	std	Y+19, r24	; 0x13
    1742:	8b 89       	ldd	r24, Y+19	; 0x13
    1744:	9c 89       	ldd	r25, Y+20	; 0x14
    1746:	98 8b       	std	Y+16, r25	; 0x10
    1748:	8f 87       	std	Y+15, r24	; 0x0f
    174a:	8f 85       	ldd	r24, Y+15	; 0x0f
    174c:	98 89       	ldd	r25, Y+16	; 0x10
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	f1 f7       	brne	.-4      	; 0x174e <LCD_vidInit+0x546>
    1752:	98 8b       	std	Y+16, r25	; 0x10
    1754:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(15);

	/* Entry Mode Set  */
	LCD_vidSendCommand(lcd_EntryMode);
    1756:	86 e0       	ldi	r24, 0x06	; 6
    1758:	0e 94 2c 0c 	call	0x1858	; 0x1858 <LCD_vidSendCommand>
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	a0 e0       	ldi	r26, 0x00	; 0
    1762:	b0 e4       	ldi	r27, 0x40	; 64
    1764:	8b 87       	std	Y+11, r24	; 0x0b
    1766:	9c 87       	std	Y+12, r25	; 0x0c
    1768:	ad 87       	std	Y+13, r26	; 0x0d
    176a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    176c:	6b 85       	ldd	r22, Y+11	; 0x0b
    176e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1770:	8d 85       	ldd	r24, Y+13	; 0x0d
    1772:	9e 85       	ldd	r25, Y+14	; 0x0e
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	4a ef       	ldi	r20, 0xFA	; 250
    177a:	54 e4       	ldi	r21, 0x44	; 68
    177c:	0e 94 15 02 	call	0x42a	; 0x42a <__mulsf3>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	8f 83       	std	Y+7, r24	; 0x07
    1786:	98 87       	std	Y+8, r25	; 0x08
    1788:	a9 87       	std	Y+9, r26	; 0x09
    178a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    178c:	6f 81       	ldd	r22, Y+7	; 0x07
    178e:	78 85       	ldd	r23, Y+8	; 0x08
    1790:	89 85       	ldd	r24, Y+9	; 0x09
    1792:	9a 85       	ldd	r25, Y+10	; 0x0a
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	40 e8       	ldi	r20, 0x80	; 128
    179a:	5f e3       	ldi	r21, 0x3F	; 63
    179c:	0e 94 6f 03 	call	0x6de	; 0x6de <__ltsf2>
    17a0:	88 23       	and	r24, r24
    17a2:	2c f4       	brge	.+10     	; 0x17ae <LCD_vidInit+0x5a6>
		__ticks = 1;
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	9e 83       	std	Y+6, r25	; 0x06
    17aa:	8d 83       	std	Y+5, r24	; 0x05
    17ac:	3f c0       	rjmp	.+126    	; 0x182c <LCD_vidInit+0x624>
	else if (__tmp > 65535)
    17ae:	6f 81       	ldd	r22, Y+7	; 0x07
    17b0:	78 85       	ldd	r23, Y+8	; 0x08
    17b2:	89 85       	ldd	r24, Y+9	; 0x09
    17b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	3f ef       	ldi	r19, 0xFF	; 255
    17ba:	4f e7       	ldi	r20, 0x7F	; 127
    17bc:	57 e4       	ldi	r21, 0x47	; 71
    17be:	0e 94 0f 03 	call	0x61e	; 0x61e <__gtsf2>
    17c2:	18 16       	cp	r1, r24
    17c4:	4c f5       	brge	.+82     	; 0x1818 <LCD_vidInit+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    17c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    17cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	40 e2       	ldi	r20, 0x20	; 32
    17d4:	51 e4       	ldi	r21, 0x41	; 65
    17d6:	0e 94 15 02 	call	0x42a	; 0x42a <__mulsf3>
    17da:	dc 01       	movw	r26, r24
    17dc:	cb 01       	movw	r24, r22
    17de:	bc 01       	movw	r22, r24
    17e0:	cd 01       	movw	r24, r26
    17e2:	0e 94 3f 00 	call	0x7e	; 0x7e <__fixunssfsi>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	9e 83       	std	Y+6, r25	; 0x06
    17ec:	8d 83       	std	Y+5, r24	; 0x05
    17ee:	0f c0       	rjmp	.+30     	; 0x180e <LCD_vidInit+0x606>
    17f0:	88 ec       	ldi	r24, 0xC8	; 200
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	9c 83       	std	Y+4, r25	; 0x04
    17f6:	8b 83       	std	Y+3, r24	; 0x03
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	9c 81       	ldd	r25, Y+4	; 0x04
    17fc:	01 97       	sbiw	r24, 0x01	; 1
    17fe:	f1 f7       	brne	.-4      	; 0x17fc <LCD_vidInit+0x5f4>
    1800:	9c 83       	std	Y+4, r25	; 0x04
    1802:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1804:	8d 81       	ldd	r24, Y+5	; 0x05
    1806:	9e 81       	ldd	r25, Y+6	; 0x06
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	9e 83       	std	Y+6, r25	; 0x06
    180c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    180e:	8d 81       	ldd	r24, Y+5	; 0x05
    1810:	9e 81       	ldd	r25, Y+6	; 0x06
    1812:	00 97       	sbiw	r24, 0x00	; 0
    1814:	69 f7       	brne	.-38     	; 0x17f0 <LCD_vidInit+0x5e8>
    1816:	14 c0       	rjmp	.+40     	; 0x1840 <LCD_vidInit+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1818:	6f 81       	ldd	r22, Y+7	; 0x07
    181a:	78 85       	ldd	r23, Y+8	; 0x08
    181c:	89 85       	ldd	r24, Y+9	; 0x09
    181e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1820:	0e 94 3f 00 	call	0x7e	; 0x7e <__fixunssfsi>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	9e 83       	std	Y+6, r25	; 0x06
    182a:	8d 83       	std	Y+5, r24	; 0x05
    182c:	8d 81       	ldd	r24, Y+5	; 0x05
    182e:	9e 81       	ldd	r25, Y+6	; 0x06
    1830:	9a 83       	std	Y+2, r25	; 0x02
    1832:	89 83       	std	Y+1, r24	; 0x01
    1834:	89 81       	ldd	r24, Y+1	; 0x01
    1836:	9a 81       	ldd	r25, Y+2	; 0x02
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	f1 f7       	brne	.-4      	; 0x1838 <LCD_vidInit+0x630>
    183c:	9a 83       	std	Y+2, r25	; 0x02
    183e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    1840:	cc 5a       	subi	r28, 0xAC	; 172
    1842:	df 4f       	sbci	r29, 0xFF	; 255
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	f8 94       	cli
    1848:	de bf       	out	0x3e, r29	; 62
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	cd bf       	out	0x3d, r28	; 61
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	1f 91       	pop	r17
    1854:	0f 91       	pop	r16
    1856:	08 95       	ret

00001858 <LCD_vidSendCommand>:
/* Description! Interface to send the configuration commands to the LCD Driver         */
/* Input      ! Command number                                                         */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_vidSendCommand(u8 u8CmdCpy)
{
    1858:	df 93       	push	r29
    185a:	cf 93       	push	r28
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	6d 97       	sbiw	r28, 0x1d	; 29
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Set RS to LOW */
	DIO_SetPinValue(PORTC, 0, LOW);
    186e:	82 e0       	ldi	r24, 0x02	; 2
    1870:	60 e0       	ldi	r22, 0x00	; 0
    1872:	40 e0       	ldi	r20, 0x00	; 0
    1874:	0e 94 ee 05 	call	0xbdc	; 0xbdc <DIO_SetPinValue>

	/* Set R/W to LOW */
	DIO_SetPinValue(PORTC, 1, LOW);
    1878:	82 e0       	ldi	r24, 0x02	; 2
    187a:	61 e0       	ldi	r22, 0x01	; 1
    187c:	40 e0       	ldi	r20, 0x00	; 0
    187e:	0e 94 ee 05 	call	0xbdc	; 0xbdc <DIO_SetPinValue>

	/* Set E to HIGH  */
	DIO_SetPinValue(PORTC, 2, HIGH);
    1882:	82 e0       	ldi	r24, 0x02	; 2
    1884:	62 e0       	ldi	r22, 0x02	; 2
    1886:	41 e0       	ldi	r20, 0x01	; 1
    1888:	0e 94 ee 05 	call	0xbdc	; 0xbdc <DIO_SetPinValue>

	/* Load Command on Data bus */
	DIO_SetPortValue(PORTD, u8CmdCpy);
    188c:	83 e0       	ldi	r24, 0x03	; 3
    188e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1890:	0e 94 c3 08 	call	0x1186	; 0x1186 <DIO_SetPortValue>

	/* Set E to LOW */
	DIO_SetPinValue(PORTC, 2, LOW);
    1894:	82 e0       	ldi	r24, 0x02	; 2
    1896:	62 e0       	ldi	r22, 0x02	; 2
    1898:	40 e0       	ldi	r20, 0x00	; 0
    189a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <DIO_SetPinValue>
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	a0 ea       	ldi	r26, 0xA0	; 160
    18a4:	b0 e4       	ldi	r27, 0x40	; 64
    18a6:	89 8f       	std	Y+25, r24	; 0x19
    18a8:	9a 8f       	std	Y+26, r25	; 0x1a
    18aa:	ab 8f       	std	Y+27, r26	; 0x1b
    18ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ae:	69 8d       	ldd	r22, Y+25	; 0x19
    18b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	4a ef       	ldi	r20, 0xFA	; 250
    18bc:	54 e4       	ldi	r21, 0x44	; 68
    18be:	0e 94 15 02 	call	0x42a	; 0x42a <__mulsf3>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	8d 8b       	std	Y+21, r24	; 0x15
    18c8:	9e 8b       	std	Y+22, r25	; 0x16
    18ca:	af 8b       	std	Y+23, r26	; 0x17
    18cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18ce:	6d 89       	ldd	r22, Y+21	; 0x15
    18d0:	7e 89       	ldd	r23, Y+22	; 0x16
    18d2:	8f 89       	ldd	r24, Y+23	; 0x17
    18d4:	98 8d       	ldd	r25, Y+24	; 0x18
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	40 e8       	ldi	r20, 0x80	; 128
    18dc:	5f e3       	ldi	r21, 0x3F	; 63
    18de:	0e 94 6f 03 	call	0x6de	; 0x6de <__ltsf2>
    18e2:	88 23       	and	r24, r24
    18e4:	2c f4       	brge	.+10     	; 0x18f0 <LCD_vidSendCommand+0x98>
		__ticks = 1;
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	9c 8b       	std	Y+20, r25	; 0x14
    18ec:	8b 8b       	std	Y+19, r24	; 0x13
    18ee:	3f c0       	rjmp	.+126    	; 0x196e <LCD_vidSendCommand+0x116>
	else if (__tmp > 65535)
    18f0:	6d 89       	ldd	r22, Y+21	; 0x15
    18f2:	7e 89       	ldd	r23, Y+22	; 0x16
    18f4:	8f 89       	ldd	r24, Y+23	; 0x17
    18f6:	98 8d       	ldd	r25, Y+24	; 0x18
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	3f ef       	ldi	r19, 0xFF	; 255
    18fc:	4f e7       	ldi	r20, 0x7F	; 127
    18fe:	57 e4       	ldi	r21, 0x47	; 71
    1900:	0e 94 0f 03 	call	0x61e	; 0x61e <__gtsf2>
    1904:	18 16       	cp	r1, r24
    1906:	4c f5       	brge	.+82     	; 0x195a <LCD_vidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1908:	69 8d       	ldd	r22, Y+25	; 0x19
    190a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    190c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    190e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	40 e2       	ldi	r20, 0x20	; 32
    1916:	51 e4       	ldi	r21, 0x41	; 65
    1918:	0e 94 15 02 	call	0x42a	; 0x42a <__mulsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	bc 01       	movw	r22, r24
    1922:	cd 01       	movw	r24, r26
    1924:	0e 94 3f 00 	call	0x7e	; 0x7e <__fixunssfsi>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	9c 8b       	std	Y+20, r25	; 0x14
    192e:	8b 8b       	std	Y+19, r24	; 0x13
    1930:	0f c0       	rjmp	.+30     	; 0x1950 <LCD_vidSendCommand+0xf8>
    1932:	88 ec       	ldi	r24, 0xC8	; 200
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	9a 8b       	std	Y+18, r25	; 0x12
    1938:	89 8b       	std	Y+17, r24	; 0x11
    193a:	89 89       	ldd	r24, Y+17	; 0x11
    193c:	9a 89       	ldd	r25, Y+18	; 0x12
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	f1 f7       	brne	.-4      	; 0x193e <LCD_vidSendCommand+0xe6>
    1942:	9a 8b       	std	Y+18, r25	; 0x12
    1944:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1946:	8b 89       	ldd	r24, Y+19	; 0x13
    1948:	9c 89       	ldd	r25, Y+20	; 0x14
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	9c 8b       	std	Y+20, r25	; 0x14
    194e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1950:	8b 89       	ldd	r24, Y+19	; 0x13
    1952:	9c 89       	ldd	r25, Y+20	; 0x14
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	69 f7       	brne	.-38     	; 0x1932 <LCD_vidSendCommand+0xda>
    1958:	14 c0       	rjmp	.+40     	; 0x1982 <LCD_vidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195a:	6d 89       	ldd	r22, Y+21	; 0x15
    195c:	7e 89       	ldd	r23, Y+22	; 0x16
    195e:	8f 89       	ldd	r24, Y+23	; 0x17
    1960:	98 8d       	ldd	r25, Y+24	; 0x18
    1962:	0e 94 3f 00 	call	0x7e	; 0x7e <__fixunssfsi>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	9c 8b       	std	Y+20, r25	; 0x14
    196c:	8b 8b       	std	Y+19, r24	; 0x13
    196e:	8b 89       	ldd	r24, Y+19	; 0x13
    1970:	9c 89       	ldd	r25, Y+20	; 0x14
    1972:	98 8b       	std	Y+16, r25	; 0x10
    1974:	8f 87       	std	Y+15, r24	; 0x0f
    1976:	8f 85       	ldd	r24, Y+15	; 0x0f
    1978:	98 89       	ldd	r25, Y+16	; 0x10
    197a:	01 97       	sbiw	r24, 0x01	; 1
    197c:	f1 f7       	brne	.-4      	; 0x197a <LCD_vidSendCommand+0x122>
    197e:	98 8b       	std	Y+16, r25	; 0x10
    1980:	8f 87       	std	Y+15, r24	; 0x0f

	/* Wait for E to settle */
	_delay_ms(5);

	/* Set E to HIGH */
	DIO_SetPinValue(PORTC, 2, HIGH);
    1982:	82 e0       	ldi	r24, 0x02	; 2
    1984:	62 e0       	ldi	r22, 0x02	; 2
    1986:	41 e0       	ldi	r20, 0x01	; 1
    1988:	0e 94 ee 05 	call	0xbdc	; 0xbdc <DIO_SetPinValue>
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	a0 e2       	ldi	r26, 0x20	; 32
    1992:	b1 e4       	ldi	r27, 0x41	; 65
    1994:	8b 87       	std	Y+11, r24	; 0x0b
    1996:	9c 87       	std	Y+12, r25	; 0x0c
    1998:	ad 87       	std	Y+13, r26	; 0x0d
    199a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    199c:	6b 85       	ldd	r22, Y+11	; 0x0b
    199e:	7c 85       	ldd	r23, Y+12	; 0x0c
    19a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	4a ef       	ldi	r20, 0xFA	; 250
    19aa:	54 e4       	ldi	r21, 0x44	; 68
    19ac:	0e 94 15 02 	call	0x42a	; 0x42a <__mulsf3>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	8f 83       	std	Y+7, r24	; 0x07
    19b6:	98 87       	std	Y+8, r25	; 0x08
    19b8:	a9 87       	std	Y+9, r26	; 0x09
    19ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19bc:	6f 81       	ldd	r22, Y+7	; 0x07
    19be:	78 85       	ldd	r23, Y+8	; 0x08
    19c0:	89 85       	ldd	r24, Y+9	; 0x09
    19c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	40 e8       	ldi	r20, 0x80	; 128
    19ca:	5f e3       	ldi	r21, 0x3F	; 63
    19cc:	0e 94 6f 03 	call	0x6de	; 0x6de <__ltsf2>
    19d0:	88 23       	and	r24, r24
    19d2:	2c f4       	brge	.+10     	; 0x19de <LCD_vidSendCommand+0x186>
		__ticks = 1;
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	9e 83       	std	Y+6, r25	; 0x06
    19da:	8d 83       	std	Y+5, r24	; 0x05
    19dc:	3f c0       	rjmp	.+126    	; 0x1a5c <LCD_vidSendCommand+0x204>
	else if (__tmp > 65535)
    19de:	6f 81       	ldd	r22, Y+7	; 0x07
    19e0:	78 85       	ldd	r23, Y+8	; 0x08
    19e2:	89 85       	ldd	r24, Y+9	; 0x09
    19e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	3f ef       	ldi	r19, 0xFF	; 255
    19ea:	4f e7       	ldi	r20, 0x7F	; 127
    19ec:	57 e4       	ldi	r21, 0x47	; 71
    19ee:	0e 94 0f 03 	call	0x61e	; 0x61e <__gtsf2>
    19f2:	18 16       	cp	r1, r24
    19f4:	4c f5       	brge	.+82     	; 0x1a48 <LCD_vidSendCommand+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    19f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    19fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    19fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	40 e2       	ldi	r20, 0x20	; 32
    1a04:	51 e4       	ldi	r21, 0x41	; 65
    1a06:	0e 94 15 02 	call	0x42a	; 0x42a <__mulsf3>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	bc 01       	movw	r22, r24
    1a10:	cd 01       	movw	r24, r26
    1a12:	0e 94 3f 00 	call	0x7e	; 0x7e <__fixunssfsi>
    1a16:	dc 01       	movw	r26, r24
    1a18:	cb 01       	movw	r24, r22
    1a1a:	9e 83       	std	Y+6, r25	; 0x06
    1a1c:	8d 83       	std	Y+5, r24	; 0x05
    1a1e:	0f c0       	rjmp	.+30     	; 0x1a3e <LCD_vidSendCommand+0x1e6>
    1a20:	88 ec       	ldi	r24, 0xC8	; 200
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	9c 83       	std	Y+4, r25	; 0x04
    1a26:	8b 83       	std	Y+3, r24	; 0x03
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	f1 f7       	brne	.-4      	; 0x1a2c <LCD_vidSendCommand+0x1d4>
    1a30:	9c 83       	std	Y+4, r25	; 0x04
    1a32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a34:	8d 81       	ldd	r24, Y+5	; 0x05
    1a36:	9e 81       	ldd	r25, Y+6	; 0x06
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	9e 83       	std	Y+6, r25	; 0x06
    1a3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a40:	9e 81       	ldd	r25, Y+6	; 0x06
    1a42:	00 97       	sbiw	r24, 0x00	; 0
    1a44:	69 f7       	brne	.-38     	; 0x1a20 <LCD_vidSendCommand+0x1c8>
    1a46:	14 c0       	rjmp	.+40     	; 0x1a70 <LCD_vidSendCommand+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a48:	6f 81       	ldd	r22, Y+7	; 0x07
    1a4a:	78 85       	ldd	r23, Y+8	; 0x08
    1a4c:	89 85       	ldd	r24, Y+9	; 0x09
    1a4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a50:	0e 94 3f 00 	call	0x7e	; 0x7e <__fixunssfsi>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	9e 83       	std	Y+6, r25	; 0x06
    1a5a:	8d 83       	std	Y+5, r24	; 0x05
    1a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a60:	9a 83       	std	Y+2, r25	; 0x02
    1a62:	89 83       	std	Y+1, r24	; 0x01
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	9a 81       	ldd	r25, Y+2	; 0x02
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	f1 f7       	brne	.-4      	; 0x1a68 <LCD_vidSendCommand+0x210>
    1a6c:	9a 83       	std	Y+2, r25	; 0x02
    1a6e:	89 83       	std	Y+1, r24	; 0x01

	/* Delay for 10ms to let the LCD execute command */
	_delay_ms(10);

}
    1a70:	6d 96       	adiw	r28, 0x1d	; 29
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	f8 94       	cli
    1a76:	de bf       	out	0x3e, r29	; 62
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	cd bf       	out	0x3d, r28	; 61
    1a7c:	cf 91       	pop	r28
    1a7e:	df 91       	pop	r29
    1a80:	08 95       	ret

00001a82 <LCD_vidWriteCharctr>:
/* Description! Interface to write character on LCD screen                             */
/* Input      ! Data to send                                                           */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_vidWriteCharctr(u8 u8DataCpy)
{
    1a82:	df 93       	push	r29
    1a84:	cf 93       	push	r28
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	6d 97       	sbiw	r28, 0x1d	; 29
    1a8c:	0f b6       	in	r0, 0x3f	; 63
    1a8e:	f8 94       	cli
    1a90:	de bf       	out	0x3e, r29	; 62
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	cd bf       	out	0x3d, r28	; 61
    1a96:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Set RS to HIG */
	DIO_SetPinValue(PORTC, 0, HIGH);
    1a98:	82 e0       	ldi	r24, 0x02	; 2
    1a9a:	60 e0       	ldi	r22, 0x00	; 0
    1a9c:	41 e0       	ldi	r20, 0x01	; 1
    1a9e:	0e 94 ee 05 	call	0xbdc	; 0xbdc <DIO_SetPinValue>

	/* Set R/W to LOW */
	DIO_SetPinValue(PORTC, 1, LOW);
    1aa2:	82 e0       	ldi	r24, 0x02	; 2
    1aa4:	61 e0       	ldi	r22, 0x01	; 1
    1aa6:	40 e0       	ldi	r20, 0x00	; 0
    1aa8:	0e 94 ee 05 	call	0xbdc	; 0xbdc <DIO_SetPinValue>

	/* Set E to HIGH */
	DIO_SetPinValue(PORTC, 2, HIGH);
    1aac:	82 e0       	ldi	r24, 0x02	; 2
    1aae:	62 e0       	ldi	r22, 0x02	; 2
    1ab0:	41 e0       	ldi	r20, 0x01	; 1
    1ab2:	0e 94 ee 05 	call	0xbdc	; 0xbdc <DIO_SetPinValue>

	/* Load Command on Data bus */
	DIO_SetPortValue(PORTD, u8DataCpy);
    1ab6:	83 e0       	ldi	r24, 0x03	; 3
    1ab8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1aba:	0e 94 c3 08 	call	0x1186	; 0x1186 <DIO_SetPortValue>

	/* Set E to LOW */
	DIO_SetPinValue(PORTC, 2, LOW);
    1abe:	82 e0       	ldi	r24, 0x02	; 2
    1ac0:	62 e0       	ldi	r22, 0x02	; 2
    1ac2:	40 e0       	ldi	r20, 0x00	; 0
    1ac4:	0e 94 ee 05 	call	0xbdc	; 0xbdc <DIO_SetPinValue>
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	a0 ea       	ldi	r26, 0xA0	; 160
    1ace:	b0 e4       	ldi	r27, 0x40	; 64
    1ad0:	89 8f       	std	Y+25, r24	; 0x19
    1ad2:	9a 8f       	std	Y+26, r25	; 0x1a
    1ad4:	ab 8f       	std	Y+27, r26	; 0x1b
    1ad6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad8:	69 8d       	ldd	r22, Y+25	; 0x19
    1ada:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1adc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ade:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	4a ef       	ldi	r20, 0xFA	; 250
    1ae6:	54 e4       	ldi	r21, 0x44	; 68
    1ae8:	0e 94 15 02 	call	0x42a	; 0x42a <__mulsf3>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	8d 8b       	std	Y+21, r24	; 0x15
    1af2:	9e 8b       	std	Y+22, r25	; 0x16
    1af4:	af 8b       	std	Y+23, r26	; 0x17
    1af6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1af8:	6d 89       	ldd	r22, Y+21	; 0x15
    1afa:	7e 89       	ldd	r23, Y+22	; 0x16
    1afc:	8f 89       	ldd	r24, Y+23	; 0x17
    1afe:	98 8d       	ldd	r25, Y+24	; 0x18
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	40 e8       	ldi	r20, 0x80	; 128
    1b06:	5f e3       	ldi	r21, 0x3F	; 63
    1b08:	0e 94 6f 03 	call	0x6de	; 0x6de <__ltsf2>
    1b0c:	88 23       	and	r24, r24
    1b0e:	2c f4       	brge	.+10     	; 0x1b1a <LCD_vidWriteCharctr+0x98>
		__ticks = 1;
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	9c 8b       	std	Y+20, r25	; 0x14
    1b16:	8b 8b       	std	Y+19, r24	; 0x13
    1b18:	3f c0       	rjmp	.+126    	; 0x1b98 <LCD_vidWriteCharctr+0x116>
	else if (__tmp > 65535)
    1b1a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b1c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b1e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b20:	98 8d       	ldd	r25, Y+24	; 0x18
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	3f ef       	ldi	r19, 0xFF	; 255
    1b26:	4f e7       	ldi	r20, 0x7F	; 127
    1b28:	57 e4       	ldi	r21, 0x47	; 71
    1b2a:	0e 94 0f 03 	call	0x61e	; 0x61e <__gtsf2>
    1b2e:	18 16       	cp	r1, r24
    1b30:	4c f5       	brge	.+82     	; 0x1b84 <LCD_vidWriteCharctr+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b32:	69 8d       	ldd	r22, Y+25	; 0x19
    1b34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	40 e2       	ldi	r20, 0x20	; 32
    1b40:	51 e4       	ldi	r21, 0x41	; 65
    1b42:	0e 94 15 02 	call	0x42a	; 0x42a <__mulsf3>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	bc 01       	movw	r22, r24
    1b4c:	cd 01       	movw	r24, r26
    1b4e:	0e 94 3f 00 	call	0x7e	; 0x7e <__fixunssfsi>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	9c 8b       	std	Y+20, r25	; 0x14
    1b58:	8b 8b       	std	Y+19, r24	; 0x13
    1b5a:	0f c0       	rjmp	.+30     	; 0x1b7a <LCD_vidWriteCharctr+0xf8>
    1b5c:	88 ec       	ldi	r24, 0xC8	; 200
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	9a 8b       	std	Y+18, r25	; 0x12
    1b62:	89 8b       	std	Y+17, r24	; 0x11
    1b64:	89 89       	ldd	r24, Y+17	; 0x11
    1b66:	9a 89       	ldd	r25, Y+18	; 0x12
    1b68:	01 97       	sbiw	r24, 0x01	; 1
    1b6a:	f1 f7       	brne	.-4      	; 0x1b68 <LCD_vidWriteCharctr+0xe6>
    1b6c:	9a 8b       	std	Y+18, r25	; 0x12
    1b6e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b70:	8b 89       	ldd	r24, Y+19	; 0x13
    1b72:	9c 89       	ldd	r25, Y+20	; 0x14
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	9c 8b       	std	Y+20, r25	; 0x14
    1b78:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b7c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b7e:	00 97       	sbiw	r24, 0x00	; 0
    1b80:	69 f7       	brne	.-38     	; 0x1b5c <LCD_vidWriteCharctr+0xda>
    1b82:	14 c0       	rjmp	.+40     	; 0x1bac <LCD_vidWriteCharctr+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b84:	6d 89       	ldd	r22, Y+21	; 0x15
    1b86:	7e 89       	ldd	r23, Y+22	; 0x16
    1b88:	8f 89       	ldd	r24, Y+23	; 0x17
    1b8a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b8c:	0e 94 3f 00 	call	0x7e	; 0x7e <__fixunssfsi>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	9c 8b       	std	Y+20, r25	; 0x14
    1b96:	8b 8b       	std	Y+19, r24	; 0x13
    1b98:	8b 89       	ldd	r24, Y+19	; 0x13
    1b9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b9c:	98 8b       	std	Y+16, r25	; 0x10
    1b9e:	8f 87       	std	Y+15, r24	; 0x0f
    1ba0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ba2:	98 89       	ldd	r25, Y+16	; 0x10
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	f1 f7       	brne	.-4      	; 0x1ba4 <LCD_vidWriteCharctr+0x122>
    1ba8:	98 8b       	std	Y+16, r25	; 0x10
    1baa:	8f 87       	std	Y+15, r24	; 0x0f

	/* Wait for E to settle */
	_delay_ms(5);

	/* Set E to HIGH */
	DIO_SetPinValue(PORTC, 2, HIGH);
    1bac:	82 e0       	ldi	r24, 0x02	; 2
    1bae:	62 e0       	ldi	r22, 0x02	; 2
    1bb0:	41 e0       	ldi	r20, 0x01	; 1
    1bb2:	0e 94 ee 05 	call	0xbdc	; 0xbdc <DIO_SetPinValue>
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	a0 e2       	ldi	r26, 0x20	; 32
    1bbc:	b1 e4       	ldi	r27, 0x41	; 65
    1bbe:	8b 87       	std	Y+11, r24	; 0x0b
    1bc0:	9c 87       	std	Y+12, r25	; 0x0c
    1bc2:	ad 87       	std	Y+13, r26	; 0x0d
    1bc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	4a ef       	ldi	r20, 0xFA	; 250
    1bd4:	54 e4       	ldi	r21, 0x44	; 68
    1bd6:	0e 94 15 02 	call	0x42a	; 0x42a <__mulsf3>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	8f 83       	std	Y+7, r24	; 0x07
    1be0:	98 87       	std	Y+8, r25	; 0x08
    1be2:	a9 87       	std	Y+9, r26	; 0x09
    1be4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1be6:	6f 81       	ldd	r22, Y+7	; 0x07
    1be8:	78 85       	ldd	r23, Y+8	; 0x08
    1bea:	89 85       	ldd	r24, Y+9	; 0x09
    1bec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	40 e8       	ldi	r20, 0x80	; 128
    1bf4:	5f e3       	ldi	r21, 0x3F	; 63
    1bf6:	0e 94 6f 03 	call	0x6de	; 0x6de <__ltsf2>
    1bfa:	88 23       	and	r24, r24
    1bfc:	2c f4       	brge	.+10     	; 0x1c08 <LCD_vidWriteCharctr+0x186>
		__ticks = 1;
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	9e 83       	std	Y+6, r25	; 0x06
    1c04:	8d 83       	std	Y+5, r24	; 0x05
    1c06:	3f c0       	rjmp	.+126    	; 0x1c86 <LCD_vidWriteCharctr+0x204>
	else if (__tmp > 65535)
    1c08:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0a:	78 85       	ldd	r23, Y+8	; 0x08
    1c0c:	89 85       	ldd	r24, Y+9	; 0x09
    1c0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	3f ef       	ldi	r19, 0xFF	; 255
    1c14:	4f e7       	ldi	r20, 0x7F	; 127
    1c16:	57 e4       	ldi	r21, 0x47	; 71
    1c18:	0e 94 0f 03 	call	0x61e	; 0x61e <__gtsf2>
    1c1c:	18 16       	cp	r1, r24
    1c1e:	4c f5       	brge	.+82     	; 0x1c72 <LCD_vidWriteCharctr+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	40 e2       	ldi	r20, 0x20	; 32
    1c2e:	51 e4       	ldi	r21, 0x41	; 65
    1c30:	0e 94 15 02 	call	0x42a	; 0x42a <__mulsf3>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	bc 01       	movw	r22, r24
    1c3a:	cd 01       	movw	r24, r26
    1c3c:	0e 94 3f 00 	call	0x7e	; 0x7e <__fixunssfsi>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	9e 83       	std	Y+6, r25	; 0x06
    1c46:	8d 83       	std	Y+5, r24	; 0x05
    1c48:	0f c0       	rjmp	.+30     	; 0x1c68 <LCD_vidWriteCharctr+0x1e6>
    1c4a:	88 ec       	ldi	r24, 0xC8	; 200
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	9c 83       	std	Y+4, r25	; 0x04
    1c50:	8b 83       	std	Y+3, r24	; 0x03
    1c52:	8b 81       	ldd	r24, Y+3	; 0x03
    1c54:	9c 81       	ldd	r25, Y+4	; 0x04
    1c56:	01 97       	sbiw	r24, 0x01	; 1
    1c58:	f1 f7       	brne	.-4      	; 0x1c56 <LCD_vidWriteCharctr+0x1d4>
    1c5a:	9c 83       	std	Y+4, r25	; 0x04
    1c5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c60:	9e 81       	ldd	r25, Y+6	; 0x06
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	9e 83       	std	Y+6, r25	; 0x06
    1c66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c68:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c6c:	00 97       	sbiw	r24, 0x00	; 0
    1c6e:	69 f7       	brne	.-38     	; 0x1c4a <LCD_vidWriteCharctr+0x1c8>
    1c70:	14 c0       	rjmp	.+40     	; 0x1c9a <LCD_vidWriteCharctr+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c72:	6f 81       	ldd	r22, Y+7	; 0x07
    1c74:	78 85       	ldd	r23, Y+8	; 0x08
    1c76:	89 85       	ldd	r24, Y+9	; 0x09
    1c78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7a:	0e 94 3f 00 	call	0x7e	; 0x7e <__fixunssfsi>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	9e 83       	std	Y+6, r25	; 0x06
    1c84:	8d 83       	std	Y+5, r24	; 0x05
    1c86:	8d 81       	ldd	r24, Y+5	; 0x05
    1c88:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8a:	9a 83       	std	Y+2, r25	; 0x02
    1c8c:	89 83       	std	Y+1, r24	; 0x01
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	9a 81       	ldd	r25, Y+2	; 0x02
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	f1 f7       	brne	.-4      	; 0x1c92 <LCD_vidWriteCharctr+0x210>
    1c96:	9a 83       	std	Y+2, r25	; 0x02
    1c98:	89 83       	std	Y+1, r24	; 0x01

	/* Delay to let the LCD Display the character */
	_delay_ms(10);

}
    1c9a:	6d 96       	adiw	r28, 0x1d	; 29
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	f8 94       	cli
    1ca0:	de bf       	out	0x3e, r29	; 62
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	cd bf       	out	0x3d, r28	; 61
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	08 95       	ret

00001cac <LCD_String_xy>:
/* Description! Interface to write string on LCD screen                                */
/* Input      ! Pointer to the string                                                  */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD function */
{
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	00 d0       	rcall	.+0      	; 0x1cb2 <LCD_String_xy+0x6>
    1cb2:	00 d0       	rcall	.+0      	; 0x1cb4 <LCD_String_xy+0x8>
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
    1cb8:	89 83       	std	Y+1, r24	; 0x01
    1cba:	6a 83       	std	Y+2, r22	; 0x02
    1cbc:	5c 83       	std	Y+4, r21	; 0x04
    1cbe:	4b 83       	std	Y+3, r20	; 0x03
	if (row == 1)
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	81 30       	cpi	r24, 0x01	; 1
    1cc4:	31 f4       	brne	.+12     	; 0x1cd2 <LCD_String_xy+0x26>
		LCD_vidSendCommand((pos & 0x0F)|0x80);				/* Command of first row and required position<16 */
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	8f 70       	andi	r24, 0x0F	; 15
    1cca:	80 68       	ori	r24, 0x80	; 128
    1ccc:	0e 94 2c 0c 	call	0x1858	; 0x1858 <LCD_vidSendCommand>
    1cd0:	08 c0       	rjmp	.+16     	; 0x1ce2 <LCD_String_xy+0x36>
	else if (row == 2)
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
    1cd4:	82 30       	cpi	r24, 0x02	; 2
    1cd6:	29 f4       	brne	.+10     	; 0x1ce2 <LCD_String_xy+0x36>
		LCD_vidSendCommand((pos & 0x0F)|0xC0);				/* Command of Second row and required position<16 */
    1cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cda:	8f 70       	andi	r24, 0x0F	; 15
    1cdc:	80 6c       	ori	r24, 0xC0	; 192
    1cde:	0e 94 2c 0c 	call	0x1858	; 0x1858 <LCD_vidSendCommand>
	LCD_String(str);								/* Call LCD string function */
    1ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce6:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <LCD_String>
}
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	cf 91       	pop	r28
    1cf4:	df 91       	pop	r29
    1cf6:	08 95       	ret

00001cf8 <LCD_String>:

void LCD_String (char *str)							/* Send string to LCD function */
{
    1cf8:	df 93       	push	r29
    1cfa:	cf 93       	push	r28
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <LCD_String+0x6>
    1cfe:	00 d0       	rcall	.+0      	; 0x1d00 <LCD_String+0x8>
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
    1d04:	9c 83       	std	Y+4, r25	; 0x04
    1d06:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
    1d08:	1a 82       	std	Y+2, r1	; 0x02
    1d0a:	19 82       	std	Y+1, r1	; 0x01
    1d0c:	0f c0       	rjmp	.+30     	; 0x1d2c <LCD_String+0x34>
	{
		LCD_vidWriteCharctr(str[i]);							/* Call LCD data write */
    1d0e:	29 81       	ldd	r18, Y+1	; 0x01
    1d10:	3a 81       	ldd	r19, Y+2	; 0x02
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	9c 81       	ldd	r25, Y+4	; 0x04
    1d16:	fc 01       	movw	r30, r24
    1d18:	e2 0f       	add	r30, r18
    1d1a:	f3 1f       	adc	r31, r19
    1d1c:	80 81       	ld	r24, Z
    1d1e:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <LCD_vidWriteCharctr>
}

void LCD_String (char *str)							/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	9a 81       	ldd	r25, Y+2	; 0x02
    1d26:	01 96       	adiw	r24, 0x01	; 1
    1d28:	9a 83       	std	Y+2, r25	; 0x02
    1d2a:	89 83       	std	Y+1, r24	; 0x01
    1d2c:	29 81       	ldd	r18, Y+1	; 0x01
    1d2e:	3a 81       	ldd	r19, Y+2	; 0x02
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
    1d32:	9c 81       	ldd	r25, Y+4	; 0x04
    1d34:	fc 01       	movw	r30, r24
    1d36:	e2 0f       	add	r30, r18
    1d38:	f3 1f       	adc	r31, r19
    1d3a:	80 81       	ld	r24, Z
    1d3c:	88 23       	and	r24, r24
    1d3e:	39 f7       	brne	.-50     	; 0x1d0e <LCD_String+0x16>
	{
		LCD_vidWriteCharctr(str[i]);							/* Call LCD data write */
	}
}
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	0f 90       	pop	r0
    1d48:	cf 91       	pop	r28
    1d4a:	df 91       	pop	r29
    1d4c:	08 95       	ret

00001d4e <LCD_vidWriteExtraChar>:
/* Description! Interface to write extra characters saved in the CGRAM                 */
/* Input      ! Y = Row position , X = Column position                                 */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_vidWriteExtraChar (u8 Y,u8 X,u8* ExtraChar,u8* Index)
{
    1d4e:	df 93       	push	r29
    1d50:	cf 93       	push	r28
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
    1d56:	66 97       	sbiw	r28, 0x16	; 22
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	de bf       	out	0x3e, r29	; 62
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	cd bf       	out	0x3d, r28	; 61
    1d62:	89 8b       	std	Y+17, r24	; 0x11
    1d64:	6a 8b       	std	Y+18, r22	; 0x12
    1d66:	5c 8b       	std	Y+20, r21	; 0x14
    1d68:	4b 8b       	std	Y+19, r20	; 0x13
    1d6a:	3e 8b       	std	Y+22, r19	; 0x16
    1d6c:	2d 8b       	std	Y+21, r18	; 0x15


    u8 iteration1,iteration2;

    /*DDRAM-->CGRAM*/
    LCD_vidSendCommand(64);
    1d6e:	80 e4       	ldi	r24, 0x40	; 64
    1d70:	0e 94 2c 0c 	call	0x1858	; 0x1858 <LCD_vidSendCommand>
	for(iteration1=0 ; iteration1<Index ; iteration1++)
    1d74:	18 8a       	std	Y+16, r1	; 0x10
    1d76:	0e c0       	rjmp	.+28     	; 0x1d94 <LCD_vidWriteExtraChar+0x46>
	{
		LCD_vidWriteCharctr(ExtraChar[iteration1]);
    1d78:	88 89       	ldd	r24, Y+16	; 0x10
    1d7a:	28 2f       	mov	r18, r24
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d80:	9c 89       	ldd	r25, Y+20	; 0x14
    1d82:	fc 01       	movw	r30, r24
    1d84:	e2 0f       	add	r30, r18
    1d86:	f3 1f       	adc	r31, r19
    1d88:	80 81       	ld	r24, Z
    1d8a:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <LCD_vidWriteCharctr>

    u8 iteration1,iteration2;

    /*DDRAM-->CGRAM*/
    LCD_vidSendCommand(64);
	for(iteration1=0 ; iteration1<Index ; iteration1++)
    1d8e:	88 89       	ldd	r24, Y+16	; 0x10
    1d90:	8f 5f       	subi	r24, 0xFF	; 255
    1d92:	88 8b       	std	Y+16, r24	; 0x10
    1d94:	88 89       	ldd	r24, Y+16	; 0x10
    1d96:	88 2f       	mov	r24, r24
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	9c 01       	movw	r18, r24
    1d9c:	8d 89       	ldd	r24, Y+21	; 0x15
    1d9e:	9e 89       	ldd	r25, Y+22	; 0x16
    1da0:	28 17       	cp	r18, r24
    1da2:	39 07       	cpc	r19, r25
    1da4:	48 f3       	brcs	.-46     	; 0x1d78 <LCD_vidWriteExtraChar+0x2a>
	{
		LCD_vidWriteCharctr(ExtraChar[iteration1]);
	}
	/*CGRAM-->DDRAM*/
	LCD_vidSendCommand(128);
    1da6:	80 e8       	ldi	r24, 0x80	; 128
    1da8:	0e 94 2c 0c 	call	0x1858	; 0x1858 <LCD_vidSendCommand>
	Gotoxy(Y,X);
    1dac:	89 89       	ldd	r24, Y+17	; 0x11
    1dae:	6a 89       	ldd	r22, Y+18	; 0x12
    1db0:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <Gotoxy>
	/*First eight character which saved at CGRAM*/
	for (iteration2=0; iteration2<=7 ; iteration2++)
    1db4:	1f 86       	std	Y+15, r1	; 0x0f
    1db6:	78 c0       	rjmp	.+240    	; 0x1ea8 <LCD_vidWriteExtraChar+0x15a>
	{
		/* Write bytes of DDRAM */
		LCD_vidWriteCharctr(iteration2);
    1db8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dba:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <LCD_vidWriteCharctr>
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	a0 ea       	ldi	r26, 0xA0	; 160
    1dc4:	b0 e4       	ldi	r27, 0x40	; 64
    1dc6:	8b 87       	std	Y+11, r24	; 0x0b
    1dc8:	9c 87       	std	Y+12, r25	; 0x0c
    1dca:	ad 87       	std	Y+13, r26	; 0x0d
    1dcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dce:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	4a ef       	ldi	r20, 0xFA	; 250
    1ddc:	54 e4       	ldi	r21, 0x44	; 68
    1dde:	0e 94 15 02 	call	0x42a	; 0x42a <__mulsf3>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	8f 83       	std	Y+7, r24	; 0x07
    1de8:	98 87       	std	Y+8, r25	; 0x08
    1dea:	a9 87       	std	Y+9, r26	; 0x09
    1dec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dee:	6f 81       	ldd	r22, Y+7	; 0x07
    1df0:	78 85       	ldd	r23, Y+8	; 0x08
    1df2:	89 85       	ldd	r24, Y+9	; 0x09
    1df4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	40 e8       	ldi	r20, 0x80	; 128
    1dfc:	5f e3       	ldi	r21, 0x3F	; 63
    1dfe:	0e 94 6f 03 	call	0x6de	; 0x6de <__ltsf2>
    1e02:	88 23       	and	r24, r24
    1e04:	2c f4       	brge	.+10     	; 0x1e10 <LCD_vidWriteExtraChar+0xc2>
		__ticks = 1;
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	9e 83       	std	Y+6, r25	; 0x06
    1e0c:	8d 83       	std	Y+5, r24	; 0x05
    1e0e:	3f c0       	rjmp	.+126    	; 0x1e8e <LCD_vidWriteExtraChar+0x140>
	else if (__tmp > 65535)
    1e10:	6f 81       	ldd	r22, Y+7	; 0x07
    1e12:	78 85       	ldd	r23, Y+8	; 0x08
    1e14:	89 85       	ldd	r24, Y+9	; 0x09
    1e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	3f ef       	ldi	r19, 0xFF	; 255
    1e1c:	4f e7       	ldi	r20, 0x7F	; 127
    1e1e:	57 e4       	ldi	r21, 0x47	; 71
    1e20:	0e 94 0f 03 	call	0x61e	; 0x61e <__gtsf2>
    1e24:	18 16       	cp	r1, r24
    1e26:	4c f5       	brge	.+82     	; 0x1e7a <LCD_vidWriteExtraChar+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	40 e2       	ldi	r20, 0x20	; 32
    1e36:	51 e4       	ldi	r21, 0x41	; 65
    1e38:	0e 94 15 02 	call	0x42a	; 0x42a <__mulsf3>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	bc 01       	movw	r22, r24
    1e42:	cd 01       	movw	r24, r26
    1e44:	0e 94 3f 00 	call	0x7e	; 0x7e <__fixunssfsi>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	9e 83       	std	Y+6, r25	; 0x06
    1e4e:	8d 83       	std	Y+5, r24	; 0x05
    1e50:	0f c0       	rjmp	.+30     	; 0x1e70 <LCD_vidWriteExtraChar+0x122>
    1e52:	88 ec       	ldi	r24, 0xC8	; 200
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	9c 83       	std	Y+4, r25	; 0x04
    1e58:	8b 83       	std	Y+3, r24	; 0x03
    1e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	f1 f7       	brne	.-4      	; 0x1e5e <LCD_vidWriteExtraChar+0x110>
    1e62:	9c 83       	std	Y+4, r25	; 0x04
    1e64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e66:	8d 81       	ldd	r24, Y+5	; 0x05
    1e68:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6a:	01 97       	sbiw	r24, 0x01	; 1
    1e6c:	9e 83       	std	Y+6, r25	; 0x06
    1e6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e70:	8d 81       	ldd	r24, Y+5	; 0x05
    1e72:	9e 81       	ldd	r25, Y+6	; 0x06
    1e74:	00 97       	sbiw	r24, 0x00	; 0
    1e76:	69 f7       	brne	.-38     	; 0x1e52 <LCD_vidWriteExtraChar+0x104>
    1e78:	14 c0       	rjmp	.+40     	; 0x1ea2 <LCD_vidWriteExtraChar+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e7c:	78 85       	ldd	r23, Y+8	; 0x08
    1e7e:	89 85       	ldd	r24, Y+9	; 0x09
    1e80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e82:	0e 94 3f 00 	call	0x7e	; 0x7e <__fixunssfsi>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	9e 83       	std	Y+6, r25	; 0x06
    1e8c:	8d 83       	std	Y+5, r24	; 0x05
    1e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e90:	9e 81       	ldd	r25, Y+6	; 0x06
    1e92:	9a 83       	std	Y+2, r25	; 0x02
    1e94:	89 83       	std	Y+1, r24	; 0x01
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	f1 f7       	brne	.-4      	; 0x1e9a <LCD_vidWriteExtraChar+0x14c>
    1e9e:	9a 83       	std	Y+2, r25	; 0x02
    1ea0:	89 83       	std	Y+1, r24	; 0x01
	}
	/*CGRAM-->DDRAM*/
	LCD_vidSendCommand(128);
	Gotoxy(Y,X);
	/*First eight character which saved at CGRAM*/
	for (iteration2=0; iteration2<=7 ; iteration2++)
    1ea2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ea4:	8f 5f       	subi	r24, 0xFF	; 255
    1ea6:	8f 87       	std	Y+15, r24	; 0x0f
    1ea8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eaa:	88 30       	cpi	r24, 0x08	; 8
    1eac:	08 f4       	brcc	.+2      	; 0x1eb0 <LCD_vidWriteExtraChar+0x162>
    1eae:	84 cf       	rjmp	.-248    	; 0x1db8 <LCD_vidWriteExtraChar+0x6a>
		/* Write bytes of DDRAM */
		LCD_vidWriteCharctr(iteration2);

		_delay_ms(5);
	}
}
    1eb0:	66 96       	adiw	r28, 0x16	; 22
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	f8 94       	cli
    1eb6:	de bf       	out	0x3e, r29	; 62
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	cd bf       	out	0x3d, r28	; 61
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	08 95       	ret

00001ec2 <Gotoxy>:

void Gotoxy (u8 Y,u8 X)
{
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	00 d0       	rcall	.+0      	; 0x1ec8 <Gotoxy+0x6>
    1ec8:	00 d0       	rcall	.+0      	; 0x1eca <Gotoxy+0x8>
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
    1ece:	89 83       	std	Y+1, r24	; 0x01
    1ed0:	6a 83       	std	Y+2, r22	; 0x02
	if (X>0 && X<=16)
    1ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed4:	88 23       	and	r24, r24
    1ed6:	e1 f0       	breq	.+56     	; 0x1f10 <Gotoxy+0x4e>
    1ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eda:	81 31       	cpi	r24, 0x11	; 17
    1edc:	c8 f4       	brcc	.+50     	; 0x1f10 <Gotoxy+0x4e>
	{
	    switch(Y)
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	28 2f       	mov	r18, r24
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	3c 83       	std	Y+4, r19	; 0x04
    1ee6:	2b 83       	std	Y+3, r18	; 0x03
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	9c 81       	ldd	r25, Y+4	; 0x04
    1eec:	81 30       	cpi	r24, 0x01	; 1
    1eee:	91 05       	cpc	r25, r1
    1ef0:	31 f0       	breq	.+12     	; 0x1efe <Gotoxy+0x3c>
    1ef2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ef4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ef6:	22 30       	cpi	r18, 0x02	; 2
    1ef8:	31 05       	cpc	r19, r1
    1efa:	31 f0       	breq	.+12     	; 0x1f08 <Gotoxy+0x46>
    1efc:	09 c0       	rjmp	.+18     	; 0x1f10 <Gotoxy+0x4e>
	    {
		    case 1:
		    	LCD_vidSendCommand(X+127);
    1efe:	8a 81       	ldd	r24, Y+2	; 0x02
    1f00:	81 58       	subi	r24, 0x81	; 129
    1f02:	0e 94 2c 0c 	call	0x1858	; 0x1858 <LCD_vidSendCommand>
    1f06:	04 c0       	rjmp	.+8      	; 0x1f10 <Gotoxy+0x4e>
		    break;
		    case 2:
		    	LCD_vidSendCommand(X+191);
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	81 54       	subi	r24, 0x41	; 65
    1f0c:	0e 94 2c 0c 	call	0x1858	; 0x1858 <LCD_vidSendCommand>
		    break;
		    default:
		    break;
	    }
	}
}
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	0f 90       	pop	r0
    1f18:	cf 91       	pop	r28
    1f1a:	df 91       	pop	r29
    1f1c:	08 95       	ret

00001f1e <LCD_WriteNumber>:

void LCD_WriteNumber (u32 x)
{
    1f1e:	0f 93       	push	r16
    1f20:	1f 93       	push	r17
    1f22:	df 93       	push	r29
    1f24:	cf 93       	push	r28
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
    1f2a:	a2 97       	sbiw	r28, 0x22	; 34
    1f2c:	0f b6       	in	r0, 0x3f	; 63
    1f2e:	f8 94       	cli
    1f30:	de bf       	out	0x3e, r29	; 62
    1f32:	0f be       	out	0x3f, r0	; 63
    1f34:	cd bf       	out	0x3d, r28	; 61
    1f36:	6c 8b       	std	Y+20, r22	; 0x14
    1f38:	7d 8b       	std	Y+21, r23	; 0x15
    1f3a:	8e 8b       	std	Y+22, r24	; 0x16
    1f3c:	9f 8b       	std	Y+23, r25	; 0x17
	}
	for (s8 j=counter-1;j>=0;j--)
	{
		LCD_String(sumbol[arr[j]]);
	}
}
    1f3e:	2d b7       	in	r18, 0x3d	; 61
    1f40:	3e b7       	in	r19, 0x3e	; 62
    1f42:	3a a3       	std	Y+34, r19	; 0x22
    1f44:	29 a3       	std	Y+33, r18	; 0x21
	    }
	}
}

void LCD_WriteNumber (u32 x)
{
    1f46:	8d b7       	in	r24, 0x3d	; 61
    1f48:	9e b7       	in	r25, 0x3e	; 62
    1f4a:	99 8f       	std	Y+25, r25	; 0x19
    1f4c:	88 8f       	std	Y+24, r24	; 0x18
	u32 y=x;
    1f4e:	8c 89       	ldd	r24, Y+20	; 0x14
    1f50:	9d 89       	ldd	r25, Y+21	; 0x15
    1f52:	ae 89       	ldd	r26, Y+22	; 0x16
    1f54:	bf 89       	ldd	r27, Y+23	; 0x17
    1f56:	8c 83       	std	Y+4, r24	; 0x04
    1f58:	9d 83       	std	Y+5, r25	; 0x05
    1f5a:	ae 83       	std	Y+6, r26	; 0x06
    1f5c:	bf 83       	std	Y+7, r27	; 0x07
	u8 counter=0;
    1f5e:	1b 82       	std	Y+3, r1	; 0x03
	u8 sumbol[]={'0','1','2','3','4','5','6','7','8','9'};
    1f60:	ce 01       	movw	r24, r28
    1f62:	0a 96       	adiw	r24, 0x0a	; 10
    1f64:	9d 8f       	std	Y+29, r25	; 0x1d
    1f66:	8c 8f       	std	Y+28, r24	; 0x1c
    1f68:	e8 e6       	ldi	r30, 0x68	; 104
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	ff 8f       	std	Y+31, r31	; 0x1f
    1f6e:	ee 8f       	std	Y+30, r30	; 0x1e
    1f70:	fa e0       	ldi	r31, 0x0A	; 10
    1f72:	f8 a3       	std	Y+32, r31	; 0x20
    1f74:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1f76:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1f78:	00 80       	ld	r0, Z
    1f7a:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1f7c:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1f7e:	2f 5f       	subi	r18, 0xFF	; 255
    1f80:	3f 4f       	sbci	r19, 0xFF	; 255
    1f82:	3f 8f       	std	Y+31, r19	; 0x1f
    1f84:	2e 8f       	std	Y+30, r18	; 0x1e
    1f86:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1f88:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1f8a:	00 82       	st	Z, r0
    1f8c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1f8e:	3d 8d       	ldd	r19, Y+29	; 0x1d
    1f90:	2f 5f       	subi	r18, 0xFF	; 255
    1f92:	3f 4f       	sbci	r19, 0xFF	; 255
    1f94:	3d 8f       	std	Y+29, r19	; 0x1d
    1f96:	2c 8f       	std	Y+28, r18	; 0x1c
    1f98:	38 a1       	ldd	r19, Y+32	; 0x20
    1f9a:	31 50       	subi	r19, 0x01	; 1
    1f9c:	38 a3       	std	Y+32, r19	; 0x20
    1f9e:	88 a1       	ldd	r24, Y+32	; 0x20
    1fa0:	88 23       	and	r24, r24
    1fa2:	41 f7       	brne	.-48     	; 0x1f74 <LCD_WriteNumber+0x56>
    1fa4:	15 c0       	rjmp	.+42     	; 0x1fd0 <LCD_WriteNumber+0xb2>
	while(y!=0)
	{
		counter++;
    1fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa8:	8f 5f       	subi	r24, 0xFF	; 255
    1faa:	8b 83       	std	Y+3, r24	; 0x03
		y=y/10;
    1fac:	8c 81       	ldd	r24, Y+4	; 0x04
    1fae:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb0:	ae 81       	ldd	r26, Y+6	; 0x06
    1fb2:	bf 81       	ldd	r27, Y+7	; 0x07
    1fb4:	2a e0       	ldi	r18, 0x0A	; 10
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	40 e0       	ldi	r20, 0x00	; 0
    1fba:	50 e0       	ldi	r21, 0x00	; 0
    1fbc:	bc 01       	movw	r22, r24
    1fbe:	cd 01       	movw	r24, r26
    1fc0:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__udivmodsi4>
    1fc4:	da 01       	movw	r26, r20
    1fc6:	c9 01       	movw	r24, r18
    1fc8:	8c 83       	std	Y+4, r24	; 0x04
    1fca:	9d 83       	std	Y+5, r25	; 0x05
    1fcc:	ae 83       	std	Y+6, r26	; 0x06
    1fce:	bf 83       	std	Y+7, r27	; 0x07
void LCD_WriteNumber (u32 x)
{
	u32 y=x;
	u8 counter=0;
	u8 sumbol[]={'0','1','2','3','4','5','6','7','8','9'};
	while(y!=0)
    1fd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd4:	ae 81       	ldd	r26, Y+6	; 0x06
    1fd6:	bf 81       	ldd	r27, Y+7	; 0x07
    1fd8:	00 97       	sbiw	r24, 0x00	; 0
    1fda:	a1 05       	cpc	r26, r1
    1fdc:	b1 05       	cpc	r27, r1
    1fde:	19 f7       	brne	.-58     	; 0x1fa6 <LCD_WriteNumber+0x88>
	{
		counter++;
		y=y/10;
	}
	u8 arr[counter];
    1fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe2:	88 2f       	mov	r24, r24
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	ed b7       	in	r30, 0x3d	; 61
    1fe8:	fe b7       	in	r31, 0x3e	; 62
    1fea:	e8 1b       	sub	r30, r24
    1fec:	f9 0b       	sbc	r31, r25
    1fee:	0f b6       	in	r0, 0x3f	; 63
    1ff0:	f8 94       	cli
    1ff2:	fe bf       	out	0x3e, r31	; 62
    1ff4:	0f be       	out	0x3f, r0	; 63
    1ff6:	ed bf       	out	0x3d, r30	; 61
    1ff8:	2d b7       	in	r18, 0x3d	; 61
    1ffa:	3e b7       	in	r19, 0x3e	; 62
    1ffc:	2f 5f       	subi	r18, 0xFF	; 255
    1ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    2000:	3b 8f       	std	Y+27, r19	; 0x1b
    2002:	2a 8f       	std	Y+26, r18	; 0x1a
    2004:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2006:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2008:	00 96       	adiw	r24, 0x00	; 0
    200a:	9b 8f       	std	Y+27, r25	; 0x1b
    200c:	8a 8f       	std	Y+26, r24	; 0x1a
    200e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2010:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2012:	99 87       	std	Y+9, r25	; 0x09
    2014:	88 87       	std	Y+8, r24	; 0x08
	for(u8 i=0;i<counter;i++)
    2016:	1a 82       	std	Y+2, r1	; 0x02
    2018:	2d c0       	rjmp	.+90     	; 0x2074 <LCD_WriteNumber+0x156>
	{
		arr[i]=x%10;
    201a:	8a 81       	ldd	r24, Y+2	; 0x02
    201c:	08 2f       	mov	r16, r24
    201e:	10 e0       	ldi	r17, 0x00	; 0
    2020:	8c 89       	ldd	r24, Y+20	; 0x14
    2022:	9d 89       	ldd	r25, Y+21	; 0x15
    2024:	ae 89       	ldd	r26, Y+22	; 0x16
    2026:	bf 89       	ldd	r27, Y+23	; 0x17
    2028:	2a e0       	ldi	r18, 0x0A	; 10
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e0       	ldi	r20, 0x00	; 0
    202e:	50 e0       	ldi	r21, 0x00	; 0
    2030:	bc 01       	movw	r22, r24
    2032:	cd 01       	movw	r24, r26
    2034:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__udivmodsi4>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	28 2f       	mov	r18, r24
    203e:	88 85       	ldd	r24, Y+8	; 0x08
    2040:	99 85       	ldd	r25, Y+9	; 0x09
    2042:	fc 01       	movw	r30, r24
    2044:	e0 0f       	add	r30, r16
    2046:	f1 1f       	adc	r31, r17
    2048:	20 83       	st	Z, r18
		x=x/10;
    204a:	8c 89       	ldd	r24, Y+20	; 0x14
    204c:	9d 89       	ldd	r25, Y+21	; 0x15
    204e:	ae 89       	ldd	r26, Y+22	; 0x16
    2050:	bf 89       	ldd	r27, Y+23	; 0x17
    2052:	2a e0       	ldi	r18, 0x0A	; 10
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	40 e0       	ldi	r20, 0x00	; 0
    2058:	50 e0       	ldi	r21, 0x00	; 0
    205a:	bc 01       	movw	r22, r24
    205c:	cd 01       	movw	r24, r26
    205e:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__udivmodsi4>
    2062:	da 01       	movw	r26, r20
    2064:	c9 01       	movw	r24, r18
    2066:	8c 8b       	std	Y+20, r24	; 0x14
    2068:	9d 8b       	std	Y+21, r25	; 0x15
    206a:	ae 8b       	std	Y+22, r26	; 0x16
    206c:	bf 8b       	std	Y+23, r27	; 0x17
	{
		counter++;
		y=y/10;
	}
	u8 arr[counter];
	for(u8 i=0;i<counter;i++)
    206e:	8a 81       	ldd	r24, Y+2	; 0x02
    2070:	8f 5f       	subi	r24, 0xFF	; 255
    2072:	8a 83       	std	Y+2, r24	; 0x02
    2074:	9a 81       	ldd	r25, Y+2	; 0x02
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	98 17       	cp	r25, r24
    207a:	78 f2       	brcs	.-98     	; 0x201a <LCD_WriteNumber+0xfc>
	{
		arr[i]=x%10;
		x=x/10;
	}
	for (s8 j=counter-1;j>=0;j--)
    207c:	8b 81       	ldd	r24, Y+3	; 0x03
    207e:	81 50       	subi	r24, 0x01	; 1
    2080:	89 83       	std	Y+1, r24	; 0x01
    2082:	1a c0       	rjmp	.+52     	; 0x20b8 <LCD_WriteNumber+0x19a>
	{
		LCD_String(sumbol[arr[j]]);
    2084:	89 81       	ldd	r24, Y+1	; 0x01
    2086:	28 2f       	mov	r18, r24
    2088:	33 27       	eor	r19, r19
    208a:	27 fd       	sbrc	r18, 7
    208c:	30 95       	com	r19
    208e:	88 85       	ldd	r24, Y+8	; 0x08
    2090:	99 85       	ldd	r25, Y+9	; 0x09
    2092:	fc 01       	movw	r30, r24
    2094:	e2 0f       	add	r30, r18
    2096:	f3 1f       	adc	r31, r19
    2098:	80 81       	ld	r24, Z
    209a:	28 2f       	mov	r18, r24
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	ce 01       	movw	r24, r28
    20a0:	0a 96       	adiw	r24, 0x0a	; 10
    20a2:	fc 01       	movw	r30, r24
    20a4:	e2 0f       	add	r30, r18
    20a6:	f3 1f       	adc	r31, r19
    20a8:	80 81       	ld	r24, Z
    20aa:	88 2f       	mov	r24, r24
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <LCD_String>
	for(u8 i=0;i<counter;i++)
	{
		arr[i]=x%10;
		x=x/10;
	}
	for (s8 j=counter-1;j>=0;j--)
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	81 50       	subi	r24, 0x01	; 1
    20b6:	89 83       	std	Y+1, r24	; 0x01
    20b8:	89 81       	ldd	r24, Y+1	; 0x01
    20ba:	88 23       	and	r24, r24
    20bc:	1c f7       	brge	.-58     	; 0x2084 <LCD_WriteNumber+0x166>
    20be:	e8 8d       	ldd	r30, Y+24	; 0x18
    20c0:	f9 8d       	ldd	r31, Y+25	; 0x19
    20c2:	0f b6       	in	r0, 0x3f	; 63
    20c4:	f8 94       	cli
    20c6:	fe bf       	out	0x3e, r31	; 62
    20c8:	0f be       	out	0x3f, r0	; 63
    20ca:	ed bf       	out	0x3d, r30	; 61
	{
		LCD_String(sumbol[arr[j]]);
	}
}
    20cc:	29 a1       	ldd	r18, Y+33	; 0x21
    20ce:	3a a1       	ldd	r19, Y+34	; 0x22
    20d0:	0f b6       	in	r0, 0x3f	; 63
    20d2:	f8 94       	cli
    20d4:	3e bf       	out	0x3e, r19	; 62
    20d6:	0f be       	out	0x3f, r0	; 63
    20d8:	2d bf       	out	0x3d, r18	; 61
    20da:	a2 96       	adiw	r28, 0x22	; 34
    20dc:	0f b6       	in	r0, 0x3f	; 63
    20de:	f8 94       	cli
    20e0:	de bf       	out	0x3e, r29	; 62
    20e2:	0f be       	out	0x3f, r0	; 63
    20e4:	cd bf       	out	0x3d, r28	; 61
    20e6:	cf 91       	pop	r28
    20e8:	df 91       	pop	r29
    20ea:	1f 91       	pop	r17
    20ec:	0f 91       	pop	r16
    20ee:	08 95       	ret

000020f0 <main>:
#include "LCD_Interface.h"



int main(void)
{
    20f0:	df 93       	push	r29
    20f2:	cf 93       	push	r28
    20f4:	00 d0       	rcall	.+0      	; 0x20f6 <main+0x6>
    20f6:	cd b7       	in	r28, 0x3d	; 61
    20f8:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPortDirection(PORTD,HIGH);
    20fa:	83 e0       	ldi	r24, 0x03	; 3
    20fc:	61 e0       	ldi	r22, 0x01	; 1
    20fe:	0e 94 82 08 	call	0x1104	; 0x1104 <DIO_SetPortDirection>
	DIO_SetPinDirection(PORTC,PIN0,HIGH);
    2102:	82 e0       	ldi	r24, 0x02	; 2
    2104:	60 e0       	ldi	r22, 0x00	; 0
    2106:	41 e0       	ldi	r20, 0x01	; 1
    2108:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTC,PIN1,HIGH);
    210c:	82 e0       	ldi	r24, 0x02	; 2
    210e:	61 e0       	ldi	r22, 0x01	; 1
    2110:	41 e0       	ldi	r20, 0x01	; 1
    2112:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTC,PIN2,HIGH);
    2116:	82 e0       	ldi	r24, 0x02	; 2
    2118:	62 e0       	ldi	r22, 0x02	; 2
    211a:	41 e0       	ldi	r20, 0x01	; 1
    211c:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinDirection>
	DIO_SetPortDirection(PORTA,LOW);
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	60 e0       	ldi	r22, 0x00	; 0
    2124:	0e 94 82 08 	call	0x1104	; 0x1104 <DIO_SetPortDirection>
	DIO_SetPinDirection(PORTB,PIN3,HIGH);
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	63 e0       	ldi	r22, 0x03	; 3
    212c:	41 e0       	ldi	r20, 0x01	; 1
    212e:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_SetPinDirection>
	TCCR0=0b01101001;
    2132:	e3 e5       	ldi	r30, 0x53	; 83
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	89 e6       	ldi	r24, 0x69	; 105
    2138:	80 83       	st	Z, r24
	TIMSK=0b00000010;
    213a:	e9 e5       	ldi	r30, 0x59	; 89
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	82 e0       	ldi	r24, 0x02	; 2
    2140:	80 83       	st	Z, r24
	ADC_Init();
    2142:	0e 94 99 05 	call	0xb32	; 0xb32 <ADC_Init>
	LCD_vidInit();
    2146:	0e 94 04 09 	call	0x1208	; 0x1208 <LCD_vidInit>


	while(1)
	{
		u8 val = ADC_Read(0);
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	0e 94 c3 05 	call	0xb86	; 0xb86 <ADC_Read>
    2150:	8a 83       	std	Y+2, r24	; 0x02

		u8 ADCe = (val * 9)/250;
    2152:	8a 81       	ldd	r24, Y+2	; 0x02
    2154:	28 2f       	mov	r18, r24
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	c9 01       	movw	r24, r18
    215a:	88 0f       	add	r24, r24
    215c:	99 1f       	adc	r25, r25
    215e:	88 0f       	add	r24, r24
    2160:	99 1f       	adc	r25, r25
    2162:	88 0f       	add	r24, r24
    2164:	99 1f       	adc	r25, r25
    2166:	82 0f       	add	r24, r18
    2168:	93 1f       	adc	r25, r19
    216a:	2a ef       	ldi	r18, 0xFA	; 250
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	b9 01       	movw	r22, r18
    2170:	0e 94 db 10 	call	0x21b6	; 0x21b6 <__divmodhi4>
    2174:	cb 01       	movw	r24, r22
    2176:	89 83       	std	Y+1, r24	; 0x01

		LCD_vidWriteCharctr(48+ADCe);
    2178:	89 81       	ldd	r24, Y+1	; 0x01
    217a:	80 5d       	subi	r24, 0xD0	; 208
    217c:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <LCD_vidWriteCharctr>

		LCD_vidSendCommand(0x01);
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	0e 94 2c 0c 	call	0x1858	; 0x1858 <LCD_vidSendCommand>

		if(ADCe==0)
    2186:	89 81       	ldd	r24, Y+1	; 0x01
    2188:	88 23       	and	r24, r24
    218a:	29 f4       	brne	.+10     	; 0x2196 <main+0xa6>
		{
			OCR0=64;//duty cycle
    218c:	ec e5       	ldi	r30, 0x5C	; 92
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	80 e4       	ldi	r24, 0x40	; 64
    2192:	80 83       	st	Z, r24
    2194:	da cf       	rjmp	.-76     	; 0x214a <main+0x5a>
		}
		else if(ADCe==1)
    2196:	89 81       	ldd	r24, Y+1	; 0x01
    2198:	81 30       	cpi	r24, 0x01	; 1
    219a:	29 f4       	brne	.+10     	; 0x21a6 <main+0xb6>
		{
			OCR0=128;
    219c:	ec e5       	ldi	r30, 0x5C	; 92
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 e8       	ldi	r24, 0x80	; 128
    21a2:	80 83       	st	Z, r24
    21a4:	d2 cf       	rjmp	.-92     	; 0x214a <main+0x5a>
		}
		else if(ADCe==2)
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	82 30       	cpi	r24, 0x02	; 2
    21aa:	79 f6       	brne	.-98     	; 0x214a <main+0x5a>
		{
			OCR0=200;
    21ac:	ec e5       	ldi	r30, 0x5C	; 92
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	88 ec       	ldi	r24, 0xC8	; 200
    21b2:	80 83       	st	Z, r24
    21b4:	ca cf       	rjmp	.-108    	; 0x214a <main+0x5a>

000021b6 <__divmodhi4>:
    21b6:	97 fb       	bst	r25, 7
    21b8:	09 2e       	mov	r0, r25
    21ba:	07 26       	eor	r0, r23
    21bc:	0a d0       	rcall	.+20     	; 0x21d2 <__divmodhi4_neg1>
    21be:	77 fd       	sbrc	r23, 7
    21c0:	04 d0       	rcall	.+8      	; 0x21ca <__divmodhi4_neg2>
    21c2:	2e d0       	rcall	.+92     	; 0x2220 <__udivmodhi4>
    21c4:	06 d0       	rcall	.+12     	; 0x21d2 <__divmodhi4_neg1>
    21c6:	00 20       	and	r0, r0
    21c8:	1a f4       	brpl	.+6      	; 0x21d0 <__divmodhi4_exit>

000021ca <__divmodhi4_neg2>:
    21ca:	70 95       	com	r23
    21cc:	61 95       	neg	r22
    21ce:	7f 4f       	sbci	r23, 0xFF	; 255

000021d0 <__divmodhi4_exit>:
    21d0:	08 95       	ret

000021d2 <__divmodhi4_neg1>:
    21d2:	f6 f7       	brtc	.-4      	; 0x21d0 <__divmodhi4_exit>
    21d4:	90 95       	com	r25
    21d6:	81 95       	neg	r24
    21d8:	9f 4f       	sbci	r25, 0xFF	; 255
    21da:	08 95       	ret

000021dc <__udivmodsi4>:
    21dc:	a1 e2       	ldi	r26, 0x21	; 33
    21de:	1a 2e       	mov	r1, r26
    21e0:	aa 1b       	sub	r26, r26
    21e2:	bb 1b       	sub	r27, r27
    21e4:	fd 01       	movw	r30, r26
    21e6:	0d c0       	rjmp	.+26     	; 0x2202 <__udivmodsi4_ep>

000021e8 <__udivmodsi4_loop>:
    21e8:	aa 1f       	adc	r26, r26
    21ea:	bb 1f       	adc	r27, r27
    21ec:	ee 1f       	adc	r30, r30
    21ee:	ff 1f       	adc	r31, r31
    21f0:	a2 17       	cp	r26, r18
    21f2:	b3 07       	cpc	r27, r19
    21f4:	e4 07       	cpc	r30, r20
    21f6:	f5 07       	cpc	r31, r21
    21f8:	20 f0       	brcs	.+8      	; 0x2202 <__udivmodsi4_ep>
    21fa:	a2 1b       	sub	r26, r18
    21fc:	b3 0b       	sbc	r27, r19
    21fe:	e4 0b       	sbc	r30, r20
    2200:	f5 0b       	sbc	r31, r21

00002202 <__udivmodsi4_ep>:
    2202:	66 1f       	adc	r22, r22
    2204:	77 1f       	adc	r23, r23
    2206:	88 1f       	adc	r24, r24
    2208:	99 1f       	adc	r25, r25
    220a:	1a 94       	dec	r1
    220c:	69 f7       	brne	.-38     	; 0x21e8 <__udivmodsi4_loop>
    220e:	60 95       	com	r22
    2210:	70 95       	com	r23
    2212:	80 95       	com	r24
    2214:	90 95       	com	r25
    2216:	9b 01       	movw	r18, r22
    2218:	ac 01       	movw	r20, r24
    221a:	bd 01       	movw	r22, r26
    221c:	cf 01       	movw	r24, r30
    221e:	08 95       	ret

00002220 <__udivmodhi4>:
    2220:	aa 1b       	sub	r26, r26
    2222:	bb 1b       	sub	r27, r27
    2224:	51 e1       	ldi	r21, 0x11	; 17
    2226:	07 c0       	rjmp	.+14     	; 0x2236 <__udivmodhi4_ep>

00002228 <__udivmodhi4_loop>:
    2228:	aa 1f       	adc	r26, r26
    222a:	bb 1f       	adc	r27, r27
    222c:	a6 17       	cp	r26, r22
    222e:	b7 07       	cpc	r27, r23
    2230:	10 f0       	brcs	.+4      	; 0x2236 <__udivmodhi4_ep>
    2232:	a6 1b       	sub	r26, r22
    2234:	b7 0b       	sbc	r27, r23

00002236 <__udivmodhi4_ep>:
    2236:	88 1f       	adc	r24, r24
    2238:	99 1f       	adc	r25, r25
    223a:	5a 95       	dec	r21
    223c:	a9 f7       	brne	.-22     	; 0x2228 <__udivmodhi4_loop>
    223e:	80 95       	com	r24
    2240:	90 95       	com	r25
    2242:	bc 01       	movw	r22, r24
    2244:	cd 01       	movw	r24, r26
    2246:	08 95       	ret

00002248 <__prologue_saves__>:
    2248:	2f 92       	push	r2
    224a:	3f 92       	push	r3
    224c:	4f 92       	push	r4
    224e:	5f 92       	push	r5
    2250:	6f 92       	push	r6
    2252:	7f 92       	push	r7
    2254:	8f 92       	push	r8
    2256:	9f 92       	push	r9
    2258:	af 92       	push	r10
    225a:	bf 92       	push	r11
    225c:	cf 92       	push	r12
    225e:	df 92       	push	r13
    2260:	ef 92       	push	r14
    2262:	ff 92       	push	r15
    2264:	0f 93       	push	r16
    2266:	1f 93       	push	r17
    2268:	cf 93       	push	r28
    226a:	df 93       	push	r29
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
    2270:	ca 1b       	sub	r28, r26
    2272:	db 0b       	sbc	r29, r27
    2274:	0f b6       	in	r0, 0x3f	; 63
    2276:	f8 94       	cli
    2278:	de bf       	out	0x3e, r29	; 62
    227a:	0f be       	out	0x3f, r0	; 63
    227c:	cd bf       	out	0x3d, r28	; 61
    227e:	09 94       	ijmp

00002280 <__epilogue_restores__>:
    2280:	2a 88       	ldd	r2, Y+18	; 0x12
    2282:	39 88       	ldd	r3, Y+17	; 0x11
    2284:	48 88       	ldd	r4, Y+16	; 0x10
    2286:	5f 84       	ldd	r5, Y+15	; 0x0f
    2288:	6e 84       	ldd	r6, Y+14	; 0x0e
    228a:	7d 84       	ldd	r7, Y+13	; 0x0d
    228c:	8c 84       	ldd	r8, Y+12	; 0x0c
    228e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2290:	aa 84       	ldd	r10, Y+10	; 0x0a
    2292:	b9 84       	ldd	r11, Y+9	; 0x09
    2294:	c8 84       	ldd	r12, Y+8	; 0x08
    2296:	df 80       	ldd	r13, Y+7	; 0x07
    2298:	ee 80       	ldd	r14, Y+6	; 0x06
    229a:	fd 80       	ldd	r15, Y+5	; 0x05
    229c:	0c 81       	ldd	r16, Y+4	; 0x04
    229e:	1b 81       	ldd	r17, Y+3	; 0x03
    22a0:	aa 81       	ldd	r26, Y+2	; 0x02
    22a2:	b9 81       	ldd	r27, Y+1	; 0x01
    22a4:	ce 0f       	add	r28, r30
    22a6:	d1 1d       	adc	r29, r1
    22a8:	0f b6       	in	r0, 0x3f	; 63
    22aa:	f8 94       	cli
    22ac:	de bf       	out	0x3e, r29	; 62
    22ae:	0f be       	out	0x3f, r0	; 63
    22b0:	cd bf       	out	0x3d, r28	; 61
    22b2:	ed 01       	movw	r28, r26
    22b4:	08 95       	ret

000022b6 <_exit>:
    22b6:	f8 94       	cli

000022b8 <__stop_program>:
    22b8:	ff cf       	rjmp	.-2      	; 0x22b8 <__stop_program>
