
LDR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000810  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000a50  00000000  00000000  00000864  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000088c  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a1 03 	call	0x742	; 0x742 <main>
  64:	0c 94 06 04 	jmp	0x80c	; 0x80c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_Init>:

#include "ADC.h"
#include <avr/io.h>

extern void ADC_Init(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	// Enable ADC On AVR
		SET_BIT(ADCSRA_Reg,7);
  74:	a6 e2       	ldi	r26, 0x26	; 38
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e6 e2       	ldi	r30, 0x26	; 38
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	80 68       	ori	r24, 0x80	; 128
  80:	8c 93       	st	X, r24

	// Select Conversion Speed
		SET_BIT(ADCSRA_Reg,0);
  82:	a6 e2       	ldi	r26, 0x26	; 38
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e6 e2       	ldi	r30, 0x26	; 38
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	81 60       	ori	r24, 0x01	; 1
  8e:	8c 93       	st	X, r24
		SET_BIT(ADCSRA_Reg,1);
  90:	a6 e2       	ldi	r26, 0x26	; 38
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e6 e2       	ldi	r30, 0x26	; 38
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	82 60       	ori	r24, 0x02	; 2
  9c:	8c 93       	st	X, r24
		SET_BIT(ADCSRA_Reg,2);
  9e:	a6 e2       	ldi	r26, 0x26	; 38
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	e6 e2       	ldi	r30, 0x26	; 38
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	8c 93       	st	X, r24


	// ADC Data Rgith Adjustment
		SET_BIT(ADMUX_Reg,5);
  ac:	a7 e2       	ldi	r26, 0x27	; 39
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	e7 e2       	ldi	r30, 0x27	; 39
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	8c 93       	st	X, r24
}
  ba:	cf 91       	pop	r28
  bc:	df 91       	pop	r29
  be:	08 95       	ret

000000c0 <ADC_Read>:

u8 ADC_Read (u8 channel)
{
  c0:	df 93       	push	r29
  c2:	cf 93       	push	r28
  c4:	0f 92       	push	r0
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
  ca:	89 83       	std	Y+1, r24	; 0x01
	// Select Voltage Reference
	// Select ADC Channel
	ADMUX_Reg = 0x40 | (channel & 0b00000111);
  cc:	e7 e2       	ldi	r30, 0x27	; 39
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	87 70       	andi	r24, 0x07	; 7
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	80 83       	st	Z, r24

	// Start ADC Conversion
	SET_BIT(ADCSRA_Reg,6);
  d8:	a6 e2       	ldi	r26, 0x26	; 38
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	e6 e2       	ldi	r30, 0x26	; 38
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	8c 93       	st	X, r24

	//Wait for the conversion
	while(!(ADCSRA_Reg & (1<<4)));
  e6:	e6 e2       	ldi	r30, 0x26	; 38
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	88 2f       	mov	r24, r24
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	80 71       	andi	r24, 0x10	; 16
  f2:	90 70       	andi	r25, 0x00	; 0
  f4:	00 97       	sbiw	r24, 0x00	; 0
  f6:	b9 f3       	breq	.-18     	; 0xe6 <ADC_Read+0x26>


	SET_BIT(ADCSRA_Reg,4);
  f8:	a6 e2       	ldi	r26, 0x26	; 38
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	e6 e2       	ldi	r30, 0x26	; 38
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	80 61       	ori	r24, 0x10	; 16
 104:	8c 93       	st	X, r24

	return ADC;
 106:	e4 e2       	ldi	r30, 0x24	; 36
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	91 81       	ldd	r25, Z+1	; 0x01

}
 10e:	0f 90       	pop	r0
 110:	cf 91       	pop	r28
 112:	df 91       	pop	r29
 114:	08 95       	ret

00000116 <DIO_SetPinValue>:
#include "DIO_int.h"
#include "DIO_reg.h"

/* IO Pins */
void DIO_SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy)
{
 116:	df 93       	push	r29
 118:	cf 93       	push	r28
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
 11e:	27 97       	sbiw	r28, 0x07	; 7
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	f8 94       	cli
 124:	de bf       	out	0x3e, r29	; 62
 126:	0f be       	out	0x3f, r0	; 63
 128:	cd bf       	out	0x3d, r28	; 61
 12a:	89 83       	std	Y+1, r24	; 0x01
 12c:	6a 83       	std	Y+2, r22	; 0x02
 12e:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
 130:	89 81       	ldd	r24, Y+1	; 0x01
 132:	84 30       	cpi	r24, 0x04	; 4
 134:	08 f0       	brcs	.+2      	; 0x138 <DIO_SetPinValue+0x22>
 136:	ee c0       	rjmp	.+476    	; 0x314 <DIO_SetPinValue+0x1fe>
 138:	8a 81       	ldd	r24, Y+2	; 0x02
 13a:	88 30       	cpi	r24, 0x08	; 8
 13c:	08 f0       	brcs	.+2      	; 0x140 <DIO_SetPinValue+0x2a>
 13e:	ea c0       	rjmp	.+468    	; 0x314 <DIO_SetPinValue+0x1fe>
	{
		if (u8PinValCopy == HIGH)
 140:	8b 81       	ldd	r24, Y+3	; 0x03
 142:	81 30       	cpi	r24, 0x01	; 1
 144:	09 f0       	breq	.+2      	; 0x148 <DIO_SetPinValue+0x32>
 146:	6f c0       	rjmp	.+222    	; 0x226 <DIO_SetPinValue+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
 148:	89 81       	ldd	r24, Y+1	; 0x01
 14a:	28 2f       	mov	r18, r24
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	3f 83       	std	Y+7, r19	; 0x07
 150:	2e 83       	std	Y+6, r18	; 0x06
 152:	8e 81       	ldd	r24, Y+6	; 0x06
 154:	9f 81       	ldd	r25, Y+7	; 0x07
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	91 05       	cpc	r25, r1
 15a:	49 f1       	breq	.+82     	; 0x1ae <DIO_SetPinValue+0x98>
 15c:	2e 81       	ldd	r18, Y+6	; 0x06
 15e:	3f 81       	ldd	r19, Y+7	; 0x07
 160:	22 30       	cpi	r18, 0x02	; 2
 162:	31 05       	cpc	r19, r1
 164:	2c f4       	brge	.+10     	; 0x170 <DIO_SetPinValue+0x5a>
 166:	8e 81       	ldd	r24, Y+6	; 0x06
 168:	9f 81       	ldd	r25, Y+7	; 0x07
 16a:	00 97       	sbiw	r24, 0x00	; 0
 16c:	61 f0       	breq	.+24     	; 0x186 <DIO_SetPinValue+0x70>
 16e:	d2 c0       	rjmp	.+420    	; 0x314 <DIO_SetPinValue+0x1fe>
 170:	2e 81       	ldd	r18, Y+6	; 0x06
 172:	3f 81       	ldd	r19, Y+7	; 0x07
 174:	22 30       	cpi	r18, 0x02	; 2
 176:	31 05       	cpc	r19, r1
 178:	71 f1       	breq	.+92     	; 0x1d6 <DIO_SetPinValue+0xc0>
 17a:	8e 81       	ldd	r24, Y+6	; 0x06
 17c:	9f 81       	ldd	r25, Y+7	; 0x07
 17e:	83 30       	cpi	r24, 0x03	; 3
 180:	91 05       	cpc	r25, r1
 182:	e9 f1       	breq	.+122    	; 0x1fe <DIO_SetPinValue+0xe8>
 184:	c7 c0       	rjmp	.+398    	; 0x314 <DIO_SetPinValue+0x1fe>
			{
				case PORTA: SET_BIT(PORTA_Register,u8PinIdCopy); break;
 186:	ab e3       	ldi	r26, 0x3B	; 59
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	eb e3       	ldi	r30, 0x3B	; 59
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	48 2f       	mov	r20, r24
 192:	8a 81       	ldd	r24, Y+2	; 0x02
 194:	28 2f       	mov	r18, r24
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 2e       	mov	r0, r18
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_SetPinValue+0x8e>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	0a 94       	dec	r0
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_SetPinValue+0x8a>
 1a8:	84 2b       	or	r24, r20
 1aa:	8c 93       	st	X, r24
 1ac:	b3 c0       	rjmp	.+358    	; 0x314 <DIO_SetPinValue+0x1fe>
				case PORTB: SET_BIT(PORTB_Register,u8PinIdCopy); break;
 1ae:	a8 e3       	ldi	r26, 0x38	; 56
 1b0:	b0 e0       	ldi	r27, 0x00	; 0
 1b2:	e8 e3       	ldi	r30, 0x38	; 56
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	48 2f       	mov	r20, r24
 1ba:	8a 81       	ldd	r24, Y+2	; 0x02
 1bc:	28 2f       	mov	r18, r24
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 2e       	mov	r0, r18
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_SetPinValue+0xb6>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	0a 94       	dec	r0
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_SetPinValue+0xb2>
 1d0:	84 2b       	or	r24, r20
 1d2:	8c 93       	st	X, r24
 1d4:	9f c0       	rjmp	.+318    	; 0x314 <DIO_SetPinValue+0x1fe>
				case PORTC: SET_BIT(PORTC_Register,u8PinIdCopy); break;
 1d6:	a5 e3       	ldi	r26, 0x35	; 53
 1d8:	b0 e0       	ldi	r27, 0x00	; 0
 1da:	e5 e3       	ldi	r30, 0x35	; 53
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	48 2f       	mov	r20, r24
 1e2:	8a 81       	ldd	r24, Y+2	; 0x02
 1e4:	28 2f       	mov	r18, r24
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 2e       	mov	r0, r18
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_SetPinValue+0xde>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	0a 94       	dec	r0
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_SetPinValue+0xda>
 1f8:	84 2b       	or	r24, r20
 1fa:	8c 93       	st	X, r24
 1fc:	8b c0       	rjmp	.+278    	; 0x314 <DIO_SetPinValue+0x1fe>
				case PORTD: SET_BIT(PORTD_Register,u8PinIdCopy); break;
 1fe:	a2 e3       	ldi	r26, 0x32	; 50
 200:	b0 e0       	ldi	r27, 0x00	; 0
 202:	e2 e3       	ldi	r30, 0x32	; 50
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	48 2f       	mov	r20, r24
 20a:	8a 81       	ldd	r24, Y+2	; 0x02
 20c:	28 2f       	mov	r18, r24
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 2e       	mov	r0, r18
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_SetPinValue+0x106>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	0a 94       	dec	r0
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_SetPinValue+0x102>
 220:	84 2b       	or	r24, r20
 222:	8c 93       	st	X, r24
 224:	77 c0       	rjmp	.+238    	; 0x314 <DIO_SetPinValue+0x1fe>
			}

		}

		else if (u8PinValCopy == LOW)
 226:	8b 81       	ldd	r24, Y+3	; 0x03
 228:	88 23       	and	r24, r24
 22a:	09 f0       	breq	.+2      	; 0x22e <DIO_SetPinValue+0x118>
 22c:	73 c0       	rjmp	.+230    	; 0x314 <DIO_SetPinValue+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
 22e:	89 81       	ldd	r24, Y+1	; 0x01
 230:	28 2f       	mov	r18, r24
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	3d 83       	std	Y+5, r19	; 0x05
 236:	2c 83       	std	Y+4, r18	; 0x04
 238:	8c 81       	ldd	r24, Y+4	; 0x04
 23a:	9d 81       	ldd	r25, Y+5	; 0x05
 23c:	81 30       	cpi	r24, 0x01	; 1
 23e:	91 05       	cpc	r25, r1
 240:	59 f1       	breq	.+86     	; 0x298 <DIO_SetPinValue+0x182>
 242:	2c 81       	ldd	r18, Y+4	; 0x04
 244:	3d 81       	ldd	r19, Y+5	; 0x05
 246:	22 30       	cpi	r18, 0x02	; 2
 248:	31 05       	cpc	r19, r1
 24a:	2c f4       	brge	.+10     	; 0x256 <DIO_SetPinValue+0x140>
 24c:	8c 81       	ldd	r24, Y+4	; 0x04
 24e:	9d 81       	ldd	r25, Y+5	; 0x05
 250:	00 97       	sbiw	r24, 0x00	; 0
 252:	69 f0       	breq	.+26     	; 0x26e <DIO_SetPinValue+0x158>
 254:	5f c0       	rjmp	.+190    	; 0x314 <DIO_SetPinValue+0x1fe>
 256:	2c 81       	ldd	r18, Y+4	; 0x04
 258:	3d 81       	ldd	r19, Y+5	; 0x05
 25a:	22 30       	cpi	r18, 0x02	; 2
 25c:	31 05       	cpc	r19, r1
 25e:	89 f1       	breq	.+98     	; 0x2c2 <DIO_SetPinValue+0x1ac>
 260:	8c 81       	ldd	r24, Y+4	; 0x04
 262:	9d 81       	ldd	r25, Y+5	; 0x05
 264:	83 30       	cpi	r24, 0x03	; 3
 266:	91 05       	cpc	r25, r1
 268:	09 f4       	brne	.+2      	; 0x26c <DIO_SetPinValue+0x156>
 26a:	40 c0       	rjmp	.+128    	; 0x2ec <DIO_SetPinValue+0x1d6>
 26c:	53 c0       	rjmp	.+166    	; 0x314 <DIO_SetPinValue+0x1fe>
			{
				case PORTA: CLR_BIT(PORTA_Register,u8PinIdCopy); break;
 26e:	ab e3       	ldi	r26, 0x3B	; 59
 270:	b0 e0       	ldi	r27, 0x00	; 0
 272:	eb e3       	ldi	r30, 0x3B	; 59
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	48 2f       	mov	r20, r24
 27a:	8a 81       	ldd	r24, Y+2	; 0x02
 27c:	28 2f       	mov	r18, r24
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	02 2e       	mov	r0, r18
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_SetPinValue+0x176>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	0a 94       	dec	r0
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_SetPinValue+0x172>
 290:	80 95       	com	r24
 292:	84 23       	and	r24, r20
 294:	8c 93       	st	X, r24
 296:	3e c0       	rjmp	.+124    	; 0x314 <DIO_SetPinValue+0x1fe>
				case PORTB: CLR_BIT(PORTB_Register,u8PinIdCopy); break;
 298:	a8 e3       	ldi	r26, 0x38	; 56
 29a:	b0 e0       	ldi	r27, 0x00	; 0
 29c:	e8 e3       	ldi	r30, 0x38	; 56
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	48 2f       	mov	r20, r24
 2a4:	8a 81       	ldd	r24, Y+2	; 0x02
 2a6:	28 2f       	mov	r18, r24
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	02 2e       	mov	r0, r18
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_SetPinValue+0x1a0>
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	0a 94       	dec	r0
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_SetPinValue+0x19c>
 2ba:	80 95       	com	r24
 2bc:	84 23       	and	r24, r20
 2be:	8c 93       	st	X, r24
 2c0:	29 c0       	rjmp	.+82     	; 0x314 <DIO_SetPinValue+0x1fe>
				case PORTC: CLR_BIT(PORTC_Register,u8PinIdCopy); break;
 2c2:	a5 e3       	ldi	r26, 0x35	; 53
 2c4:	b0 e0       	ldi	r27, 0x00	; 0
 2c6:	e5 e3       	ldi	r30, 0x35	; 53
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	48 2f       	mov	r20, r24
 2ce:	8a 81       	ldd	r24, Y+2	; 0x02
 2d0:	28 2f       	mov	r18, r24
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	02 2e       	mov	r0, r18
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_SetPinValue+0x1ca>
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	0a 94       	dec	r0
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_SetPinValue+0x1c6>
 2e4:	80 95       	com	r24
 2e6:	84 23       	and	r24, r20
 2e8:	8c 93       	st	X, r24
 2ea:	14 c0       	rjmp	.+40     	; 0x314 <DIO_SetPinValue+0x1fe>
				case PORTD: CLR_BIT(PORTD_Register,u8PinIdCopy); break;
 2ec:	a2 e3       	ldi	r26, 0x32	; 50
 2ee:	b0 e0       	ldi	r27, 0x00	; 0
 2f0:	e2 e3       	ldi	r30, 0x32	; 50
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 81       	ld	r24, Z
 2f6:	48 2f       	mov	r20, r24
 2f8:	8a 81       	ldd	r24, Y+2	; 0x02
 2fa:	28 2f       	mov	r18, r24
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	02 2e       	mov	r0, r18
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_SetPinValue+0x1f4>
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	0a 94       	dec	r0
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_SetPinValue+0x1f0>
 30e:	80 95       	com	r24
 310:	84 23       	and	r24, r20
 312:	8c 93       	st	X, r24

	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
 314:	27 96       	adiw	r28, 0x07	; 7
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	f8 94       	cli
 31a:	de bf       	out	0x3e, r29	; 62
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	cd bf       	out	0x3d, r28	; 61
 320:	cf 91       	pop	r28
 322:	df 91       	pop	r29
 324:	08 95       	ret

00000326 <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy)
{
 326:	df 93       	push	r29
 328:	cf 93       	push	r28
 32a:	00 d0       	rcall	.+0      	; 0x32c <DIO_GetPinValue+0x6>
 32c:	00 d0       	rcall	.+0      	; 0x32e <DIO_GetPinValue+0x8>
 32e:	0f 92       	push	r0
 330:	cd b7       	in	r28, 0x3d	; 61
 332:	de b7       	in	r29, 0x3e	; 62
 334:	8a 83       	std	Y+2, r24	; 0x02
 336:	6b 83       	std	Y+3, r22	; 0x03
	/* Define Local Variable to get the BIT Value */
	u8 u8ResultLocal;
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
 338:	8a 81       	ldd	r24, Y+2	; 0x02
 33a:	84 30       	cpi	r24, 0x04	; 4
 33c:	08 f0       	brcs	.+2      	; 0x340 <DIO_GetPinValue+0x1a>
 33e:	6c c0       	rjmp	.+216    	; 0x418 <DIO_GetPinValue+0xf2>
 340:	8b 81       	ldd	r24, Y+3	; 0x03
 342:	88 30       	cpi	r24, 0x08	; 8
 344:	08 f0       	brcs	.+2      	; 0x348 <DIO_GetPinValue+0x22>
 346:	68 c0       	rjmp	.+208    	; 0x418 <DIO_GetPinValue+0xf2>
	{
		/* Check on the Required PORT Number */
		switch (u8PortIdCopy)
 348:	8a 81       	ldd	r24, Y+2	; 0x02
 34a:	28 2f       	mov	r18, r24
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	3d 83       	std	Y+5, r19	; 0x05
 350:	2c 83       	std	Y+4, r18	; 0x04
 352:	4c 81       	ldd	r20, Y+4	; 0x04
 354:	5d 81       	ldd	r21, Y+5	; 0x05
 356:	41 30       	cpi	r20, 0x01	; 1
 358:	51 05       	cpc	r21, r1
 35a:	41 f1       	breq	.+80     	; 0x3ac <DIO_GetPinValue+0x86>
 35c:	8c 81       	ldd	r24, Y+4	; 0x04
 35e:	9d 81       	ldd	r25, Y+5	; 0x05
 360:	82 30       	cpi	r24, 0x02	; 2
 362:	91 05       	cpc	r25, r1
 364:	34 f4       	brge	.+12     	; 0x372 <DIO_GetPinValue+0x4c>
 366:	2c 81       	ldd	r18, Y+4	; 0x04
 368:	3d 81       	ldd	r19, Y+5	; 0x05
 36a:	21 15       	cp	r18, r1
 36c:	31 05       	cpc	r19, r1
 36e:	61 f0       	breq	.+24     	; 0x388 <DIO_GetPinValue+0x62>
 370:	55 c0       	rjmp	.+170    	; 0x41c <DIO_GetPinValue+0xf6>
 372:	4c 81       	ldd	r20, Y+4	; 0x04
 374:	5d 81       	ldd	r21, Y+5	; 0x05
 376:	42 30       	cpi	r20, 0x02	; 2
 378:	51 05       	cpc	r21, r1
 37a:	51 f1       	breq	.+84     	; 0x3d0 <DIO_GetPinValue+0xaa>
 37c:	8c 81       	ldd	r24, Y+4	; 0x04
 37e:	9d 81       	ldd	r25, Y+5	; 0x05
 380:	83 30       	cpi	r24, 0x03	; 3
 382:	91 05       	cpc	r25, r1
 384:	b9 f1       	breq	.+110    	; 0x3f4 <DIO_GetPinValue+0xce>
 386:	4a c0       	rjmp	.+148    	; 0x41c <DIO_GetPinValue+0xf6>
		{
			case PORTA: u8ResultLocal= GET_BIT(PINA_Register,u8PinIdCopy); break;
 388:	e9 e3       	ldi	r30, 0x39	; 57
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	28 2f       	mov	r18, r24
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	8b 81       	ldd	r24, Y+3	; 0x03
 394:	88 2f       	mov	r24, r24
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	a9 01       	movw	r20, r18
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_GetPinValue+0x7a>
 39c:	55 95       	asr	r21
 39e:	47 95       	ror	r20
 3a0:	8a 95       	dec	r24
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_GetPinValue+0x76>
 3a4:	ca 01       	movw	r24, r20
 3a6:	81 70       	andi	r24, 0x01	; 1
 3a8:	89 83       	std	Y+1, r24	; 0x01
 3aa:	38 c0       	rjmp	.+112    	; 0x41c <DIO_GetPinValue+0xf6>
			case PORTB: u8ResultLocal= GET_BIT(PINB_Register,u8PinIdCopy); break;
 3ac:	e6 e3       	ldi	r30, 0x36	; 54
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	80 81       	ld	r24, Z
 3b2:	28 2f       	mov	r18, r24
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	8b 81       	ldd	r24, Y+3	; 0x03
 3b8:	88 2f       	mov	r24, r24
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	a9 01       	movw	r20, r18
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_GetPinValue+0x9e>
 3c0:	55 95       	asr	r21
 3c2:	47 95       	ror	r20
 3c4:	8a 95       	dec	r24
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_GetPinValue+0x9a>
 3c8:	ca 01       	movw	r24, r20
 3ca:	81 70       	andi	r24, 0x01	; 1
 3cc:	89 83       	std	Y+1, r24	; 0x01
 3ce:	26 c0       	rjmp	.+76     	; 0x41c <DIO_GetPinValue+0xf6>
			case PORTC: u8ResultLocal= GET_BIT(PINC_Register,u8PinIdCopy); break;
 3d0:	e3 e3       	ldi	r30, 0x33	; 51
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	80 81       	ld	r24, Z
 3d6:	28 2f       	mov	r18, r24
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	8b 81       	ldd	r24, Y+3	; 0x03
 3dc:	88 2f       	mov	r24, r24
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	a9 01       	movw	r20, r18
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_GetPinValue+0xc2>
 3e4:	55 95       	asr	r21
 3e6:	47 95       	ror	r20
 3e8:	8a 95       	dec	r24
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_GetPinValue+0xbe>
 3ec:	ca 01       	movw	r24, r20
 3ee:	81 70       	andi	r24, 0x01	; 1
 3f0:	89 83       	std	Y+1, r24	; 0x01
 3f2:	14 c0       	rjmp	.+40     	; 0x41c <DIO_GetPinValue+0xf6>
			case PORTD: u8ResultLocal= GET_BIT(PIND_Register,u8PinIdCopy); break;
 3f4:	e0 e3       	ldi	r30, 0x30	; 48
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	28 2f       	mov	r18, r24
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	8b 81       	ldd	r24, Y+3	; 0x03
 400:	88 2f       	mov	r24, r24
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	a9 01       	movw	r20, r18
 406:	02 c0       	rjmp	.+4      	; 0x40c <DIO_GetPinValue+0xe6>
 408:	55 95       	asr	r21
 40a:	47 95       	ror	r20
 40c:	8a 95       	dec	r24
 40e:	e2 f7       	brpl	.-8      	; 0x408 <DIO_GetPinValue+0xe2>
 410:	ca 01       	movw	r24, r20
 412:	81 70       	andi	r24, 0x01	; 1
 414:	89 83       	std	Y+1, r24	; 0x01
 416:	02 c0       	rjmp	.+4      	; 0x41c <DIO_GetPinValue+0xf6>
	}

	else
	{
		/* return 0xff in case of error in the Pin ID or PORT ID */
		u8ResultLocal = 0xFF;
 418:	8f ef       	ldi	r24, 0xFF	; 255
 41a:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ResultLocal;
 41c:	89 81       	ldd	r24, Y+1	; 0x01
}
 41e:	0f 90       	pop	r0
 420:	0f 90       	pop	r0
 422:	0f 90       	pop	r0
 424:	0f 90       	pop	r0
 426:	0f 90       	pop	r0
 428:	cf 91       	pop	r28
 42a:	df 91       	pop	r29
 42c:	08 95       	ret

0000042e <DIO_SetPinDirection>:

void DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
 42e:	df 93       	push	r29
 430:	cf 93       	push	r28
 432:	cd b7       	in	r28, 0x3d	; 61
 434:	de b7       	in	r29, 0x3e	; 62
 436:	27 97       	sbiw	r28, 0x07	; 7
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	f8 94       	cli
 43c:	de bf       	out	0x3e, r29	; 62
 43e:	0f be       	out	0x3f, r0	; 63
 440:	cd bf       	out	0x3d, r28	; 61
 442:	89 83       	std	Y+1, r24	; 0x01
 444:	6a 83       	std	Y+2, r22	; 0x02
 446:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
 448:	89 81       	ldd	r24, Y+1	; 0x01
 44a:	84 30       	cpi	r24, 0x04	; 4
 44c:	08 f0       	brcs	.+2      	; 0x450 <DIO_SetPinDirection+0x22>
 44e:	ee c0       	rjmp	.+476    	; 0x62c <DIO_SetPinDirection+0x1fe>
 450:	8a 81       	ldd	r24, Y+2	; 0x02
 452:	88 30       	cpi	r24, 0x08	; 8
 454:	08 f0       	brcs	.+2      	; 0x458 <DIO_SetPinDirection+0x2a>
 456:	ea c0       	rjmp	.+468    	; 0x62c <DIO_SetPinDirection+0x1fe>
	{
		if ( u8PinDirCopy == OUTPUT )
 458:	8b 81       	ldd	r24, Y+3	; 0x03
 45a:	81 30       	cpi	r24, 0x01	; 1
 45c:	09 f0       	breq	.+2      	; 0x460 <DIO_SetPinDirection+0x32>
 45e:	6f c0       	rjmp	.+222    	; 0x53e <DIO_SetPinDirection+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
 460:	89 81       	ldd	r24, Y+1	; 0x01
 462:	28 2f       	mov	r18, r24
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	3f 83       	std	Y+7, r19	; 0x07
 468:	2e 83       	std	Y+6, r18	; 0x06
 46a:	8e 81       	ldd	r24, Y+6	; 0x06
 46c:	9f 81       	ldd	r25, Y+7	; 0x07
 46e:	81 30       	cpi	r24, 0x01	; 1
 470:	91 05       	cpc	r25, r1
 472:	49 f1       	breq	.+82     	; 0x4c6 <DIO_SetPinDirection+0x98>
 474:	2e 81       	ldd	r18, Y+6	; 0x06
 476:	3f 81       	ldd	r19, Y+7	; 0x07
 478:	22 30       	cpi	r18, 0x02	; 2
 47a:	31 05       	cpc	r19, r1
 47c:	2c f4       	brge	.+10     	; 0x488 <DIO_SetPinDirection+0x5a>
 47e:	8e 81       	ldd	r24, Y+6	; 0x06
 480:	9f 81       	ldd	r25, Y+7	; 0x07
 482:	00 97       	sbiw	r24, 0x00	; 0
 484:	61 f0       	breq	.+24     	; 0x49e <DIO_SetPinDirection+0x70>
 486:	d2 c0       	rjmp	.+420    	; 0x62c <DIO_SetPinDirection+0x1fe>
 488:	2e 81       	ldd	r18, Y+6	; 0x06
 48a:	3f 81       	ldd	r19, Y+7	; 0x07
 48c:	22 30       	cpi	r18, 0x02	; 2
 48e:	31 05       	cpc	r19, r1
 490:	71 f1       	breq	.+92     	; 0x4ee <DIO_SetPinDirection+0xc0>
 492:	8e 81       	ldd	r24, Y+6	; 0x06
 494:	9f 81       	ldd	r25, Y+7	; 0x07
 496:	83 30       	cpi	r24, 0x03	; 3
 498:	91 05       	cpc	r25, r1
 49a:	e9 f1       	breq	.+122    	; 0x516 <DIO_SetPinDirection+0xe8>
 49c:	c7 c0       	rjmp	.+398    	; 0x62c <DIO_SetPinDirection+0x1fe>
			{
				case PORTA: SET_BIT(DDRA_Register,u8PinIdCopy); break;
 49e:	aa e3       	ldi	r26, 0x3A	; 58
 4a0:	b0 e0       	ldi	r27, 0x00	; 0
 4a2:	ea e3       	ldi	r30, 0x3A	; 58
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	80 81       	ld	r24, Z
 4a8:	48 2f       	mov	r20, r24
 4aa:	8a 81       	ldd	r24, Y+2	; 0x02
 4ac:	28 2f       	mov	r18, r24
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	02 2e       	mov	r0, r18
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <DIO_SetPinDirection+0x8e>
 4b8:	88 0f       	add	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	0a 94       	dec	r0
 4be:	e2 f7       	brpl	.-8      	; 0x4b8 <DIO_SetPinDirection+0x8a>
 4c0:	84 2b       	or	r24, r20
 4c2:	8c 93       	st	X, r24
 4c4:	b3 c0       	rjmp	.+358    	; 0x62c <DIO_SetPinDirection+0x1fe>
				case PORTB: SET_BIT(DDRB_Register,u8PinIdCopy); break;
 4c6:	a7 e3       	ldi	r26, 0x37	; 55
 4c8:	b0 e0       	ldi	r27, 0x00	; 0
 4ca:	e7 e3       	ldi	r30, 0x37	; 55
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	80 81       	ld	r24, Z
 4d0:	48 2f       	mov	r20, r24
 4d2:	8a 81       	ldd	r24, Y+2	; 0x02
 4d4:	28 2f       	mov	r18, r24
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	02 2e       	mov	r0, r18
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <DIO_SetPinDirection+0xb6>
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	0a 94       	dec	r0
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <DIO_SetPinDirection+0xb2>
 4e8:	84 2b       	or	r24, r20
 4ea:	8c 93       	st	X, r24
 4ec:	9f c0       	rjmp	.+318    	; 0x62c <DIO_SetPinDirection+0x1fe>
				case PORTC: SET_BIT(DDRC_Register,u8PinIdCopy); break;
 4ee:	a4 e3       	ldi	r26, 0x34	; 52
 4f0:	b0 e0       	ldi	r27, 0x00	; 0
 4f2:	e4 e3       	ldi	r30, 0x34	; 52
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	80 81       	ld	r24, Z
 4f8:	48 2f       	mov	r20, r24
 4fa:	8a 81       	ldd	r24, Y+2	; 0x02
 4fc:	28 2f       	mov	r18, r24
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	02 2e       	mov	r0, r18
 506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_SetPinDirection+0xde>
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	0a 94       	dec	r0
 50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_SetPinDirection+0xda>
 510:	84 2b       	or	r24, r20
 512:	8c 93       	st	X, r24
 514:	8b c0       	rjmp	.+278    	; 0x62c <DIO_SetPinDirection+0x1fe>
				case PORTD: SET_BIT(DDRD_Register,u8PinIdCopy); break;
 516:	a1 e3       	ldi	r26, 0x31	; 49
 518:	b0 e0       	ldi	r27, 0x00	; 0
 51a:	e1 e3       	ldi	r30, 0x31	; 49
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	80 81       	ld	r24, Z
 520:	48 2f       	mov	r20, r24
 522:	8a 81       	ldd	r24, Y+2	; 0x02
 524:	28 2f       	mov	r18, r24
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	02 2e       	mov	r0, r18
 52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_SetPinDirection+0x106>
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	0a 94       	dec	r0
 536:	e2 f7       	brpl	.-8      	; 0x530 <DIO_SetPinDirection+0x102>
 538:	84 2b       	or	r24, r20
 53a:	8c 93       	st	X, r24
 53c:	77 c0       	rjmp	.+238    	; 0x62c <DIO_SetPinDirection+0x1fe>
			}
		}

		else if ( u8PinDirCopy == INPUT )
 53e:	8b 81       	ldd	r24, Y+3	; 0x03
 540:	88 23       	and	r24, r24
 542:	09 f0       	breq	.+2      	; 0x546 <DIO_SetPinDirection+0x118>
 544:	73 c0       	rjmp	.+230    	; 0x62c <DIO_SetPinDirection+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
 546:	89 81       	ldd	r24, Y+1	; 0x01
 548:	28 2f       	mov	r18, r24
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	3d 83       	std	Y+5, r19	; 0x05
 54e:	2c 83       	std	Y+4, r18	; 0x04
 550:	8c 81       	ldd	r24, Y+4	; 0x04
 552:	9d 81       	ldd	r25, Y+5	; 0x05
 554:	81 30       	cpi	r24, 0x01	; 1
 556:	91 05       	cpc	r25, r1
 558:	59 f1       	breq	.+86     	; 0x5b0 <DIO_SetPinDirection+0x182>
 55a:	2c 81       	ldd	r18, Y+4	; 0x04
 55c:	3d 81       	ldd	r19, Y+5	; 0x05
 55e:	22 30       	cpi	r18, 0x02	; 2
 560:	31 05       	cpc	r19, r1
 562:	2c f4       	brge	.+10     	; 0x56e <DIO_SetPinDirection+0x140>
 564:	8c 81       	ldd	r24, Y+4	; 0x04
 566:	9d 81       	ldd	r25, Y+5	; 0x05
 568:	00 97       	sbiw	r24, 0x00	; 0
 56a:	69 f0       	breq	.+26     	; 0x586 <DIO_SetPinDirection+0x158>
 56c:	5f c0       	rjmp	.+190    	; 0x62c <DIO_SetPinDirection+0x1fe>
 56e:	2c 81       	ldd	r18, Y+4	; 0x04
 570:	3d 81       	ldd	r19, Y+5	; 0x05
 572:	22 30       	cpi	r18, 0x02	; 2
 574:	31 05       	cpc	r19, r1
 576:	89 f1       	breq	.+98     	; 0x5da <DIO_SetPinDirection+0x1ac>
 578:	8c 81       	ldd	r24, Y+4	; 0x04
 57a:	9d 81       	ldd	r25, Y+5	; 0x05
 57c:	83 30       	cpi	r24, 0x03	; 3
 57e:	91 05       	cpc	r25, r1
 580:	09 f4       	brne	.+2      	; 0x584 <DIO_SetPinDirection+0x156>
 582:	40 c0       	rjmp	.+128    	; 0x604 <DIO_SetPinDirection+0x1d6>
 584:	53 c0       	rjmp	.+166    	; 0x62c <DIO_SetPinDirection+0x1fe>
			{
				case PORTA: CLR_BIT(DDRA_Register,u8PinIdCopy); break;
 586:	aa e3       	ldi	r26, 0x3A	; 58
 588:	b0 e0       	ldi	r27, 0x00	; 0
 58a:	ea e3       	ldi	r30, 0x3A	; 58
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	80 81       	ld	r24, Z
 590:	48 2f       	mov	r20, r24
 592:	8a 81       	ldd	r24, Y+2	; 0x02
 594:	28 2f       	mov	r18, r24
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	02 2e       	mov	r0, r18
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <DIO_SetPinDirection+0x176>
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	0a 94       	dec	r0
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <DIO_SetPinDirection+0x172>
 5a8:	80 95       	com	r24
 5aa:	84 23       	and	r24, r20
 5ac:	8c 93       	st	X, r24
 5ae:	3e c0       	rjmp	.+124    	; 0x62c <DIO_SetPinDirection+0x1fe>
				case PORTB: CLR_BIT(DDRB_Register,u8PinIdCopy); break;
 5b0:	a7 e3       	ldi	r26, 0x37	; 55
 5b2:	b0 e0       	ldi	r27, 0x00	; 0
 5b4:	e7 e3       	ldi	r30, 0x37	; 55
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	80 81       	ld	r24, Z
 5ba:	48 2f       	mov	r20, r24
 5bc:	8a 81       	ldd	r24, Y+2	; 0x02
 5be:	28 2f       	mov	r18, r24
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	02 2e       	mov	r0, r18
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <DIO_SetPinDirection+0x1a0>
 5ca:	88 0f       	add	r24, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	0a 94       	dec	r0
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <DIO_SetPinDirection+0x19c>
 5d2:	80 95       	com	r24
 5d4:	84 23       	and	r24, r20
 5d6:	8c 93       	st	X, r24
 5d8:	29 c0       	rjmp	.+82     	; 0x62c <DIO_SetPinDirection+0x1fe>
				case PORTC: CLR_BIT(DDRC_Register,u8PinIdCopy); break;
 5da:	a4 e3       	ldi	r26, 0x34	; 52
 5dc:	b0 e0       	ldi	r27, 0x00	; 0
 5de:	e4 e3       	ldi	r30, 0x34	; 52
 5e0:	f0 e0       	ldi	r31, 0x00	; 0
 5e2:	80 81       	ld	r24, Z
 5e4:	48 2f       	mov	r20, r24
 5e6:	8a 81       	ldd	r24, Y+2	; 0x02
 5e8:	28 2f       	mov	r18, r24
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	02 2e       	mov	r0, r18
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <DIO_SetPinDirection+0x1ca>
 5f4:	88 0f       	add	r24, r24
 5f6:	99 1f       	adc	r25, r25
 5f8:	0a 94       	dec	r0
 5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <DIO_SetPinDirection+0x1c6>
 5fc:	80 95       	com	r24
 5fe:	84 23       	and	r24, r20
 600:	8c 93       	st	X, r24
 602:	14 c0       	rjmp	.+40     	; 0x62c <DIO_SetPinDirection+0x1fe>
				case PORTD: CLR_BIT(DDRD_Register,u8PinIdCopy); break;
 604:	a1 e3       	ldi	r26, 0x31	; 49
 606:	b0 e0       	ldi	r27, 0x00	; 0
 608:	e1 e3       	ldi	r30, 0x31	; 49
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	80 81       	ld	r24, Z
 60e:	48 2f       	mov	r20, r24
 610:	8a 81       	ldd	r24, Y+2	; 0x02
 612:	28 2f       	mov	r18, r24
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	02 2e       	mov	r0, r18
 61c:	02 c0       	rjmp	.+4      	; 0x622 <DIO_SetPinDirection+0x1f4>
 61e:	88 0f       	add	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	0a 94       	dec	r0
 624:	e2 f7       	brpl	.-8      	; 0x61e <DIO_SetPinDirection+0x1f0>
 626:	80 95       	com	r24
 628:	84 23       	and	r24, r20
 62a:	8c 93       	st	X, r24

	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
 62c:	27 96       	adiw	r28, 0x07	; 7
 62e:	0f b6       	in	r0, 0x3f	; 63
 630:	f8 94       	cli
 632:	de bf       	out	0x3e, r29	; 62
 634:	0f be       	out	0x3f, r0	; 63
 636:	cd bf       	out	0x3d, r28	; 61
 638:	cf 91       	pop	r28
 63a:	df 91       	pop	r29
 63c:	08 95       	ret

0000063e <DIO_SetPortDirection>:


/* IO Ports */
void DIO_SetPortDirection (u8 u8PortId, u8 u8PortDir)
{
 63e:	df 93       	push	r29
 640:	cf 93       	push	r28
 642:	00 d0       	rcall	.+0      	; 0x644 <DIO_SetPortDirection+0x6>
 644:	00 d0       	rcall	.+0      	; 0x646 <DIO_SetPortDirection+0x8>
 646:	cd b7       	in	r28, 0x3d	; 61
 648:	de b7       	in	r29, 0x3e	; 62
 64a:	89 83       	std	Y+1, r24	; 0x01
 64c:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
 64e:	89 81       	ldd	r24, Y+1	; 0x01
 650:	28 2f       	mov	r18, r24
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	3c 83       	std	Y+4, r19	; 0x04
 656:	2b 83       	std	Y+3, r18	; 0x03
 658:	8b 81       	ldd	r24, Y+3	; 0x03
 65a:	9c 81       	ldd	r25, Y+4	; 0x04
 65c:	81 30       	cpi	r24, 0x01	; 1
 65e:	91 05       	cpc	r25, r1
 660:	d1 f0       	breq	.+52     	; 0x696 <DIO_SetPortDirection+0x58>
 662:	2b 81       	ldd	r18, Y+3	; 0x03
 664:	3c 81       	ldd	r19, Y+4	; 0x04
 666:	22 30       	cpi	r18, 0x02	; 2
 668:	31 05       	cpc	r19, r1
 66a:	2c f4       	brge	.+10     	; 0x676 <DIO_SetPortDirection+0x38>
 66c:	8b 81       	ldd	r24, Y+3	; 0x03
 66e:	9c 81       	ldd	r25, Y+4	; 0x04
 670:	00 97       	sbiw	r24, 0x00	; 0
 672:	61 f0       	breq	.+24     	; 0x68c <DIO_SetPortDirection+0x4e>
 674:	1e c0       	rjmp	.+60     	; 0x6b2 <DIO_SetPortDirection+0x74>
 676:	2b 81       	ldd	r18, Y+3	; 0x03
 678:	3c 81       	ldd	r19, Y+4	; 0x04
 67a:	22 30       	cpi	r18, 0x02	; 2
 67c:	31 05       	cpc	r19, r1
 67e:	81 f0       	breq	.+32     	; 0x6a0 <DIO_SetPortDirection+0x62>
 680:	8b 81       	ldd	r24, Y+3	; 0x03
 682:	9c 81       	ldd	r25, Y+4	; 0x04
 684:	83 30       	cpi	r24, 0x03	; 3
 686:	91 05       	cpc	r25, r1
 688:	81 f0       	breq	.+32     	; 0x6aa <DIO_SetPortDirection+0x6c>
 68a:	13 c0       	rjmp	.+38     	; 0x6b2 <DIO_SetPortDirection+0x74>
	{
		case     PORTA: DDRA_Register = u8PortDir; break;
 68c:	ea e3       	ldi	r30, 0x3A	; 58
 68e:	f0 e0       	ldi	r31, 0x00	; 0
 690:	8a 81       	ldd	r24, Y+2	; 0x02
 692:	80 83       	st	Z, r24
 694:	0e c0       	rjmp	.+28     	; 0x6b2 <DIO_SetPortDirection+0x74>
		case     PORTB: DDRB_Register = u8PortDir; break;
 696:	e7 e3       	ldi	r30, 0x37	; 55
 698:	f0 e0       	ldi	r31, 0x00	; 0
 69a:	8a 81       	ldd	r24, Y+2	; 0x02
 69c:	80 83       	st	Z, r24
 69e:	09 c0       	rjmp	.+18     	; 0x6b2 <DIO_SetPortDirection+0x74>
		case     PORTC: DDRC_Register = u8PortDir; break;
 6a0:	e4 e3       	ldi	r30, 0x34	; 52
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	8a 81       	ldd	r24, Y+2	; 0x02
 6a6:	80 83       	st	Z, r24
 6a8:	04 c0       	rjmp	.+8      	; 0x6b2 <DIO_SetPortDirection+0x74>
		case     PORTD: DDRD_Register = u8PortDir; break;
 6aa:	e1 e3       	ldi	r30, 0x31	; 49
 6ac:	f0 e0       	ldi	r31, 0x00	; 0
 6ae:	8a 81       	ldd	r24, Y+2	; 0x02
 6b0:	80 83       	st	Z, r24
		default: /* Wrong Port ID */       break;
	}
}
 6b2:	0f 90       	pop	r0
 6b4:	0f 90       	pop	r0
 6b6:	0f 90       	pop	r0
 6b8:	0f 90       	pop	r0
 6ba:	cf 91       	pop	r28
 6bc:	df 91       	pop	r29
 6be:	08 95       	ret

000006c0 <DIO_SetPortValue>:

void DIO_SetPortValue (u8 u8PortId, u8 u8PortVal)
{
 6c0:	df 93       	push	r29
 6c2:	cf 93       	push	r28
 6c4:	00 d0       	rcall	.+0      	; 0x6c6 <DIO_SetPortValue+0x6>
 6c6:	00 d0       	rcall	.+0      	; 0x6c8 <DIO_SetPortValue+0x8>
 6c8:	cd b7       	in	r28, 0x3d	; 61
 6ca:	de b7       	in	r29, 0x3e	; 62
 6cc:	89 83       	std	Y+1, r24	; 0x01
 6ce:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
 6d0:	89 81       	ldd	r24, Y+1	; 0x01
 6d2:	28 2f       	mov	r18, r24
 6d4:	30 e0       	ldi	r19, 0x00	; 0
 6d6:	3c 83       	std	Y+4, r19	; 0x04
 6d8:	2b 83       	std	Y+3, r18	; 0x03
 6da:	8b 81       	ldd	r24, Y+3	; 0x03
 6dc:	9c 81       	ldd	r25, Y+4	; 0x04
 6de:	81 30       	cpi	r24, 0x01	; 1
 6e0:	91 05       	cpc	r25, r1
 6e2:	d1 f0       	breq	.+52     	; 0x718 <DIO_SetPortValue+0x58>
 6e4:	2b 81       	ldd	r18, Y+3	; 0x03
 6e6:	3c 81       	ldd	r19, Y+4	; 0x04
 6e8:	22 30       	cpi	r18, 0x02	; 2
 6ea:	31 05       	cpc	r19, r1
 6ec:	2c f4       	brge	.+10     	; 0x6f8 <DIO_SetPortValue+0x38>
 6ee:	8b 81       	ldd	r24, Y+3	; 0x03
 6f0:	9c 81       	ldd	r25, Y+4	; 0x04
 6f2:	00 97       	sbiw	r24, 0x00	; 0
 6f4:	61 f0       	breq	.+24     	; 0x70e <DIO_SetPortValue+0x4e>
 6f6:	1e c0       	rjmp	.+60     	; 0x734 <DIO_SetPortValue+0x74>
 6f8:	2b 81       	ldd	r18, Y+3	; 0x03
 6fa:	3c 81       	ldd	r19, Y+4	; 0x04
 6fc:	22 30       	cpi	r18, 0x02	; 2
 6fe:	31 05       	cpc	r19, r1
 700:	81 f0       	breq	.+32     	; 0x722 <DIO_SetPortValue+0x62>
 702:	8b 81       	ldd	r24, Y+3	; 0x03
 704:	9c 81       	ldd	r25, Y+4	; 0x04
 706:	83 30       	cpi	r24, 0x03	; 3
 708:	91 05       	cpc	r25, r1
 70a:	81 f0       	breq	.+32     	; 0x72c <DIO_SetPortValue+0x6c>
 70c:	13 c0       	rjmp	.+38     	; 0x734 <DIO_SetPortValue+0x74>
	{
		case     PORTA: PORTA_Register = u8PortVal; break;
 70e:	eb e3       	ldi	r30, 0x3B	; 59
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	8a 81       	ldd	r24, Y+2	; 0x02
 714:	80 83       	st	Z, r24
 716:	0e c0       	rjmp	.+28     	; 0x734 <DIO_SetPortValue+0x74>
		case     PORTB: PORTB_Register = u8PortVal; break;
 718:	e8 e3       	ldi	r30, 0x38	; 56
 71a:	f0 e0       	ldi	r31, 0x00	; 0
 71c:	8a 81       	ldd	r24, Y+2	; 0x02
 71e:	80 83       	st	Z, r24
 720:	09 c0       	rjmp	.+18     	; 0x734 <DIO_SetPortValue+0x74>
		case     PORTC: PORTC_Register = u8PortVal; break;
 722:	e5 e3       	ldi	r30, 0x35	; 53
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	8a 81       	ldd	r24, Y+2	; 0x02
 728:	80 83       	st	Z, r24
 72a:	04 c0       	rjmp	.+8      	; 0x734 <DIO_SetPortValue+0x74>
		case     PORTD: PORTD_Register = u8PortVal; break;
 72c:	e2 e3       	ldi	r30, 0x32	; 50
 72e:	f0 e0       	ldi	r31, 0x00	; 0
 730:	8a 81       	ldd	r24, Y+2	; 0x02
 732:	80 83       	st	Z, r24
		default: /* Wrong Port ID */        break;
	}
}
 734:	0f 90       	pop	r0
 736:	0f 90       	pop	r0
 738:	0f 90       	pop	r0
 73a:	0f 90       	pop	r0
 73c:	cf 91       	pop	r28
 73e:	df 91       	pop	r29
 740:	08 95       	ret

00000742 <main>:

#include "ADC.h"
#include "DIO_int.h"

int main(void)
{
 742:	df 93       	push	r29
 744:	cf 93       	push	r28
 746:	00 d0       	rcall	.+0      	; 0x748 <main+0x6>
 748:	00 d0       	rcall	.+0      	; 0x74a <main+0x8>
 74a:	cd b7       	in	r28, 0x3d	; 61
 74c:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPortDirection(PORTD,HIGH);
 74e:	83 e0       	ldi	r24, 0x03	; 3
 750:	61 e0       	ldi	r22, 0x01	; 1
 752:	0e 94 1f 03 	call	0x63e	; 0x63e <DIO_SetPortDirection>
	DIO_SetPinDirection(PORTC,PIN0,HIGH);
 756:	82 e0       	ldi	r24, 0x02	; 2
 758:	60 e0       	ldi	r22, 0x00	; 0
 75a:	41 e0       	ldi	r20, 0x01	; 1
 75c:	0e 94 17 02 	call	0x42e	; 0x42e <DIO_SetPinDirection>
	DIO_SetPortDirection(PORTA,LOW);
 760:	80 e0       	ldi	r24, 0x00	; 0
 762:	60 e0       	ldi	r22, 0x00	; 0
 764:	0e 94 1f 03 	call	0x63e	; 0x63e <DIO_SetPortDirection>

	ADC_Init();
 768:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_Init>



	while(1)
	{
		int val = ADC_Read(0);
 76c:	80 e0       	ldi	r24, 0x00	; 0
 76e:	0e 94 60 00 	call	0xc0	; 0xc0 <ADC_Read>
 772:	88 2f       	mov	r24, r24
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	9c 83       	std	Y+4, r25	; 0x04
 778:	8b 83       	std	Y+3, r24	; 0x03

		int ADC = (val * 5)/250;
 77a:	2b 81       	ldd	r18, Y+3	; 0x03
 77c:	3c 81       	ldd	r19, Y+4	; 0x04
 77e:	c9 01       	movw	r24, r18
 780:	88 0f       	add	r24, r24
 782:	99 1f       	adc	r25, r25
 784:	88 0f       	add	r24, r24
 786:	99 1f       	adc	r25, r25
 788:	82 0f       	add	r24, r18
 78a:	93 1f       	adc	r25, r19
 78c:	2a ef       	ldi	r18, 0xFA	; 250
 78e:	30 e0       	ldi	r19, 0x00	; 0
 790:	b9 01       	movw	r22, r18
 792:	0e 94 df 03 	call	0x7be	; 0x7be <__divmodhi4>
 796:	cb 01       	movw	r24, r22
 798:	9a 83       	std	Y+2, r25	; 0x02
 79a:	89 83       	std	Y+1, r24	; 0x01

		if ( ADC > 3 )
 79c:	89 81       	ldd	r24, Y+1	; 0x01
 79e:	9a 81       	ldd	r25, Y+2	; 0x02
 7a0:	84 30       	cpi	r24, 0x04	; 4
 7a2:	91 05       	cpc	r25, r1
 7a4:	34 f0       	brlt	.+12     	; 0x7b2 <main+0x70>
		{
			DIO_SetPinValue(PORTC,PIN0,LOW);
 7a6:	82 e0       	ldi	r24, 0x02	; 2
 7a8:	60 e0       	ldi	r22, 0x00	; 0
 7aa:	40 e0       	ldi	r20, 0x00	; 0
 7ac:	0e 94 8b 00 	call	0x116	; 0x116 <DIO_SetPinValue>
 7b0:	dd cf       	rjmp	.-70     	; 0x76c <main+0x2a>
		}
		else
		{
			DIO_SetPinValue(PORTC,PIN0,HIGH);
 7b2:	82 e0       	ldi	r24, 0x02	; 2
 7b4:	60 e0       	ldi	r22, 0x00	; 0
 7b6:	41 e0       	ldi	r20, 0x01	; 1
 7b8:	0e 94 8b 00 	call	0x116	; 0x116 <DIO_SetPinValue>
 7bc:	d7 cf       	rjmp	.-82     	; 0x76c <main+0x2a>

000007be <__divmodhi4>:
 7be:	97 fb       	bst	r25, 7
 7c0:	09 2e       	mov	r0, r25
 7c2:	07 26       	eor	r0, r23
 7c4:	0a d0       	rcall	.+20     	; 0x7da <__divmodhi4_neg1>
 7c6:	77 fd       	sbrc	r23, 7
 7c8:	04 d0       	rcall	.+8      	; 0x7d2 <__divmodhi4_neg2>
 7ca:	0c d0       	rcall	.+24     	; 0x7e4 <__udivmodhi4>
 7cc:	06 d0       	rcall	.+12     	; 0x7da <__divmodhi4_neg1>
 7ce:	00 20       	and	r0, r0
 7d0:	1a f4       	brpl	.+6      	; 0x7d8 <__divmodhi4_exit>

000007d2 <__divmodhi4_neg2>:
 7d2:	70 95       	com	r23
 7d4:	61 95       	neg	r22
 7d6:	7f 4f       	sbci	r23, 0xFF	; 255

000007d8 <__divmodhi4_exit>:
 7d8:	08 95       	ret

000007da <__divmodhi4_neg1>:
 7da:	f6 f7       	brtc	.-4      	; 0x7d8 <__divmodhi4_exit>
 7dc:	90 95       	com	r25
 7de:	81 95       	neg	r24
 7e0:	9f 4f       	sbci	r25, 0xFF	; 255
 7e2:	08 95       	ret

000007e4 <__udivmodhi4>:
 7e4:	aa 1b       	sub	r26, r26
 7e6:	bb 1b       	sub	r27, r27
 7e8:	51 e1       	ldi	r21, 0x11	; 17
 7ea:	07 c0       	rjmp	.+14     	; 0x7fa <__udivmodhi4_ep>

000007ec <__udivmodhi4_loop>:
 7ec:	aa 1f       	adc	r26, r26
 7ee:	bb 1f       	adc	r27, r27
 7f0:	a6 17       	cp	r26, r22
 7f2:	b7 07       	cpc	r27, r23
 7f4:	10 f0       	brcs	.+4      	; 0x7fa <__udivmodhi4_ep>
 7f6:	a6 1b       	sub	r26, r22
 7f8:	b7 0b       	sbc	r27, r23

000007fa <__udivmodhi4_ep>:
 7fa:	88 1f       	adc	r24, r24
 7fc:	99 1f       	adc	r25, r25
 7fe:	5a 95       	dec	r21
 800:	a9 f7       	brne	.-22     	; 0x7ec <__udivmodhi4_loop>
 802:	80 95       	com	r24
 804:	90 95       	com	r25
 806:	bc 01       	movw	r22, r24
 808:	cd 01       	movw	r24, r26
 80a:	08 95       	ret

0000080c <_exit>:
 80c:	f8 94       	cli

0000080e <__stop_program>:
 80e:	ff cf       	rjmp	.-2      	; 0x80e <__stop_program>
